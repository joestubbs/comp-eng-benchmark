openapi: "3.0.2"

info:
  title: "Abaco API"
  description: "Abaco (Actor Based Containers) is an API and distributed computing platform funded by the National Science Foundation to provide Functions-as-a-service to the research computing community. Abaco leverages Docker containers and the Actor Model of Concurrent Computation to provide generic function primitives that are portable, composable and scalable."
  version: "1"
  termsOfService: "https://useabaco.cloud"
  contact:
    name: "Abaco API"
    url: "https://useabaco.cloud"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/TACC/abaco"

servers:
- url: http://localhost:5000
  description: Local Development
- url: http://{tenant_id_url}.develop.tapis.io
  description: Tapis Develop instance
  variables:
    tenant_id_url:
      default: dev
      description: The tenant_id associated with the request.
- url: /
  description: catch-all server definition for other Tapis instances.

security:
  - wso2jwtDevAuth: []
  - nonce: []


paths:
  /v3/actors:
    get:
      tags:
      - Actors
      summary: list_actors
      description: List summary of all actors owned by user
      operationId: list_actors
      parameters:
      - name: limit
        in: query
        description: limit the number of actors returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ArrayOfActors'
    post:
      tags:
      - Actors
      summary: create_actor
      description: Register an actor
      operationId: create_actor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewActor'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Actor'

  /v3/actors/{actor_id}:
    get:
      tags:
      - Actors
      summary: get_actor
      description: Get details of a specific actor by its id.
      operationId: get_actor
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
#                allOf:
#                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Actor'
    put:
      tags:
      - Actors
      summary: update_actor
      description: Update an actor's definition.
      operationId: update_actor
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewActor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
#                allOf:
#                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Actor'
    delete:
      tags:
      - Actors
      summary: delete_actor
      description: Permenantly delete an actor.
      operationId: delete_actor
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


  /v3/actors/{actor_id}/messages:
    get:
      tags:
      - Messages
      summary: get_messages
      description: Get number of pending messages for an actor.
      operationId: get_messages
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorMessages'
    delete:
      tags:
      - Messages
      summary: delete_pending_messages
      description: Delete all pending messages actor's inbox.
      operationId: delete_pending_messages
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]

    post:
      tags:
      - Messages
      summary: send_message
      description: Send an actor a string message
      operationId: send_message
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: _abaco_synchronous
        in: query
        description: Whether to use a synchronous execution
        schema:
          type: string
          enum: [true, false]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONMessage'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BinaryMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'

      responses:
        '200':
          description: Message receieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/MessageJsonResponse'

  /actors/{actor_id}//messages:
    post:
      tags:
      - Messages
      summary: send_binary_message
      description: Send an actor a binary message
      operationId: send_binary_message
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: _abaco_synchronous
        in: query
        description: Whether to use a synchronous execution
        schema:
          type: string
          enum: [true, false]

      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/BinaryMessage'
      responses:
        '200':
          description: Binary message receieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/MessageJsonResponse'


  /actors/{actor_id}///messages:
    post:
      tags:
      - Messages
      summary: send_json_message
      description: Send an actor a JSON message
      operationId: send_json_message
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: _abaco_synchronous
        in: query
        description: Whether to use a synchronous execution
        schema:
          type: string
          enum: [true, false]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONMessage'
      responses:
        '200':
          description: Message receieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/MessageJsonResponse'


  /v3/actors/{actor_id}/executions:
    get:
      tags:
      - Executions
      summary: list_executions
      description: List executions for an actor.
      operationId: list_executions
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorExecutionSummaries'


  /v3/actors/{actor_id}/nonces:
    get:
      tags:
      - Nonces
      summary: list_nonces
      description: List nonces for an actor.
      operationId: list_nonces
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorNonces'

    post:
      tags:
      - Nonces
      summary: create_nonce
      description: Create a nonce for an actor.
      operationId: create_nonce
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewActorNonce'

      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorNonces'


  /v3/actors/{actor_id}/nonces/{nonce_id}:
    get:
      tags:
      - Nonces
      summary: get_nonce
      description: Get details about a nonce for an actor.
      operationId: get_nonce
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: nonce_id
        in: path
        description: Unique ID of the nonce
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorNonce'
    delete:
      tags:
      - Nonces
      summary: delete_nonce
      description: Delete a nonce.
      operationId: delete_nonce
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: nonce_id
        in: path
        description: Unique ID of the nonce
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


  /v3/actors/{actor_id}/state:
    get:
      tags:
      - State
      summary: get_state
      description: Get state for an actor.
      operationId: get_state
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: object
                    description: An arbitrary JSON-serializable object.

    post:
      tags:
      - State
      summary: update_state
      description: Update state for an actor.
      operationId: update_state
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: An arbitrary JSON-serializable object.

      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorNonces'

  /v3/actors/{actor_id}/executions/{execution_id}:
    get:
      tags:
      - Executions
      summary: get_execution
      description: Get details about an execution.
      operationId: get_execution
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: execution_id
        in: path
        description: Unique ID of the execution
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorExecution'

  /v3/actors/{actor_id}/executions/{execution_id}/logs:
    get:
      tags:
      - Executions
      summary: get_execution_logs
      description: Get an execution's logs.
      operationId: get_execution_logs
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: execution_id
        in: path
        description: Unique ID of the execution
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorExecutionLogs'

  /v3/actors/{actor_id}/executions/{execution_id}/results:
    get:
      tags:
      - Actors
      - Executions
      summary: get_execution_result
      description: Get an execution's result.
      operationId: get_execution_result
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      - name: execution_id
        in: path
        description: Unique ID of the execution
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary


  /v3/actors/{actor_id}/permissions:
    get:
      tags:
      - Permissions
      summary: list_permissions
      description: List permissions for an actor.
      operationId: list_permissions
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorPermissions'
    post:
      tags:
      - Permissions
      summary: update_permissions
      description: Add or update permissions for an actor.
      operationId: update_permissions
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorPermission'

      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ActorPermissions'


  /v3/actors/{actor_id}/workers:
    get:
      tags:
      - Workers
      summary: list_workers
      description: List workers for an actor.
      operationId: list_workers
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorWorkerResponse'

                # allOf:
                #   - $ref: '#/components/schemas/BasicResponse'
                # properties:
                #   result:
                #     $ref: '#/components/schemas/ActorWorkers'
    post:
      tags:
      - Workers
      summary: manage_worker_pool_size
      description: Manage number of workers in actor's worker pool. Pool size will not decrease as a result of this action.
      operationId: manage_worker_pool_size
      parameters:
      - name: actor_id
        in: path
        description: Unique ID of the actor
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                num:
                  type: integer
                  description: Ensures the size of the pool is at least this number.

      responses:
        '200':
          description: Request successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/MessageJsonResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string

  /v3/actors/aliases:
    get:
      tags:
      - Aliases
      summary: list_aliases
      description: List all actor aliases available to user
      operationId: list_aliases
      parameters:
      - name: limit
        in: query
        description: limit the number of actors returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/ArrayOfAliases'
    post:
      tags:
      - Aliases
      summary: create_alias
      description: Register an actor alias
      operationId: create_alias
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAlias'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Alias'

  /v3/actors/aliases/{alias}:
    get:
      tags:
      - Aliases
      summary: get_alias
      description: Get details of a specific actor alias.
      operationId: get_alias
      parameters:
      - name: alias
        in: path
        description: Unique alias of the actor
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Alias'
    put:
      tags:
      - Aliases
      summary: update_actor_alias
      description: Update an alias definition.
      operationId: update_actor_alias
      parameters:
      - name: alias
        in: path
        description: Unique alias of the actor
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAlias'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Alias'
    delete:
      tags:
      - Aliases
      summary: delete_alias
      description: Permenantly delete an actor alias.
      operationId: delete_alias
      parameters:
      - name: alias
        in: path
        description: Unique alias of the actor
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


  /actors/search/{search_type}:
    get:
      tags:
      - Search
      summary: search_database
      description: Return db records that match query
      operationId: search_database
      parameters:
      - name: search_type
        in: path
        description: The Abaco database to search
        required: true
        schema:
          type: string
          enum: [actors, workers, logs, executions]
      - name: search
        in: query
        description: The query to perform when using DB search.
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of search records returned.
        schema:
          type: integer
      - name: skip
        in: query
        description: index (skip) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'


components:
  securitySchemes:
    wso2jwtDevAuth:
      type: apiKey
      in: header
      name: X-JWT-Assertion-DEV
    nonce:
      type: apiKey
      in: query
      name: x-nonce

  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, failure]

    ActorWorkerResponse:
      # allOf:
      #   - $ref: '#/components/schemas/BasicResponse'
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, failure]
        result:
          $ref: '#/components/schemas/ArrayOfActorWorkers'

    ArrayOfActorWorkers:
      type: array
      items:
        $ref: '#/components/schemas/ActorWorker'


    ActorWorker:
      type: object
      properties:
        ch_name:
          type: string
          description: Identifier for the worker channel; used to send management commands to the worker.
        cid:
          type: string
          description: The container id for the worker.
        create_time:
          type: string
          description: The time (UTC) the worker was created.
        id:
          type: string
          description: unique id for the worker.
        image:
          type: string
          description: The docker image for the actor assigned to the worker.
        last_execution_time:
          type: string
          description: The last ime (UTC) the worker started an execution.
        last_health_check_time:
          type: string
          description: The last ime (UTC) the worker responded to a health check.
        location:
          type: string
          description: The location of the docker daemon used by this worker.
        status:
          type: string
          enum: [REQUESTED, SPAWNER SETUP, PULLING IMAGE, CREATING CONTAINER, UPDATING STORE, READY, BUSY, ERROR]
          description: Status of the worker.
        tenant:
          type: string
          description: tenant assoicated with the worker.

    NewActor:
      type: object
      properties:
        image:
          type: string
          description: The Docker image associated with the actor.
        token:
          type: boolean
          description: Whether this actor requires an OAuth token.
          default: False
        default_environment:
          type: object
          description: The default environment variables and values for the actor.
        description:
          type: string
          description: User provided description of the actor.
        privileged:
          type: boolean
          description: Whether the actor runs in privileged mode (requires admin role).
          default: False
        queue:
          type: string
          description: The command channel that this actor uses.
          nullable: true
          default: null
        stateless:
          type: boolean
          description: Whether the actor stores private state between executions.
          default: True
        link:
          type: string
          description: Actor identifier of actor to link this actor's events too. May be an actor id or an alias. Cycles not permitted.
          nullable: true
          default: null
        cron_schedule:
          type: string
          description: String of 'yyyy-mm-dd hh + <number> <unit of time>' format. Turns on cron feature for actor so that at the specified times the actor with execute with a generic static message.
        cron_on:
          type: boolean
          description: Variable to turn on or off the cron schedule feature for the actor. 
      required: [image]

    Actor:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the actor.
        create_time:
          type: string
          description: Time (in UTC) the actor was created.
        image:
          type: string
          description: The Docker image associated with the actor.
        default_environment:
          type: object
          description: The default environment variables and values for the actor.
        description:
          type: string
          description: User provided description of the actor.
        last_update_time:
          type: string
          description: Time (in UTC) the actor was last updated.
        link:
          type: string
          description: Actor identifier of actor to link this actor's events too. May be an actor id or an alias. Cycles not permitted.
        mounts:
          $ref: '#/components/schemas/ArrayOfActorMounts'
        owner:
          type: string
          description: The user who created this actor.
        privileged:
          type: boolean
          description: Whether the actor runs in privileged mode.
        queue:
          type: string
          description: The command channel that this actor uses.
        state:
          type: object
          description: Current state for the actor.
        stateless:
          type: boolean
          description: Whether the actor stores private state between executions.
        token:
          type: boolean
          description: Whether this actor requires an OAuth token.
        status:
          type: string
          description: Current status of the actor.
        status_message:
          type: string
          description: Explanation of status.
        cron_schedule:
          type: string
          description: String of 'yyyy-mm-dd hh + <number> <unit of time>' format. Turns on cron feature for actor so that at the specified times the actor with execute with a generic static message.
        cron_on:
          type: boolean
          description: Variable to turn on or off the cron schedule feature for the actor.
        cron_next_ex:
          type: string
          description: Next cron execution time for the actor. Only used when `cronOn` is set to True.
        type:
          type: string
          description: Return type (none, bin, json) for this actor. Default is none.
          enum: [none, bin, json]

    ArrayOfActors:
      type: array
      items:
        $ref: '#/components/schemas/Actor'

    ActorMount:
      type: object
      properties:
        container_path:
          type: string
          description: Path within the actor container for the mount.
        host_path:
          type: string
          description: Path on the Abaco compute node for the mount.
        mode:
          type: string
          enum: [ro, rw]
          description: Mode for the mount (ro for read-only, rw for read-write).

    ArrayOfActorMounts:
      type: array
      items:
        $ref: '#/components/schemas/ActorMount'

    Alias:
      type: object
      properties:
        alias:
          type: string
          description: Actual alias for the actor; must be unique within a tenant.
        actor_id:
          type: string
          description: The id for the actor associated with this alias.
        owner:
          type: string
          description: The username of the owner of the alias.


    ActorMessages:
      type: object
      properties:
        messages:
          type: integer

    ArrayOfAliases:
      type: array
      items:
        $ref: '#/components/schemas/Alias'

    NewAlias:
      type: object
      properties:
        alias:
          type: string
          description: Actual alias for the actor; must be unique within a tenant.
        actor_id:
          type: string
          description: The id for the actor associated with this alias.

    Message:
      type: object
      properties:
        message:
          type: string
          description: Text string message to send to actor

    JSONMessage:
      type: object
      properties:
        message:
          type: object
          description: a JSON object

    BinaryMessage:
      type: object
      properties:
        message:
          type: string
          format: binary
          description: A binary object

    MessageJsonResponse:
      type: object
      properties:
        executionId:
          type: string
          description: the id of the resulting execution.

    ActorExecutionSummaries:
      type: object
      properties:
        actor_id:
          type: string
          description: the id of the actor
        api_server:
          type: string
          description: the base URL for this Abaco instance.
        owner:
          type: string
          description: The user who owns the associated actor.
        total_cpu:
          type: integer
        total_executions:
          type: integer
        total_io:
          type: integer
        total_runtime:
          type: integer
        executions:
          $ref: '#/components/schemas/ArrayOfExecutionSummaries'

    ExecutionSummary:
      type: object
      properties:
        finish_time:
          type: string
          description: the time the execution finished.
        id:
          type: string
          description: the id of the executions
        start_time:
          type: string
          description: the time the execution started.
        status:
          type: string
          enum: [SUBMITTED, RUNNING, COMPLETE]
          description: the status of the execution.
        message_received_time:
          type: string
          description: the time the message was originally received by Abaco.

    ArrayOfExecutionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ExecutionSummary'

    ActorExecution:
      type: object
      properties:
        actor_id:
          type: string
          description: the id of the actor
        api_server:
          type: string
          description: the base URL for this Abaco instance.
        owner:
          type: string
          description: The user who owns the associated actor.
        cpu:
          type: integer
        id:
          type: string
          description: the id of the executions
        start_time:
          type: string
          description: the time the execution started.
        status:
          type: string
          enum: [SUBMITTED, RUNNING, COMPLETE]
          description: the status of the execution.
        message_received_time:
          type: string
          description: the time the message was originally received by Abaco.
        io:
          type: integer
        runtime:
          type: integer
        worker_id:
          type: string
          description: the id of the Abaco worker that supervised the execution.

    ActorExecutionLogs:
      type: object
      properties:
        logs:
          type: string
          description: The (Docker) logs, typically standard out, associated with the execution.

    ActorPermissions:
      # type: array
      # items:
      #   $ref: '#/components/schemas/ActorPermission'
      type: object
      description: Key-value pairs where the key is the username and the value is the permission level.

    ActorPermission:
      type: object
      properties:
        user:
          type: string
          description: The username associated with the permission.
        level:
          type: string
          enum: [READ, EXECUTE, WRITE]
          description: The level associated with the permission.


    ActorNonces:
      type: array
      items:
        $ref: '#/components/schemas/ActorNonce'

    NewActorNonce:
      type: object
      properties:
        level:
          type: string
          enum: [READ, WRITE, EXECUTE]
          description: The permission level associated with the nonce.
        max_uses:
          type: integer
          description: Max uses for the nonce; set to -1 for unlimited uses.

    ActorNonce:
      type: object
      properties:
        id:
          type: string
          description: the id of the nonce
        level:
          type: string
          enum: [READ, WRITE, EXECUTE]
          description: The permission level associated with the nonce.
        max_uses:
          type: integer
          description: Max uses for the nonce; set to -1 for unlimited uses.
        actor_id:
          type: string
          description: the id of the actor
        api_server:
          type: string
          description: the base URL for this Abaco instance.
        owner:
          type: string
          description: The user who owns the associated actor.
        create_time:
          type: string
          description: Time (in UTC) the nonce was created.
        remaining_uses:
          type: integer
          description: Number of uses remaining for the nonce; set to -1 for unlimited uses.
        roles:
          type: array
          items:
            type: string
          description: The roles associated with the nonce.
openapi: 3.0.3
info:
  title: Tapis Applications API
  description: The Tapis Applications API provides for management of Tapis applications including permissions.
  version: '1.8.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Applications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
tags:
  - name: General
    description: General service health and readiness
  - name: Applications
    description: Manage Tapis application resources. Create, retrieve, update, etc.
  - name: Permissions
    description: |
      The permissions model allows for fine grained access control of resources. The application owner
      may grant READ and MODIFY permission to specific users. MODIFY implies READ.
  
      Please note that Tapis also supports a higher level approach to granting access known as *Sharing* that also includes
      certain implicit access to resources during the execution of a Tapis job.
  - name: Sharing
    description: |
      In addition to fine grained permissions support, Tapis also supports a higher level approach to granting access.
      This approach is known simply as *sharing*. The sharing API allows an application owner to share an application
      with a set of users as well as share publicly with all users in a tenant. Sharing grants users READ access to the
      application and more importantly facilitates allowing others to run a job using the application.

      Please note that sharing an application gives a user certain implicit access to resources in the context of running
      a job. For example, if the application has defined a specific execution system id then while the job is running the
      user who has been granted access to the application via sharing will also have the applications owner's
      authorizations when accessing the system and paths on the system. Note that the application owner's authorizations
      supplement the user's authorizations, they do not replace them.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /apps -----------------------------------------------------
  '/v3/apps/healthcheck':
    get:
      tags:
        - General
      description: Health check. Lightweight non-authenticated check that service is alive.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/apps/readycheck':
    get:
      tags:
        - General
      description: Ready check. Non-authenticated check that service is ready to do work.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service not ready.

  '/v3/apps':
    get:
      tags:
        - Applications
      description: |
        Retrieve list of applications.

        Use *listType*, *search* and *select* query parameters to limit results. Query
        parameter *listType* allows for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *SHARED_DIRECT* Include only items shared directly with requester. Exclude publicly shared items.
          - *READ_PERM* Include only items for which requester was granter READ or MODIFY permission.
          - *MINE* Include items owned or shared directly with requester. Exclude publicly shared items.
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.

        Certain Tapis services or a tenant administrator may use the query parameter *impersonationId* to be used in
        place of the requesting Tapis user. Tapis will use this user Id when performing authorization.
      operationId: getApps
      security:
        - TapisJWT: []
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query parameter. For example search=(id.like.MyApp*)~(enabled.eq.true)
          schema:
            type: string
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
        - name: showDeleted
          in: query
          description: Indicates if Applications marked as deleted should be shown in the results. Default is false.
          schema:
            type: boolean
            default: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain Tapis services or a tenant administrator may impersonate a Tapis user.
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      description: |
        Create an application using a request body. App id+version must be unique within tenant and can be composed of
        alphanumeric characters and the following special characters [-._~]. Id must begin with an alphanumeric character
        and can be no more than 80 characters in length.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST request to create an application.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - isPublic
          - sharedWithUsers
          - sharedAppCtx
          - deleted
          - created
          - updated
      operationId: createAppVersion
      security:
        - TapisJWT: []
      requestBody:
        required: true
        description: A JSON object specifying information for the app to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostApp'
      responses:
        '201':
          description: Application created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Application already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/search':
    get:
      tags:
        - Applications
      description: |
        Retrieve details for applications. Use query parameters to specify search conditions.
        For example ?owner.eq=jdoe&enabled.eq=false
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *SHARED_DIRECT* Include only items shared directly with requester. Exclude publicly shared items.
          - *READ_PERM* Include only items for which requester was granter READ or MODIFY permission.
          - *MINE* Include items owned or shared directly with requester. Exclude publicly shared items.
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchAppsQueryParameters
      security:
        - TapisJWT: []
      parameters:
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Applications
      description: |
        Retrieve details for applications. Use request body to specify SQL-like search conditions.
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *SHARED_DIRECT* Include only items shared directly with requester. Exclude publicly shared items.
          - *READ_PERM* Include only items for which requester was granter READ or MODIFY permission.
          - *MINE* Include items owned or shared directly with requester. Exclude publicly shared items.
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchAppsRequestBody
      security:
        - TapisJWT: []
      parameters:
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.app1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchApps'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApps'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}':
    get:
      tags:
        - Applications
      description: |
        Retrieve latest version of an application. In the result the attribute *sharedAppCtx* indicates if the
        application is available to the user because it has been shared with the user. The value of *sharedAppCtx*
        will be the grantor, the Tapis user who shared the application.
        
        Certain Tapis services or a tenant administrator may use the query parameter *impersonationId* to be used in
        place of the requesting Tapis user. Tapis will use this user Id when performing authorization.
      operationId: getAppLatestVersion
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'allAttributes'
        - name: resourceTenant
          in: query
          description: Restricted. May be used by Tapis services to set the tenant associated with the requested resource.
          schema:
            type: string
        - name: impersonationId
          in: query
          description: Restricted. Only certain Tapis services or a tenant administrator may impersonate a Tapis user.
          schema:
            type: string
      responses:
        '200':
          description: Application found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}':
    get:
      tags:
        - Applications
      description: |
        Retrieve information for an application given the application Id and version.
        In the result the attribute *sharedAppCtx* indicates if the application is available to the user because it has
        been shared with the user. The value of *sharedAppCtx* will be the grantor, the Tapis user who shared the application.

        Certain Tapis services or a tenant administrator may use the query parameter *impersonationId* to be used in
        place of the requesting Tapis user. Tapis will use this user Id when performing authorization.
      operationId: getApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
        - name: requireExecPerm
          in: query
          description: check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,version,owner
          schema:
            type: string
            default: 'allAttributes'
        - name: resourceTenant
          in: query
          description: Restricted. May be used by Tapis services to set the tenant associated with the requested resource.
          schema:
            type: string
      responses:
        '200':
          description: Application found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespApp'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Applications
      description: |
        Update selected attributes of an existing version of an application.
        Request body may only contain updatable attributes. Application must exist.

        Attributes that may not be updated via PATCH are

          - id
          - owner
          - enabled
          - versionEnabled
          - locked
          - deleted

        Note that the attributes owner, enabled, versionEnabled, locked and deleted may be modified using other endpoints.
      operationId: patchApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchApp'
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Applications
      description: |
        Update all updatable attributes of an application using a request body identical to POST. Application must exist.

        Note that certain attributes (such as tenant) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a PUT request to update.

        The attributes that are allowed but ignored for both PUT and POST are

          - tenant
          - uuid
          - isPublic
          - sharedWithUsers
          - sharedAppCtx
          - deleted
          - created
          - updated

        In addition, for a PUT operation, the following non-updatable attributes are allowed but ignored

          - id
          - version
          - owner
          - enabled
          - versionEnabled
          - locked

        Note that the attributes owner, enabled, versionEnabled, locked and deleted may be modified using other endpoints.
      operationId: putApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutApp'
      responses:
        '200':
          description: Application updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Application already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/isEnabled':
    get:
      tags:
        - Applications
      description: |
        Check if an application is currently enabled, i.e. available for use. If the query parameter *version*
        is specified then both the top level attribute *enabled* and the version specific attribute *versionEnabled*
        are checked. Both must be set to *true* for the application to be considered *enabled*.
      operationId: isEnabled
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: version
          in: query
          description: Include specified application version in the check.
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/enable':
    post:
      tags:
        - Applications
      description: |
        Mark an application available for use. Applies to all versions.
        Requester must be owner of the app or a tenant administrator.
      operationId: enableApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/disable':
    post:
      tags:
        - Applications
      description: |
        Mark an application unavailable for use. Applies to all versions.
        Requester must be owner of the app or a tenant administrator.
      operationId: disableApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}/enable':
    post:
      tags:
        - Applications
      description: |
        Mark a specific version of an application available for use.
        Requester must be owner of the app or a tenant administrator.
      operationId: enableAppVersion
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Application version enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}/disable':
    post:
      tags:
        - Applications
      description: |
        Mark a specific version of an application unavailable for use.
        Requester must be owner of the app or a tenant administrator.
      operationId: disableAppVersion
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Application disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}/lock':
    post:
      tags:
        - Applications
      description: |
        Lock a version of an application to prevent updates via PUT or PATCH.
        Requester must be owner of the app or a tenant administrator.
      operationId: lockApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Application locked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/{appVersion}/unlock':
    post:
      tags:
        - Applications
      description: |
        Unlock a version of an application to allow updates via PUT and PATCH.
        Requester must be owner of the app or a tenant administrator.
      operationId: unlockApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: appVersion
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AppVersionString'
      responses:
        '200':
          description: Application unlocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/delete':
    post:
      tags:
        - Applications
      description: |
        Mark an application as deleted. Application will not appear in queries unless explicitly requested.
      operationId: deleteApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/undelete':
    post:
      tags:
        - Applications
      description:  |
        Mark an application as not deleted. Application will appear in queries.
      operationId: undeleteApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Application undeleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/changeOwner/{userName}':
    post:
      tags:
        - Applications
      description:  |
        Change owner of an application. Applies to all versions.
      operationId: changeAppOwner
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Application owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/apps/{appId}/history':
    get:
      tags:
        - Applications
      description: |
        Retrieve history of changes for a given appId.
      operationId: getHistory
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: History successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAppHistory'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/apps/perms/{appId}/user/{userName}':
    get:
      tags:
        - Permissions
      description:  |
        Retrieve all application related permissions for a given application and user.
      operationId: getUserPerms
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      description:  |
        Create permissions in the Security Kernel for a user. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: grantUserPerms
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appId}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      description:  |
        Remove permissions from the Security Kernel for a user. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerms
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/perms/{appId}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      description:  |
        Remove user permission from the Security Kernel. Requester must be owner. Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerm
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /share and /unshare -------------------------------------------------------
  '/v3/apps/share/{appId}':
    get:
      tags:
        - Sharing
      summary: Retrieve all sharing information for an app
      description: |
        Retrieve all sharing information for an app. This includes all users with whom the app
        has been shared and whether or not the app has been made publicly available.
      operationId: getShareInfo
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareInfo'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Application not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Sharing
      summary: Share an app with one or more users.
      description: |
        Create or update sharing information for an app. The app will be shared with the list of users
        provided in the request body. Requester must be owner of the app.
      operationId: shareApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/share_public/{appId}':
    post:
      tags:
        - Sharing
      summary: Share an app publicly with all users in the tenant.
      description: |
        Share an app with all users in the tenant. Requester must be owner of the app.
      operationId: shareAppPublic
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: App shared publicly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/unshare/{appId}':
    post:
      tags:
        - Sharing
      summary: Unshare an app with one or more users.
      description: |
        Create or update sharing information for an app. The app will be unshared with the list of users
        provided in the request body. Requester must be owner of the app.
      operationId: unShareApp
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/apps/unshare_public/{appId}':
    post:
      tags:
        - Sharing
      summary: Remove public access for an app.
      description: |
        Remove public sharing for an app. Requester must be owner of the app.
      operationId: unShareAppPublic
      security:
        - TapisJWT: []
      parameters:
        - name: appId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: App public access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
           description: Permission denied.
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- TapisApp -----------------------------------------------------------------
    TapisApp:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/IdString'
        version:
          $ref: '#/components/schemas/AppVersionString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        versionEnabled:
          type: boolean
          default: true
        locked:
          type: boolean
          default: false
        isPublic:
          type: boolean
        sharedWithUsers:
          type: array
          items:
            type: string
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
        sharedAppCtx:
          $ref: '#/components/schemas/UserNameString'
        uuid:
          type: string
          format: uuid
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    # --- RuntimeOptions --------------------------------------------------------
    RuntimeOptions:
      type: array
      items:
        $ref: '#/components/schemas/RuntimeOptionEnum'
    # --- JobAttributes --------------------------------------------------------
    JobAttributes:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        dynamicExecSystem:
          type: boolean
          default: false
        execSystemConstraints:
          type: array
          minItems: 1
          items:
            type: string
            minLength: 3
        execSystemId:
          $ref: '#/components/schemas/IdString'
        execSystemExecDir:
          $ref: '#/components/schemas/DirString'
        execSystemInputDir:
          $ref: '#/components/schemas/DirString'
        execSystemOutputDir:
          $ref: '#/components/schemas/DirString'
        dtnSystemInputDir:
          $ref: '#/components/schemas/DirString'
        dtnSystemOutputDir:
          $ref: '#/components/schemas/DirString'
        execSystemLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        archiveSystemId:
          $ref: '#/components/schemas/IdString'
        archiveSystemDir:
          $ref: '#/components/schemas/DirString'
        archiveOnAppError:
          type: boolean
          default: true
        isMpi:
          type: boolean
          default: false
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        cmdPrefix:
          type: string
          minLength: 1
          maxLength: 126
        parameterSet:
          $ref: '#/components/schemas/ParameterSet'
        fileInputs:
          type: array
          items:
            $ref: '#/components/schemas/AppFileInput'
        fileInputArrays:
          type: array
          items:
            $ref: '#/components/schemas/AppFileInputArray'
        nodeCount:
          type: integer
        coresPerNode:
          type: integer
        memoryMB:
          type: integer
        maxMinutes:
          type: integer
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/ReqSubscribe'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
    # --- ParameterSet --------------------------------------------------------
    ParameterSet:
      type: object
      properties:
        appArgs:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        containerArgs:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        schedulerOptions:
          type: array
          items:
            $ref: '#/components/schemas/AppArgSpec'
        envVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        archiveFilter:
          type: object
          properties:
            includes:
              type: array
              items:
                type: string
                minLength: 1
            excludes:
              type: array
              items:
                type: string
                minLength: 1
            includeLaunchFiles:
                type: boolean
                default: true
        logConfig:
          type: object
          required:
            - stdoutFilename
            - stderrFilename
          properties:
            stdoutFilename:
              type: string
            stderrFilename:
              type: string
    # --- AppFileInput --------------------------------------------------------
    AppFileInput:
      type: object
      required:
        - name
        - targetPath
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/FileInputModeEnum'
        envKey:
          type: string
          minLength: 1
        autoMountLocal:
          type: boolean
          default: true
        notes:
          type: object
        sourceUrl:
          type: string
          minLength: 1
        targetPath:
          type: string
          minLength: 1
    # --- AppFileInputArray --------------------------------------------------------
    AppFileInputArray:
      type: object
      required:
        - name
        - targetDir
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/FileInputModeEnum'
        envKey:
          type: string
          minLength: 1
        notes:
          type: object
        sourceUrls:
          type: array
          items:
            type: string
            minLength: 1
        targetDir:
          type: string
          minLength: 1
    # --- AppArgSpec --------------------------------------------------------------
    AppArgSpec:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/InputNameString'
        description:
          $ref: '#/components/schemas/ArgDescriptionString'
        inputMode:
          $ref: '#/components/schemas/ArgInputModeEnum'
        arg:
          type: string
          minLength: 1
        notes:
          type: object
    # --- KeyValuePair -------------------------------------------------------
    KeyValuePair:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          default: ""
        description:
          $ref: '#/components/schemas/DescriptionString'
        inputMode:
          $ref: '#/components/schemas/KeyValueInputModeEnum'
        notes:
          type: object
    # --- ReqSubscribe -------------------------------------------
    ReqSubscribe:
      type: object
      required:
        - jobEventCategoryFilter
        - deliveryTargets
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        enabled:
          type: boolean
          default: true
        jobEventCategoryFilter:
          $ref: '#/components/schemas/JobEventCategoryFilter'
        ttlMinutes:
          type: integer
          default: 10080
        deliveryTargets:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/NotifDeliveryTarget'
    # --- NotifDeliveryTarget ------------------------------------------------------------
    NotifDeliveryTarget:
      type: object
      required:
        - deliveryMethod
        - deliveryAddress
      properties:
        deliveryMethod:
          $ref: '#/components/schemas/NotifDeliveryMethod'
        deliveryAddress:
          type: string
    # --- String types with constraints ------------------------------------
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    AppVersionString:
      type: string
      minLength: 1
      maxLength: 64
    DescriptionString:
      type: string
      maxLength: 2048
    ArgDescriptionString:
      type: string
      maxLength: 8096
    InputNameString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    DirString:
      type: string
      minLength: 1
      maxLength: 4096
    TagString:
      type: string
      minLength: 1
      maxLength: 128
    QueueNameString:
      type: string
      minLength: 1
      maxLength: 128
    # --- AppHistory ------------------------------------------------------------------
    AppHistory:
      type: object
      properties:
        appVersion:
          type: string
        jwtTenant:
          type: string
        jwtUser:
          $ref: '#/components/schemas/UserNameString'
        oboTenant:
          type: string
        oboUser:
          $ref: '#/components/schemas/UserNameString'
        operation:
          $ref: '#/components/schemas/OperationTypeEnum'
        description:
          type: string
        created:
          type: string
    # --- ShareInfo ------------------------------------------------------------------
    ShareInfo:
      type: object
      required:
        - public
        - userList
      properties:
        public:
          type: boolean
        userList:
          type: array
          items:
            $ref: '#/components/schemas/UserNameString'
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostApp:
      type: object
      required:
        - id
        - version
        - containerImage
      properties:
        id:
          $ref: '#/components/schemas/IdString'
        version:
          $ref: '#/components/schemas/AppVersionString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        versionEnabled:
          type: boolean
          default: true
        locked:
          type: boolean
          default: false
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPatchApp:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPutApp:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        runtime:
          $ref: '#/components/schemas/RuntimeEnum'
        runtimeVersion:
          type: string
        runtimeOptions:
          $ref: '#/components/schemas/RuntimeOptions'
        containerImage:
          type: string
        jobType:
          $ref: '#/components/schemas/JobTypeEnum'
        maxJobs:
          type: integer
          default: -1
        maxJobsPerUser:
          type: integer
          default: -1
        strictFileInputs:
          type: boolean
          default: false
        jobAttributes:
          $ref: '#/components/schemas/JobAttributes'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchApps:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    ReqShareUpdate:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          minItems: 1
          items:
            type: string
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespApp:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/TapisApp'
        metadata:
          type: object
    RespApps:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisApp'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespAppHistory:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AppHistory'
        metadata:
          type: object
    RespShareInfo:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ShareInfo'
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    ListTypeEnum:
      type: string
      default: OWNED
      enum:
        - OWNED
        - SHARED_PUBLIC
        - SHARED_DIRECT
        - READ_PERM
        - MINE
        - ALL
    JobTypeEnum:
      type: string
      enum:
        - BATCH
        - FORK
    RuntimeEnum:
      type: string
      enum:
        - SINGULARITY
        - DOCKER
        - ZIP
    # NOTE: RuntimeOption starts with NONE due to a bug in client code generation.
    #       Without an initial entry the prefix SINGULARITY_ gets stripped off the other 2 entries.
    RuntimeOptionEnum:
      type: string
      enum:
        - NONE
        - SINGULARITY_START
        - SINGULARITY_RUN
    NotifDeliveryMethod:
      type: string
      enum:
        - WEBHOOK
        - EMAIL
    JobEventCategoryFilter:
      type: string
      enum:
        - ALL
        - JOB_NEW_STATUS
        - JOB_INPUT_TRANSACTION_ID
        - JOB_ARCHIVE_TRANSACTION_ID
        - JOB_ERROR_MESSAGE
        - JOB_SUBSCRIPTION
    FileInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - OPTIONAL
        - FIXED
      default: OPTIONAL
    ArgInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_ON_DEMAND
    KeyValueInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_BY_DEFAULT
    OperationTypeEnum:
      type: string
      enum:
        - CREATE
        - READ
        - MODIFY
        - EXECUTE
        - DELETE
        - UNDELETE
        - HARD_DELETE
        - CHANGE_OWNER
        - ENABLE
        - DISABLE
        - LOCK
        - UNLOCK
        - GET_PERMS
        - GRANT_PERMS
        - REVOKE_PERMS
openapi: "3.0.2"

info:
  title: "Authenticator"
  description: "REST API and web server providing authentication for a Tapis v3 instance."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Authenticator"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/authenticator"

servers:
- url: http://localhost:5000
  description: Local Development
- url: http://{tenant_id_url}.develop.tapis.io
  description: Tapis Develop instance
  variables:
    tenant_id_url:
      default: dev
      description: The tenant_id associated with the request.
- url: /
  description: catch-all server definition for other Tapis instances.


paths:
  /v3/oauth2/hello:
    get:
      tags:
        - Health Check
      description: Logged connectivity test. No authorization required.
      operationId: hello
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
        '500':
          description: Server error.
  /v3/oauth2/ready:
    get:
      tags:
        - Health Check
      description: Logged connectivity test. No authorization required.
      operationId: ready
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
        '500':
          description: Server error.
  /v3/oauth2/.well-known/oauth-authorization-server:
    get:
      tags:
        - Metadata
      operationId: get_server_metadata
      description: Get the OAuth2 server metadata for the tenant.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/OAuth2Metadata'

  /v3/oauth2/admin/config:
    get:
      tags:
        - Admin
      operationId: get_config
      description: Get the authenticator configuraion for the tenant; restricted to Tenant admins.
      security:
        - TapisJWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TenantConfig'
    put:
      tags:
        - Admin
      operationId: update_config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenantConfig'
      description: Update the authenticator configuraion for the tenant; restricted to Tenant admins.
      security:
        - TapisJWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TenantConfig'


  /v3/oauth2/clients:
    get:
      tags:
        - Clients
      operationId: list_clients
      parameters:
      - name: limit
        in: query
        description: limit the number of clients returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      security:
        - TapisJWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfClients'
    post:
      tags:
        - Clients
      operationId: create_client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClient'
      security:
        - TapisJWT: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Client'

  /v3/oauth2/clients/{client_id}:
    get:
      tags:
      - Clients
      summary: Get client details
      description: Get details of a specific client by its id.
      operationId: get_client
      security:
        - TapisJWT: []
      parameters:
      - name: client_id
        in: path
        description: Unique ID of the client
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Client'
    put:
      tags:
      - Clients
      summary: Update client details
      description: Update details of a specific client by its id.
      operationId: update_client
      security:
        - TapisJWT: []
      parameters:
      - name: client_id
        in: path
        description: Unique ID of the client
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClient'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Client'
    delete:
      tags:
      - Clients
      summary: Permanently set a client to inactive.
      description: Permanently set a client to inactive. Once set to inactive clients cannot be used.
      operationId: delete_client
      security:
        - TapisJWT: []
      parameters:
      - name: client_id
        in: path
        description: Unique ID of the client
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


  /v3/oauth2/tokens:
    post:
      tags:
        - Tokens
      summary: Generate a Tapis JWT
      description: Generate a Tapis JWT using some OAuth2 grant type. Typically, a request to this endpoint is the last step in the token generation process. The fields required in the request payload depend on the grant type being used (see details below).
      operationId: create_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewToken'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TokenResponse'

  /v3/oauth2/v2/token:
    post:
      tags:
        - Tokens
      summary: Create a v2 bearer token from a Tapis v3 JWT.
      description: Create a v2 token from a Tapis v3 JWT. Note that only some tenants for both v2 and v3 are supported.
      operationId: create_v2_token
      security:
        - TapisJWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V2Token'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/V2TokenResponse'

  /v3/oauth2/tokens/revoke:
    post:
      tags:
      - Tokens
      summary: Revoke a token.
      description: Revoke a Tapis JWT. Pass the token to revoke in the body of the request. Once revoked, a token cannot be unrevoked. Only user tokens generated by this Authenticator can be revoked with this endpoint.
      operationId: revoke_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeTokenRequest'
      responses:
        '200':
          description: Token Revoked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'


  /v3/oauth2/userinfo:
    get:
      tags:
        - Profiles
      operationId: get_userinfo
      description: Return the user profile associated with the Tapis Token. Also can be used to validate the token.
      security:
        - TapisJWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Profile'

  /v3/oauth2/profiles:
    get:
      tags:
        - Profiles
      operationId: list_profiles
      security:
        - TapisJWT: []
      parameters:
      - name: limit
        in: query
        description: limit the number of profiles returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfProfiles'

  /v3/oauth2/profiles/{username}:
    get:
      tags:
        - Profiles
      operationId: get_profile
      security:
        - TapisJWT: []
      parameters:
      - name: username
        in: path
        description: Username to retrieve.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Profile'
  
  /v3/oauth2/device/code:
    post:
      tags:
        - Tokens
      summary: Generate a device code.
      description: Generate a device code; this is the first step in the device_code grant type. See the OAuth2 documentation for details.
      operationId: generate_device_code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeviceCode'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/DeviceCodeResposne'

components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, failure]
        metadata:
          type: object
          description: Metadata about the result object, including pagination information

    OAuth2Metadata:
      type: object
      properties:
        issuer:
          type: string
          description: The authorization server's issuer identifier.
        authorization_endpoint:
          type: string
          description: URL of the authorization server's authorization endpoint.
        token_endpoint:
          type: string
          description: URL of the authorization server's token endpoint.
        jwks_uri:
          type: string
          description: URL to the public key used to check signatures for the tokens issued by this server.
        registration_endpoint:
          type: string
          description: URL of the authorization server's OAuth 2.0 Dynamic Client Registration endpoint
        grant_types_supported:
          type: array
          items:
            type: string
          description: JSON-serializable list of grant types supported by this server.


    TenantConfig:
      type: object
      properties:
        allowable_grant_types:
          type: array
          items:
            type: string
          description: JSON-serializable list of allowable grant types
        use_ldap:
          type: boolean
          description: whether to use the LDAP configured in the Tenants API for this tenant.
        use_token_webapp:
          type: boolean
          description: whether to make the Authenticator token web app available
        mfa_config:
          type: object
          description: JSON-serializable object which includes various details such as which MFA system to use (e.g., TACC MFA or another MFA) and configurations for it.
        default_access_token_ttl:
          type: integer
          description: The access token TTL, in seconds, for standard grant types, such as authorization code.
        default_refresh_token_ttl:
          type: integer
          description: The refresh token TTL, in seconds, for standard grant types, such as authorization code.
        max_access_token_ttl:
          type: integer
          description: The maxiumum access token TTL, in seconds, for grant types that allow the caller to specify the TTL.
        max_refresh_token_ttl:
          type: integer
          description: The maxiumum refresh token TTL, in seconds, for grant types that allow the caller to specify the TTL.
        custom_idp_configuration:
          type: object
          description: JSON-serializable object which includes various configuration details for tenants using an IdP that is not LDAP/AD.
        token_url:
          type: string
          description: Token URL endpoint for generating v2 token
        impers_oauth_client_id:
          type: string
          description: Client ID for impersonation
        impers_oauth_client_secret:
          type: string
          description: Client secret for impersonation
        impersadmin_username:
          type: string
          description: Impersonation username for impersonation
        impersadmin_password:
          type: string
          description: Impersonation password for impersonation

    NewTenantConfig:
      type: object
      properties:
        allowable_grant_types:
          type: array
          items:
            type: string
          description: JSON-serializable list of allowable grant types
        use_ldap:
          type: boolean
          description: whether to use the LDAP configured in the Tenants API for this tenant.
        use_token_webapp:
          type: boolean
          description: whether to make the Authenticator token web app available
        default_access_token_ttl:
          type: integer
          description: The access token TTL, in seconds, for standard grant types, such as authorization code.
        default_refresh_token_ttl:
          type: integer
          description: The refresh token TTL, in seconds, for standard grant types, such as authorization code.
        max_access_token_ttl:
          type: integer
          description: The maxiumum access token TTL, in seconds, for grant types that allow the caller to specify the TTL.
        max_refresh_token_ttl:
          type: integer
          description: The maxiumum refresh token TTL, in seconds, for grant types that allow the caller to specify the TTL.
        mfa_config:
          type: object
          description: JSON-serializable object which includes various details such as which MFA system to use (e.g., TACC MFA or another MFA) and configurations for it.
        custom_idp_configuration:
          type: object
          description: Configuration for customizing the IdP integration, including custom ldap search filters and alternative IdPs like github OAuth of Custos; must be a JSON-serializable object.
        token_url:
          type: string
          description: Token URL endpoint for generating v2 token
        impers_oauth_client_id:
          type: string
          description: Client ID for impersonation
        impers_oauth_client_secret:
          type: string
          description: Client secret for impersonation
        impersadmin_username:
          type: string
          description: Impersonation username for impersonation
        impersadmin_password:
          type: string
          description: Impersonation password for impersonation

    NewClient:
      type: object
      properties:
        client_id:
          type: string
          description: A unique identifier for the client. Must be unique for the tenant.
        client_key:
          type: string
          description: A secret key for authenticating the client.
        callback_url:
          type: string
          description: URL for application to receive OAuth callbacks for executing flows such as authorization_code.
        display_name:
          type: string
          description: A name for this client that will be displayed to a user.
        description:
          type: string
          description: A description of this client. Optional.

    NewToken:
      type: object
      properties:
        username:
          type: string
          description: The username being authenticated (for password grant).
        password:
          type: string
          description: The password assoicated with the username being authenticated (for password grant).
        client_id:
          type: string
          description: The client_id being authenticated (for device_code grant).
        client_key:
          type: string
          description: The client_key being authenticated (optional for authorization_code grant).
        grant_type:
          type: string
          description: The OAuth2 grant type being used; either password, authorization_code or refresh_token.
        redirect_uri:
          type: string
          description: The client's redirect URI (for authorization_code grant).
        code:
          type: string
          description: The authorization code associated with the request (for authorization_code grant).
        device_code:
          type: string
          description: The device code associated with the request (for device_code grant)
        refresh_token:
          type: string
          description: The refresh token associated with the request (for refresh_token grant).

    V2Token:
      type: object
      required: [access_token]
      properties:
        access_token:
          type: string
          description: The access token representing the user.

    RevokeTokenRequest:
      type: object
      properties:
        token:
          type: string
          description: The Tapis JWT to revoke.

    NewDeviceCode:
      type: object
      required: [client_id]
      properties:
        client_id:
          type: string
          description: The client_id requesting the device code.

    Client:
      type: object
      properties:
        client_id:
          type: string
          description: A unique identifier for the client. Must be unique for the tenant.
        client_key:
          type: string
          description: A secret key for authenticating the client.
        callback_url:
          type: string
          description: URL for application to receive OAuth callbacks for executing flows such as authorization_code.
        create_time:
          type: string
          description: The time the client was created.
        last_update_time:
          type: string
          description: The time the client was last updated.
        display_name:
          type: string
          description: The display name that will represent this client.
        description:
          type: string
          description: A description of this client.

    UpdateClient:
      type: object
      properties:
        callback_url:
          type: string
          description: URL for application to receive OAuth callbacks for executing flows such as authorization_code.
        display_name:
          type: string
          description: The display name that will represent this client.

    TokenResponse:
      type: object
      required: [access_token]
      properties:
        access_token:
          type: object
          description: A Tapis access token object.
          properties:
            access_token:
              type: string
              description: The actual access token as a JWT
            id_token:
              type: string
              description: The actual access token as a JWT
            expires_at:
              type: string
              description: The time, as a string in UTC, when the token expires.
            expires_in:
              type: integer
              description: The amount of time, in seconds, when the token will expire.
            jti:
              type: string
              description: Unique identifier for the token
        refresh_token:
          type: object
          description: A Tapis refresh token object.
          properties:
            refresh_token:
              type: string
              description: The actual refresh token as a JWT
            expires_at:
              type: string
              description: The time, as a string in UTC, when the token expires.
            expires_in:
              type: integer
              description: The amount of time, in seconds, when the token will expire.
            jti:
              type: string
              description: Unique identifier for the token
    
    V2TokenResponse:
      type: object
      description: A v2 token response object.
      properties:
        expires_in:
          type: integer
          description: The amount of time, in seconds, when the token will expire.
        refresh_token:
          type: string
          description: The refresh token associated with the v2 token
        access_token:
          type: string
          description: Unique identifier for the token

    DeviceCodeResposne:
      type: object
      required: [device_code, user_code, client_id, expires_in, verification_uri]
      properties:
        device_code:
          type: string
          description: The device code generated for the client
        user_code:
          type: string
          description: The user code generated for the client
        client_id:
          type: string
          description: The client_id of the client
        expires_in:
          type: string
          description: The expiration for the user code
        verification_uri:
          type: string
          description: The url the user should go to to enter their user code

    arrayOfClients:
      type: array
      items:
        $ref: '#/components/schemas/Client'

    Profile:
      type: object
      description: The profile associated with a Tapis identity. NOTE -the fields in the Profile object are populated on a best-effort basis and should not be relied upon. Only the username field is guaranteed to be populated. 
      properties:
        username:
          type: string
          description: The username associated with the profile.
        email:
          type: string
          description: The email address associated with the profile.
        name:
          type: string
          description: The full name of the user.

    arrayOfProfiles:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
openapi: 3.0.3
info:
  title: Tapis Files API
  description: The Tapis Files API provides for management of file resources on Tapis systems
  version: '1.8.2'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Files API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
tags:
  - name: General
    description: General service health and readiness
  - name: File Operations
    description: |
      Manage file resources on Tapis systems. List, upload, copy, native operations, etc.
      Note that not all operations are supported for all system types.
  - name: Content
    description: Download a file or directory. Not supported for all system types.
  - name: Transfers
    description: |
      Manage file transfers between two systems. Initiate, cancel and retrieve status.
      Note that not all combinations of system types are supported. For example, transfers involving a GLOBUS
      system must be GLOBUS to GLOBUS.
  - name: Permissions
    description: |
      The permissions model allows for fine grained access control of paths on a Tapis system. The system owner
      may grant READ and MODIFY permission to specific users. MODIFY implies READ.
  
      Please note that Tapis also supports a higher level approach to granting access known as *Sharing*.

      Finally, be aware that Tapis permissions are independent of native permissions enforced by the underlying system host.
  - name: Sharing
    description: |
      In addition to fine grained permissions support, Tapis also supports a higher level approach to granting access.
      This approach is known simply as *sharing*. The sharing API allows you to share a path with a set of users as
      well as share publicly with all users in a tenant.
      Sharing a path grants users READ access to the path. If the system has a dynamic *effectiveUserId*, then
      MODIFY access is also granted.
      Note that if system type is ``IRODS`` and the attribute *useProxy* is set to ``true`` then the system is
      also treated as having a dynamic *effectiveUserId* and users will be granted MODIFY access. 

      In the context of running a job, sharing will also grant users READ and MODIFY access to the path.
      
      Please note that the underlying host associated with a system typically also has it's own access controls.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /files -----------------------------------------------------
  '/v3/files/healthcheck':
    get:
      tags:
        - General
      description: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/files/readycheck':
    get:
      tags:
        - General
      description: Ready check
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  # --- Paths for /files/ops -----------------------------------------------------
  /v3/files/ops/{systemId}/{path}:
    get:
      tags:
        - File Operations
      description: |
        List files or objects on a Tapis system. Type for items will depend on system type. For example, for LINUX
        they will be posix files and for S3 they will be storage objects. For S3 the recurse flag is ignored and all
        objects with keys matching the path as a prefix are included.
        
        For system types that support directory hierarchies the maximum recursion depth is 20.
        
        Note that S3 buckets do not have a hierarchical structure. There are no directories. Everything is an object
        associated with a key.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*
        for the system.
        
        Certain services may use the query parameter *sharedCtx* to indicate that the request is in a shared
        context. *sharedCtx* must be set to the share grantor.
        Tapis will include the share grantor as part of authorization checks.
      operationId: listFiles
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: directoryA/directoryB/
        - name: pattern
          in: query
          description: |
            Wildcard pattern (glob) or regular expression to filter the results returned by this request.  Regular 
            expressions must have the prefix "regex:".  Only files where the name matches the pattern will be 
            returned.  The pattern is evaluated against the filename portion of the path only, and not the entire 
            path.  For example to match a file that begins with "myFile" you could use a pattern of "myFile*" or 
            "regex:myFile.*".  Or, to match files that end with .txt, you could supply a pattern of "*.txt" or 
            "regex:.*\.txt$".  Recursive listings filter only against filnames also - so even if the directory 
            doesn't match the pattern, files in the directory can be returned.  See documentation for Java regex 
            for the exact details of how Java handles regular expressions.  NOTE - this is only supported for linux 
            systems at present.
          schema:
            type: string
        - name: limit
          in: query
          description: pagination limit
          schema:
            type: integer
            format: int32
            default: 1000
          example: 100
        - name: offset
          in: query
          description: pagination offset
          schema:
            type: integer
            format: int64
            default: 0
          example: 1000
        - name: recurse
          in: query
          description: Recursive listing. Maximum recursion depth is 20.
          schema:
            type: boolean
            default: false
          example: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: sharedCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context. Must be set to the share grantor.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: A list of files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    put:
      tags:
        - File Operations
      description: |
        Move or copy a file, directory or object on {systemID} at path {path}.
        Not all operations supported for all system types.
      operationId: moveCopy
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveCopyRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    post:
      tags:
        - File Operations
      description: |
        The file or object will be uploaded at the {path} independent of the original name.
      operationId: insert
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    delete:
      tags:
        - File Operations
      description: |
        Delete a file, directory or object on {systemID} at path {path}.
 
        For a LINUX directory this will be a recursive delete.
 
        For an S3 system, the path will represent either a single object or all objects in the bucket with a prefix
        matching the system *rootDir* if the path is the empty string.
 
        **WARNING** For an S3 system if the path is the empty string, then all objects in the bucket with a key matching
        the prefix *rootDir* will be deleted. So if the *rootDir* is also the empty string, then all objects in the bucket
        will be removed.
      operationId: delete
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
  /v3/files/ops/{systemId}:
    post:
      tags:
        - File Operations
      description: |
        Create a directory on the system at the given path. Not supported for all system types. Currently supported
        for LINUX, IRODS and GLOBUS type systems.

        Certain services may use the query parameter *sharedCtx* to indicate that the request is in a shared
        context. *sharedCtx* must be set to the share grantor.
        Tapis will include the share grantor as part of authorization checks.

        If the path already exists as a directory, no error will be returned.
      operationId: mkdir
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: sharedCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context. Must be set to the share grantor.
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MkdirRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'

  # --- Paths for /files/utils -----------------------------------------------------
  /v3/files/utils/linux/{systemId}/{path}:
    get:
      tags:
        - File Operations
      description: |
        Get native stat information for a file or directory for a system of type LINUX.
      operationId: getStatInfo
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: directoryA/file1
        - name: followLinks
          in: query
          description: When path is a symbolic link whether to get information about the link (false) or the link target (true)
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: Linux stat information for the file or directory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStatInfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    post:
      tags:
        - File Operations
      description: |
        Run a native operation on a path. Operations are chmod, chown or chgrp. For a system of type LINUX.
      operationId: runLinuxNativeOp
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
        - name: recursive
          in: query
          description: If path is a directory this indicates whether or not to apply the changes recursively
          schema:
            type: boolean
            default: false
          example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeLinuxOpRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NativeLinuxOpResultResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'

  /v3/files/utils/linux/facl/{systemId}/{path}:
    get:
      tags:
        - File Operations
      description: |
        Get file ACLs for files or directories for a system of type LINUX.
      operationId: getFacl
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: /directoryA/directoryB/
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NativeLinuxGetFaclResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    post:
      tags:
        - File Operations
      description: |
        Set file ACLs for files or directories for a system of type LINUX.

        This can be used for a single file or directory, or can be recursive.  If recursion is
        used, it can be made to follow symlinks, or not follow symlinks.

        The operations support adding or removing Acl Entries as well as removing all acls or all
        default acls
      operationId: setFacl
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          description: System ID
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: /directoryA/directoryB/
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeLinuxSetFaclRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NativeLinuxSetFaclResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'

  # --- Paths for /files/content -------------------------------------------------
  /v3/files/content/{systemId}/{path}:
    get:
      tags:
        - Content
      description: |
        Get file or directory contents as a stream of data.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*
        for the system.
        
        Use the query parameter *zip* to request a stream compressed using the ZIP file format. This is not allowed
        if system *rootDir* plus *path* would result in all files on the host being included. Please download
        individual directories, files or objects.
        
        Certain services may use the query parameter *sharedCtx* to indicate that the request is in a shared
        context. *sharedCtx* must be set to the share grantor.
        Tapis will include the share grantor as part of authorization checks.
      operationId: getContents
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: directoryA/directoryB/
        - name: range
          in: header
          description: Optional range of bytes to send. If not specified all content
            will be sent.
          schema:
            $ref: '#/components/schemas/HeaderByteRange'
          example: range=0,999
        - name: zip
          in: query
          description: Indicates a zip output stream should be provided.
          schema:
            type: boolean
          example: false
        - name: more
          in: header
          description: Send 1k of UTF-8 encoded string back starting at 'page' 1, e.g. more=1
          schema:
            type: integer
            format: int64
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: sharedCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context. Must be set to the share grantor.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Not Authenticated
        '404':
          description: Not Found
        '403':
          description: Permission Denied

  # --- Paths for /files/transfers -----------------------------------------------
  /v3/files/transfers:
    get:
      tags:
        - Transfers
      description: |
        Get a list of transfer tasks starting with the most recent.
      operationId: getRecentTransferTasks
      security:
        - TapisJWT: []
      parameters:
        - name: limit
          in: query
          description: pagination limit
          schema:
            type: integer
            format: int32
            default: 1000
          example: 100
        - name: offset
          in: query
          description: pagination offset
          schema:
            type: integer
            format: int32
            default: 0
          example: 1000
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskListResponse'
    post:
      tags:
        - Transfers
      description: |
        Create a background task which will transfer files between systems.
        Note that not all combinations of system types are supported. For example, transfers involving a GLOBUS
        system must be GLOBUS to GLOBUS.
      operationId: createTransferTask
      security:
        - TapisJWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqTransfer'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskResponse'
  /v3/files/transfers/{transferTaskId}:
    get:
      tags:
        - Transfers
      description: |
        Retrieve a transfer task. By default only the top level attributes are included in the result.
        The top level attributes are: tenantId, uuid, status, username, tag, created, startTime, endTime, errorMessage.
        The query parameter *includeSummary* may be set to *true* to also include totalTransfers, completeTransfers
        and estimatedTotalBytes. The default for *includeSummary* is *false*.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*
        for the system.

        TransferTask attributes:
          - *tenantId*: tenant associated with the transfer task.
          - *uuid*: Unique id of the transfer task.
          - *tag*: Optional tag provided by user who requested the transfer.
          - *username*: Tapis user who requested the transfer. 
          - *status*: ACCEPTED, STAGED, IN_PROGRESS, COMPLETED, CANCELLED, FAILED, FAILED_OPT, PAUSED
          - *created*: Timestamp 
          - *startTime*: Timestamp
          - *endTime*: Timestamp
          - *errorMessage*: Error message, if applicable.
          - *totalTransfers*: Total number of child transfers requested.
          - *completeTransfers*: Number of child transfers completed.
          - *estimatedTotalBytes*: Estimate of total number of bytes transferred by all child tasks.
      operationId: getTransferTask
      security:
        - TapisJWT: []
      parameters:
        - name: transferTaskId
          in: path
          description: Transfer task ID
          required: true
          schema:
            type: string
          example: 6491c2a5-acb2-40ef-b2c0-bc1fc4cd7e6c
        - name: includeSummary
          in: query
          description: Indicates if summary information such as *estimatedTotalBytes* should be included.
          schema:
            type: boolean
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskResponse'
    delete:
      tags:
        - Transfers
      description: |
        Request that a transfer task be cancelled.
      operationId: cancelTransferTask
      security:
        - TapisJWT: []
      parameters:
        - name: transferTaskId
          in: path
          description: Transfer task ID
          required: true
          schema:
            type: string
          example: 6491c2a5-acb2-40ef-b2c0-bc1fc4cd7e6c
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
  /v3/files/transfers/{transferTaskId}/details:
    get:
      tags:
        - Transfers
      description: |
        Retrieve all information for a transfer task, including totalTransfers, completedTransfers, estimatedTotalBytes,
        list of parents and list of children for each parent.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*
        for the system.

        For more information on transfer task attributes please see *getTransferTask*.
      operationId: getTransferTaskDetails
      security:
        - TapisJWT: []
      parameters:
        - name: transferTaskId
          in: path
          description: Transfer task ID
          required: true
          schema:
            type: string
          example: 6491c2a5-acb2-40ef-b2c0-bc1fc4cd7e6c
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskResponse'

  # --- Paths for /files/permissions ---------------------------------------------
  /v3/files/permissions/{systemId}/{path}:
    get:
      tags:
        - Permissions
      description: |
        Get the Tapis permissions for a user for the system and path.
        If no user specified then permissions are retrieved for the user making the request.
      operationId: getPermissions
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: Username to list
          schema:
            type: string
      responses:
        '200':
          description: FilePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePermissionResponse'
    post:
      tags:
        - Permissions
      description: |
        Grant access to a path for a user. Access may be READ or MODIFY. MODIFY implies READ.
      operationId: grantPermissions
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissionRequest'
        required: true
      responses:
        '200':
          description: FilePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePermissionResponse'
    delete:
      tags:
        - Permissions
      description: |
        Revoke access for a user for the system and path. All access is revoked.
      operationId: deletePermissions
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: Username to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: FilePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'

  # --- Paths for /share and /unshare -------------------------------------------------------
  '/v3/files/share/{systemId}/{path}':
    get:
      tags:
        - Sharing
      summary: Retrieve all sharing information for a path on a system
      description: |
        Retrieve all sharing information for a path on a system. This includes all users with whom the path
        has been shared and whether or not the path has been made publicly available.
        Sharing a path grants users READ access to the path or, in the context of running a job, it grants users READ
        and MODIFY access to the path.
      operationId: getShareInfo
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareInfo'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Sharing
      summary: Share a path on a system with one or more users.
      description: |
        Create or update sharing information for a path on a system. The path will be shared with the list of users
        provided in the request body. Requester must be owner of the system. For LINUX systems path sharing is
        hierarchical.
        Sharing a path grants users READ access to the path or, in the context of running a job, it grants users READ
        and MODIFY access to the path.
      operationId: sharePath
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/share_public/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Share a path on a system publicly with all users in the tenant.
      description: |
        Share a path on a system with all users in the tenant. Requester must be owner of the system.
        Sharing a path grants users READ access to the path or, in the context of running a job, it grants users READ
        and MODIFY access to the path.
      operationId: sharePathPublic
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Path shared publicly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/unshare/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Unshare a path on a system with one or more users.
      description: |
        Create or update sharing information for a path on a system. The path will be unshared with the list of users
        provided in the request body. Requester must be owner of the system.
      operationId: unSharePath
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/unshare_public/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Remove public access for a path on a system.
      description: |
        Remove public sharing for a path on a system. Requester must be owner of the system.
      operationId: unSharePathPublic
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Path public access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/unshare_all/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Remove all shares for a path on a system including public access.
      description: |
        Remove all shares for a path on a system including public access. This will also be done for all sub-paths.
      operationId: unSharePathAll
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
        - name: recurse
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: All share access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for PostIts  -------------------------------------------------------
  '/v3/files/postits/{systemId}/{path}':
    post:
      summary: Create a PostIt
      tags: 
        - PostIts
      description: |
        Create a PostIt.  The PostIt will grant access to a file url.
        The newly created PostIt can be redeemed by anyone without 
        further authorization.  This will nearly identical to calling
        the files service getContents endpoint.
      operationId: createPostIt
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          description: The name of the system to create the PostIt for.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          description: Path relative to the system *rootDir*
          example: /DirectoryA/DirectoryB/file.txt
          schema: 
            type: string
      requestBody:
        required: true
        description: A JSON document describing the PostIt to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostItRequest'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostItResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
  '/v3/files/postits':
    get:
      summary: List PostIts.
      tags: 
        - PostIts
      description: |
        Retrieve a list of all PostIts.  Use *listType* and *select* query 
        parameters to limit results. Query parameter *listType* allows for filtering 
        results based on authorization. Options for *listType* are
          - *OWNED* Include only items owned by requester (Default)
          - *ALL* Include all items requester is authorized to view. (Tenant admins can view all PostIts in their tenant).
      operationId: listPostIts
      security:
        - TapisJWT: []
      parameters:
        - name: listType
          in: query 
          schema: 
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=&lt;postitid&gt;
          schema:
            type: string
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,path
          schema:
            type: string
            default: 'summaryAttributes'

      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostItListResponse'    
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
  '/v3/files/postits/{postitId}':
    get:
      summary: Get PostIt.
      tags: 
        - PostIts
      description: Get a single PostIt.  This does not redeem the PostIt. 
      operationId: getPostIt
      security:
        - TapisJWT: []
      parameters:
        - name: postitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostItResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    patch:
      summary: Modify a PostIt
      tags: 
        - PostIts
      description: |
        Update selected fields of a PostIt. 
      operationId: updatePostIt
      security:
        - TapisJWT: []
      parameters:
        - name: postitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: A JSON document describing the PostIt to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostItRequest'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostItResponse'          
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    delete:
      summary: Delete a PostIt
      tags: 
        - PostIts
      description: Delete a PostIt. 
      operationId: deletePostIt
      security:
        - TapisJWT: []
      parameters:
        - name: postitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
  '/v3/files/postits/redeem/{postitId}':
    get:
      summary: Redeem PostIt.
      tags: 
        - PostIts
      description: Redeem a PostIt.  This will return the file that is pointed to by the PostIt.  No authentication is required.
        If the *zip* query param is provided it controls if the content is zipped or not.  If zip is not provided, it defaults
        to false unless the path pointed to by the PostIt is a directory.  In the case of a directory, the default is zip=true.
        Directories must by redeemed in zipped format, so either accept the default, or specify zip=true.
      operationId: redeemPostIt
      parameters:
        - name: postitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: zip
          in: query
          description: Indicates a zip output stream should be provided.  If zip is not provided it defaults to false unless
            the path is a directory.  In the case of a directory the content will be zipped.
          schema:
            type: boolean
          example: false
        - name: download
          in: query
          description: If set to true, this will force a browser to initiate a file download.  If set to false, the content-disposition header will be set to inline causing the browser to render the document.  If download is not provided it defaults to false. 
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: Success.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '403':
          description: Permission Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        '500':
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    HeaderByteRange:
      type: object
      properties:
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
    # --- FileInfo -----------------------------------------------------------------
    FileInfo:
      type: object
      properties:
        mimeType:
          type: string
        type:
          $ref: '#/components/schemas/FileTypeEnum'
        owner:
          type: string
        group:
          type: string
        nativePermissions:
          type: string
        url:
          type: string
        lastModified:
          type: string
          format: date-time
        name:
          type: string
        path:
          type: string
        size:
          type: integer
          description: size in kB
          format: int64
    # --- FileStatInfo -----------------------------------------------------------------
    FileStatInfo:
      type: object
      properties:
        absolutePath:
          type: string
        uid:
          type: integer
          format: int32
        gid:
          type: integer
          format: int32
        size:
          type: integer
          format: int64
        perms:
          type: string
        accessTime:
          type: integer
          format: int64
        modifyTime:
          type: integer
          format: int64
        dir:
          type: boolean
        link:
          type: boolean
    # --- AclEntryInfo -----------------------------------------------------------------
    AclEntryInfo:
      type: object
      properties:
        defaultAcl:
          type: boolean
        type:
          type: string
        principal:
          type: string
        permissions:
          type: string
    FileListingResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    # --- FilePermission -----------------------------------------------------------
    FilePermission:
      type: object
      properties:
        tenantId:
          type: string
        username:
          type: string
        systemId:
          type: string
        path:
          type: string
        permission:
          $ref: '#/components/schemas/PermEnum'
    SharedFileObject:
      type: object
      properties:
        creator:
          type: string
          description: Username who shared the file/directory
        sharedWith:
          type: string
          description: Username who was granted access
        created:
          type: string
          description: Creation timestamp in UTC
        expiresIn:
          type: integer
          description: Number of seconds in which the share was set to expire.
          format: int32
        url:
          type: string
          description: Link to the shared file.
    ShareFileRequest:
      required:
        - expiresIn
        - username
      type: object
      properties:
        username:
          type: string
          description: The user with which to share
        expiresIn:
          maximum: 604800
          minimum: 1
          type: integer
          description: Time in seconds of expiration. minimum=1, maximum=604800 (1
            week)
          format: int32
    # --- TransferTask -------------------------------------------------------------
    TransferTask:
      type: object
      properties:
        username:
          type: string
        tenantId:
          type: string
        tag:
          type: string
        uuid:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/TransferStatusEnum'
        parentTasks:
          type: array
          items:
            $ref: '#/components/schemas/TransferTaskParent'
        estimatedTotalBytes:
          type: integer
          format: int64
        totalBytesTransferred:
          type: integer
          format: int64
        totalTransfers:
          type: integer
          format: int32
        completeTransfers:
          type: integer
          format: int32
        errorMessage:
          type: string
        created:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    # --- TransferTaskParent -------------------------------------------------------
    TransferTaskParent:
      type: object
      properties:
        tenantId:
          type: string
        username:
          type: string
        sourceURI:
          type: string
        destinationURI:
          type: string
        totalBytes:
          type: integer
          format: int64
        bytesTransferred:
          type: integer
          format: int64
        taskId:
          type: integer
          format: int32
        children:
          type: array
          items:
            $ref: '#/components/schemas/TransferTaskChild'
        errorMessage:
          type: string
        uuid:
          type: string
          description: Unique ID of the task.
          format: uuid
        status:
          $ref: '#/components/schemas/TransferStatusEnum'
        created:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    # --- TransferTaskChild --------------------------------------------------------
    TransferTaskChild:
      type: object
      properties:
        tenantId:
          type: string
        username:
          type: string
        sourceURI:
          type: string
        destinationURI:
          type: string
        totalBytes:
          type: integer
          format: int64
        bytesTransferred:
          type: integer
          format: int64
        taskId:
          type: integer
          format: int32
        errorMessage:
          type: string
        parentTaskId:
          type: integer
          format: int32
        retries:
          type: integer
          format: int32
        dir:
          type: boolean
        uuid:
          type: string
          description: Unique ID of the task.
          format: uuid
        status:
          $ref: '#/components/schemas/TransferStatusEnum'
        created:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    # --- PostIt -------------------------------------------------------------
    PostIt:
      type: object
      properties:
        postitId:
          type: string
          format: uuid
          description: The unique ID of the PostIt.
        systemId:
          type: string
          description: The ID of the system where the file pointed to by the PostIt resides.
        owner:
          type: string
          description: The owner of the PostIt.
        tenantId:
          type: string
          description: the tenant that tthe PostIt belongs to.
        path:
          type: string
          description: Path relative to the system *rootDir*
        allowedUses:
          type: integer
          format: int32
          description: The number of times the PostIt may be redeemed.  This number minus *uses* is the number of uses remaining.
        timesUsed:
          type: integer
          format: int32
          description: The number of times the PostIt has already been retrieved.
        jwtUser:
          type: string
          description: Authenticated user from the JWT (may be different than OBO user).
        jwtTenantId:
          type: string
          description: Tenant of authenticated user from the JWT (may be different than OBO user's tenant).

        redeemUrl:
          type: string
          description: The url to use to retrieve the file pointed to by the PostIt.
        expiration:
          type: string
          format: date-time
          description: The expiration date/time of the PostIt.
        created:
          type: string
          format: date-time
          description: Creation timestamp in UTC
        updated:
          type: string
          format: date-time
          description: Last update timestamp in UTC
    # --- String types with constraints ------------------------------------
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    MkdirRequest:
      required:
        - path
      type: object
      properties:
        path:
          pattern: ^(?!.*\.\.).*
          type: string
    MoveCopyRequest:
      required:
        - newPath
        - operation
      type: object
      properties:
        operation:
          type: string
          enum:
            - MOVE
            - COPY
        newPath:
          type: string
          description: Paths must be absolute, ../.. is not allowed
    CreatePermissionRequest:
      required:
        - permission
        - username
      type: object
      properties:
        username:
          type: string
        permission:
          $ref: '#/components/schemas/PermEnum'
    ReqShareUpdate:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/UserNameString'
    ReqTransfer:
      required:
        - elements
      type: object
      properties:
        tag:
          type: string
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ReqTransferElement'
    ReqTransferElement:
      required:
        - destinationURI
        - sourceURI
      type: object
      properties:
        sourceURI:
          type: string
        destinationURI:
          type: string
        optional:
          type: boolean
          default: false
          description: Allow the full transfer to succeed even if this element fails.
        transferType:
          type: string
          enum:
          - TRANSFER
          - SERVICE_MOVE_DIRECTORY_CONTENTS
          - SERVICE_MOVE_FILE_OR_DIRECTORY
          default: null
          description: |
            If this value is set to anything other than TRANSFER, both the source and target MUST,
            be on the same tapis system.  If the value is SERVICE_MOVE_DIRECTORY_CONTENTS, the 
            source URI is expected to be a directory, and the contents of that directory will be
            transfered to the target URI.  The target must be an existing directory or the operation
            will fail.  If the value is SERVICE_MOVE_FILE_OR_DIRECTORY the file or directory will
            be moved to the target URI.  If the target already exists, it will be overwritten.
        srcSharedCtx:
          $ref: '#/components/schemas/UserNameString'
        destSharedCtx:
          $ref: '#/components/schemas/UserNameString'
    NativeLinuxOpRequest:
      required:
        - argument
        - operation
      type: object
      properties:
        operation:
          type: string
          enum:
            - CHMOD
            - CHOWN
            - CHGRP
        argument:
          type: string
          description: Argument for native linux operation
    NativeLinuxSetFaclRequest:
      required:
        - operation
        - aclString
      type: object
      properties:
        operation: 
          type: string
          enum:
            - ADD
            - REMOVE
            - REMOVE_DEFAULT
            - REMOVE_ALL
        recursionMethod:
          type: string
          enum:
            - NONE
            - PHYSICAL
            - LOGICAL
          default: NONE
          description: |
            Recursion may be set to physical (don't follow symlinks) or
            logical (follow symlinks), or none (don't recurse).
        aclString:
          type: string
          description: |
            specifies the actual acl string to set.  Multiple acls may be separated by 
            commas.
            Examples - user:myuser:rwx,group 
                       group:mygroup:rw 
                       user:myuser:rwx,group,group:mygroup:rw 
    CreatePostItRequest:
      type: object
      properties:
        allowedUses:
          type: integer
          format: int32
          description: | 
            Number of times that the new PostIt can be redeemed. The
            default is one use.  Setting the value to -1 (negative one)
            will allow the PostIt to be redeemed an unlimited number of
            times.
          default: 1
        validSeconds:
          type: integer
          format: int32
          description: | 
            Number of seconds until the PostIt expires.  
            Default is 30 days.
          default: 2592000

    UpdatePostItRequest:
      type: object
      properties:
        allowedUses:
          type: integer
          format: int32
          description: Number of times that the new PostIt can be redeemed.
        expiration:
          type: string
          format: date-time
          description: Expiration date of the PostIt.
        unlimited:
          type: boolean
          description: If set to true, this PostIt will have unlimited uses and not expire.

      
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: object
        metadata:
          type: object
    FileStringResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    StringResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    RespString:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
          example: 1
    RespFileList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    FileStatInfoResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/FileStatInfo'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    NativeLinuxOpResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/NativeLinuxOpResultResponse'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    NativeLinuxOpResultResponse:
      type: object
      properties:
        command:
          type: string
        exitCode:
          type: integer
          format: int32
        stdOut:
          type: string
        stdErr:
          type: string
    NativeLinuxSetFaclResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/NativeLinuxSetFaclResult'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    NativeLinuxSetFaclResult:
      type: object
      properties:
        command:
          type: string
        exitCode:
          type: integer
          format: int32
        stdOut:
          type: string
        stdErr:
          type: string
    NativeLinuxGetFaclResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          items:
            $ref: '#/components/schemas/AclEntryInfo'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
        
    FilePermissionResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/FilePermission'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    RespShareInfo:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultShareInfo'
        metadata:
          type: object
    ResultShareInfo:
      type: object
      properties:
        isPublic:
          type: boolean
          description: Indicates given path is shared publicly
        isPublicPath:
          type: string
          description: Path that resulted in specified path being shared publicly
        userSet:
          type: array
          description: Set of users with whom the path is shared.
          items:
            $ref: '#/components/schemas/UserNameString'
        userShareInfoSet:
          type: array
          description: List of additional share information for each user.
          items:
            $ref: '#/components/schemas/UserShareInfo'
    UserShareInfo:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/UserNameString'
        path:
          type: string
          description: Path that resulted in specified path being shared with the user
    TransferTaskResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/TransferTask'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    TransferTaskListResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TransferTask'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    PostItResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/PostIt'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    PostItListResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/PostIt'
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    TransferStatusEnum:
      type: string
      description: The status of the task, such as ACCEPTED, IN_PROGRESS, COMPLETED, CANCELLED
      example: PENDING
      enum:
        - ACCEPTED
        - STAGED
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED
        - FAILED
        - FAILED_OPT
        - PAUSED
    PermEnum:
      type: string
      enum:
        - READ
        - MODIFY
    ListTypeEnum:
      type: string
      default: OWNED
      enum:
        - OWNED
        - ALL
    FileTypeEnum:
      type: string
      enum:
        - file
        - dir
        - symbolic_link
        - other
        - unknown

openapi: 3.0.1
info:
  title: Tapis Jobs API
  description: The Tapis Jobs API executes jobs on Tapis systems.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: '0.1'
externalDocs:
  description: Tapis Home
  url: https://tacc-cloud.readthedocs.io/projects/agave/en/latest/
servers:
  - url: http://localhost:8080/v3
    description: Local test environment
    variables: {}
tags:
  - name: jobs
    description: manage job execution and data
  - name: subscriptions
    description: manage job subscriptions
  - name: general
    description: informational endpoints
paths:
  /jobs/healthcheck:
    get:
      tags:
        - general
      description: Lightweight health check for liveness. No authorization required.
      operationId: checkHealth
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
  /jobs/ready:
    get:
      tags:
        - general
      description: Lightweight readiness check. No authorization required.
      operationId: ready
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
      deprecated: true
  /jobs/readycheck:
    get:
      tags:
        - general
      description: Lightweight readiness check. No authorization required.
      operationId: readycheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
  /jobs/hello:
    get:
      tags:
        - general
      description: Logged connectivity test. No authorization required.
      operationId: sayHello
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
      deprecated: true
  /jobs/{jobUuid}/hide:
    post:
      tags:
        - jobs
      description: |-
        Hide a job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: hideJob
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Hide the job successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespHideJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '409':
          description: Job is already in Terminal State (CANCELLED, FINISHED or FAILED). Job state conflicts with the cancel request. No action taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/unhide:
    post:
      tags:
        - jobs
      description: |-
        Un-hide a job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: unhideJob
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Unhide the job successfuly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespHideJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '409':
          description: Job is already in Terminal State (CANCELLED, FINISHED or FAILED). Job state conflicts with the cancel request. No action taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/cancel:
    post:
      tags:
        - jobs
      description: |-
        Cancel a previously submitted job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: cancelJob
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job Cancellation Initiated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespCancelJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '409':
          description: Job is already in Terminal State (CANCELLED, FINISHED or FAILED). Job state conflicts with the cancel request. No action taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}:
    get:
      tags:
        - jobs
      description: |-
        Retrieve a previously submitted job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: getJob
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/history:
    get:
      tags:
        - jobs
      description: |-
        Retrieve history of a previously submitted job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: getJobHistory
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job's history retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespJobHistory'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/list:
    get:
      tags:
        - jobs
      description: |-
        Retrieve list of jobs for which the user is the job owner, creator or a tenant administrator.

        Also list the jobs that are shared with the user. 
        listType allowed are: MY_JOBS, SHARED_JOBS, ALL_JOBS
      operationId: getJobList
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: startAfter
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: computeTotal
          in: query
          schema:
            type: boolean
        - name: listType
          in: query
          schema:
            type: string
            default: MY_JOBS
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Jobs List retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetJobList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/output/download/{outputPath}:
    get:
      tags:
        - jobs
      description: |-
        Download a job's output files using the job's UUID. By default, the job must be in a terminal state (FINISHED or FAILED or CANCELLED) for this command to execute. To execute when a job is not in a terminal state--and possibly receive incomplete results--set _allowIfRunning=true_.  

        The caller must be the job owner, creator or a tenant administrator. The _outputPath_ is always relative to the job output directory and must end with a '/'. 
      operationId: getJobOutputDownload
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: outputPath
          in: path
          required: true
          schema:
            type: string
            default: ''
        - name: compress
          in: query
          schema:
            type: boolean
            default: false
        - name: format
          in: query
          schema:
            type: string
            default: zip
        - name: allowIfRunning
          in: query
          schema:
            type: boolean
            default: false
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job's output files downloaded.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Input error.
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/output/list/{outputPath}:
    get:
      tags:
        - jobs
      description: |-
        Retrieve a job's output file listing using the job's UUID. By default, the job must be in a terminal state (FINISHED or FAILED or CANCELLED) for this command to execute. To execute when a job is not in a terminal state--and possibly receive incomplete results--set _allowIfRunning=true_.  

        The caller must be the job owner, creator or a tenant administrator. The _outputPath_ is always relative to the job output directory and must end with a '/'. 
      operationId: getJobOutputList
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: outputPath
          in: path
          required: true
          schema:
            type: string
            default: ''
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: allowIfRunning
          in: query
          schema:
            type: boolean
            default: false
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job's output files list retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetJobOutputList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/search:
    get:
      tags:
        - jobs
      description: |-
        Retrieve list of jobs for the user based on search conditions in the query paramter on the dedicated search end-point.

        The caller must be the job owner, creator or a tenant administrator. 

        List of Jobs shared with the user can also be searched
      operationId: getJobSearchList
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: startAfter
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: computeTotal
          in: query
          schema:
            type: boolean
        - name: select
          in: query
          schema:
            type: string
        - name: listType
          in: query
          schema:
            type: string
            default: MY_JOBS
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Jobs Search List retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespJobSearchAllAttributes'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Jobs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - jobs
      description: |-
        Retrieve list of jobs for the user based on search conditions in the request body and pagination information from the query paramter on the dedicated search end-point.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: getJobSearchListByPostSqlStr
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: startAfter
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: computeTotal
          in: query
          schema:
            type: boolean
        - name: select
          in: query
          schema:
            type: string
        - name: listType
          in: query
          schema:
            type: string
            default: MY_JOBS
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Jobs Search List retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespJobSearchAllAttributes'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Jobs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/share/{user}:
    delete:
      tags:
        - share
      description: |-
        Delete all share information of a previously shared job for a specific user

        The caller must be the job owner, creator or a tenant administrator.
      operationId: deleteJobShare
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job's share information deleted for a specific user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespUnShareJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/share:
    get:
      tags:
        - share
      description: |-
        Retrieve share information of a job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: getJobShare
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job's share information retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetJobShareList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - share
      description: Share a job with a user of the tenant. The caller must be the job owner, creator or a tenant administrator.
      operationId: shareJob
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareJob'
        required: true
      responses:
        '200':
          description: Job is shared sucessfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/status:
    get:
      tags:
        - jobs
      description: |-
        Retrieve status of a previously submitted job by its UUID.

        The caller must be the job owner, creator or a tenant administrator.
      operationId: getJobStatus
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job status retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetJobStatus'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/resubmit_request:
    get:
      tags:
        - jobs
      description: 'Get Resubmit request for of a job in JSON format.  '
      operationId: getResubmitRequestJson
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Resumbit request for the job is retrieved sucessfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetResubmit'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/resubmit:
    post:
      tags:
        - jobs
      description: |-
        Resubmit a job for execution using the job's original parameters.  The main phases of job execution are:

          - validate input
          - check resource availability
          - stage input files
          - stage application code
          - launch application
          - monitor application
          - archive application output

        When a job is submitted its request payload is captured and available for resubmission using this API. The resubmitted job is assigned a new UUID and does not reference or have any special access to the original job's information once the orginal job's request is copied. The resubmitted job's execution can differ from the original job's if the application, system or other aspects of the execution environment have changed.
      operationId: resubmitJob
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubmitJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/{jobUuid}/sendEvent:
    post:
      tags:
        - jobs
      description: |-
        Send a user event to an active job. The job must be in the same tenant as the caller, but no other authorization is needed. If the job has terminated the request will be rejected. The caller must specify a payload of non-empty string data in the *eventData* field. The *eventDetail* field can be set to further qualify the type of user event, which is useful when filtering events. If not provided the *eventDetail* defaults to "DEFAULT".

        Subscribers that register interest in events of type JOB_USER_EVENT will receive a notification as a result of this call.
      operationId: sendEvent
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserEvent'
        required: true
      responses:
        '200':
          description: Event created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/submit:
    post:
      tags:
        - jobs
      description: |-
        Submit a job for execution.  The main phases of job execution are:

          - validate input
          - check resource availability
          - stage input files
          - stage application code
          - launch application
          - monitor application
          - archive application output

        At a minimum, the job name, application ID and application version must be specified in the request payload. The optional parameters available in a job request provide great flexibility but must be considered in the context of the application and system definitions. The actual values used during job execution are a combination of the values in this request and those specified in the job's application and system definitions. It's often desirable to keep the submission request simple by specifying common values in these other two definitions. See the [Job Submission Request](https://tapis.readthedocs.io/en/latest/technical/jobs.html#the-job-submission-request) documentation for details.
      operationId: submitJob
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSubmitJob'
        required: true
      responses:
        '200':
          description: Job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubmitJob'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/subscribe/{uuid}:
    delete:
      tags:
        - subscriptions
      description: |-
        Depending on the UUID provide, this API either deletes a single subscription from a job or all subscriptions from a job. To delete single subscription, provide the UUID of that subscription as listed in the subscription retrieval result for the job.  To delete all a job's subscriptions, specify the job UUID.

        Like all Job subscription APIs, modifications only affect running jobs and never change the saved job definition. As a consequence, job resubmissions are not affected by runtime subscription changes.
      operationId: deleteSubscriptions
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /jobs/subscribe/{jobUuid}:
    get:
      tags:
        - subscriptions
      description: Retrieve a job's subscriptions fom the Notifications service. After subscriptions expire or are deleted by user action they may no longer be listed in Notification service. To inspect the initial set of subscriptions assigned to a job, retrieve the job definition.
      operationId: getSubscriptions
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 100
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGetSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - subscriptions
      description: |
        Subcribe to a running job identified by it's UUID. The caller must be the job owner or a tenant administrator.

        Like all Job subscription APIs, modifications only affect running jobs and never change the saved job definition. As a consequence, job resubmissions are not affected by runtime subscription changes.

        The events to which one can subscribe are:

        - JOB_NEW_STATUS - the job has transitioned to a new status
        - JOB_INPUT_TRANSACTION_ID - a request to stage job input files has been submitted
        - JOB_ARCHIVE_TRANSACTION_ID - a request to archive job output files has been submitted
        - JOB_SUBSCRIPTION - a change to the job's subscriptions has occurred
        - JOB_SHARE_EVENT - a job resource has been shared or unshared
        - JOB_ERROR_MESSAGE - the job experienced an error
        - JOB_USER_EVENT - user generated events
        - ALL - all job event categories
      operationId: subscribe
      parameters:
        - name: jobUuid
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSubscribe'
        required: true
      responses:
        '200':
          description: Job subscription created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
components:
  schemas:
    JobsProbe:
      type: object
      properties:
        checkNum:
          type: integer
          format: int64
        databaseAccess:
          type: boolean
        tenantsAccess:
          type: boolean
        queueAccess:
          type: boolean
    RespProbe:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/JobsProbe'
    ResultMetadata:
      type: object
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: object
    JobHideDisplay:
      type: object
      properties:
        message:
          type: string
    RespHideJob:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/JobHideDisplay'
    RespName:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultName'
    ResultName:
      type: object
      properties:
        name:
          type: string
    JobCancelDisplay:
      type: object
      properties:
        message:
          type: string
    RespCancelJob:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/JobCancelDisplay'
    Job:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        owner:
          type: string
        tenant:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - PROCESSING_INPUTS
            - STAGING_INPUTS
            - STAGING_JOB
            - SUBMITTING_JOB
            - QUEUED
            - RUNNING
            - ARCHIVING
            - BLOCKED
            - PAUSED
            - FINISHED
            - CANCELLED
            - FAILED
        condition:
          type: string
          enum:
            - CANCELLED_BY_USER
            - JOB_ARCHIVING_FAILED
            - JOB_DATABASE_ERROR
            - JOB_EXECUTION_MONITORING_ERROR
            - JOB_EXECUTION_MONITORING_TIMEOUT
            - JOB_FILES_SERVICE_ERROR
            - JOB_INTERNAL_ERROR
            - JOB_INVALID_DEFINITION
            - JOB_LAUNCH_FAILURE
            - JOB_QUEUE_MONITORING_ERROR
            - JOB_RECOVERY_FAILURE
            - JOB_RECOVERY_TIMEOUT
            - JOB_REMOTE_ACCESS_ERROR
            - JOB_REMOTE_OUTCOME_ERROR
            - JOB_UNABLE_TO_STAGE_INPUTS
            - JOB_UNABLE_TO_STAGE_JOB
            - JOB_TRANSFER_FAILED_OR_CANCELLED
            - JOB_TRANSFER_MONITORING_TIMEOUT
            - NORMAL_COMPLETION
            - SCHEDULER_CANCELLED
            - SCHEDULER_DEADLINE
            - SCHEDULER_OUT_OF_MEMORY
            - SCHEDULER_STOPPED
            - SCHEDULER_TIMEOUT
            - SCHEDULER_TERMINATED
        lastMessage:
          type: string
        created:
          type: string
        ended:
          type: string
        lastUpdated:
          type: string
        uuid:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        archiveOnAppError:
          type: boolean
        dynamicExecSystem:
          type: boolean
        execSystemId:
          type: string
        execSystemExecDir:
          type: string
        execSystemInputDir:
          type: string
        execSystemOutputDir:
          type: string
        execSystemLogicalQueue:
          type: string
        archiveSystemId:
          type: string
        archiveSystemDir:
          type: string
        dtnSystemId:
          type: string
        dtnSystemInputDir:
          type: string
        dtnSystemOutputDir:
          type: string
        nodeCount:
          type: integer
          format: int32
        coresPerNode:
          type: integer
          format: int32
        memoryMB:
          type: integer
          format: int32
        maxMinutes:
          type: integer
          format: int32
        fileInputs:
          type: string
        parameterSet:
          type: string
        execSystemConstraints:
          type: string
        subscriptions:
          type: string
        blockedCount:
          type: integer
          format: int32
        remoteJobId:
          type: string
        remoteJobId2:
          type: string
        remoteOutcome:
          type: string
          enum:
            - FINISHED
            - FAILED
            - FAILED_SKIP_ARCHIVE
        remoteResultInfo:
          type: string
        remoteQueue:
          type: string
        remoteSubmitted:
          type: string
        remoteStarted:
          type: string
        remoteEnded:
          type: string
        remoteSubmitRetries:
          type: integer
          format: int32
        remoteChecksSuccess:
          type: integer
          format: int32
        remoteChecksFailed:
          type: integer
          format: int32
        remoteLastStatusCheck:
          type: string
        inputTransactionId:
          type: string
        inputCorrelationId:
          type: string
        archiveTransactionId:
          type: string
        archiveCorrelationId:
          type: string
        stageAppTransactionId:
          type: string
        stageAppCorrelationId:
          type: string
        dtnInputTransactionId:
          type: string
        dtnInputCorrelationId:
          type: string
        dtnOutputTransactionId:
          type: string
        dtnOutputCorrelationId:
          type: string
        tapisQueue:
          type: string
        visible:
          type: boolean
        createdby:
          type: string
        createdbyTenant:
          type: string
        tags:
          type: array
          items:
            type: string
        jobType:
          type: string
          enum:
            - FORK
            - BATCH
        mpiCmd:
          type: string
        cmdPrefix:
          type: string
        sharedAppCtx:
          type: string
        sharedAppCtxAttribs:
          type: array
          items:
            type: string
            enum:
              - SAC_EXEC_SYSTEM_ID
              - SAC_EXEC_SYSTEM_EXEC_DIR
              - SAC_EXEC_SYSTEM_INPUT_DIR
              - SAC_EXEC_SYSTEM_OUTPUT_DIR
              - SAC_ARCHIVE_SYSTEM_ID
              - SAC_ARCHIVE_SYSTEM_DIR
              - SAC_DTN_SYSTEM_ID
              - SAC_DTN_SYSTEM_INPUT_DIR
              - SAC_DTN_SYSTEM_OUTPUT_DIR
        trackingId:
          type: string
        notes:
          type: string
        mpi:
          type: boolean
    RespGetJob:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/Job'
    JobHistoryDisplayDTO:
      type: object
      properties:
        event:
          type: string
        created:
          type: string
          format: date-time
        eventDetail:
          type: string
        description:
          type: string
        transferTaskUuid:
          type: string
    RespJobHistory:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/JobHistoryDisplayDTO'
    JobListDTO:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        owner:
          type: string
        appId:
          type: string
        created:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - PROCESSING_INPUTS
            - STAGING_INPUTS
            - STAGING_JOB
            - SUBMITTING_JOB
            - QUEUED
            - RUNNING
            - ARCHIVING
            - BLOCKED
            - PAUSED
            - FINISHED
            - CANCELLED
            - FAILED
        condition:
          type: string
          enum:
            - CANCELLED_BY_USER
            - JOB_ARCHIVING_FAILED
            - JOB_DATABASE_ERROR
            - JOB_EXECUTION_MONITORING_ERROR
            - JOB_EXECUTION_MONITORING_TIMEOUT
            - JOB_FILES_SERVICE_ERROR
            - JOB_INTERNAL_ERROR
            - JOB_INVALID_DEFINITION
            - JOB_LAUNCH_FAILURE
            - JOB_QUEUE_MONITORING_ERROR
            - JOB_RECOVERY_FAILURE
            - JOB_RECOVERY_TIMEOUT
            - JOB_REMOTE_ACCESS_ERROR
            - JOB_REMOTE_OUTCOME_ERROR
            - JOB_UNABLE_TO_STAGE_INPUTS
            - JOB_UNABLE_TO_STAGE_JOB
            - JOB_TRANSFER_FAILED_OR_CANCELLED
            - JOB_TRANSFER_MONITORING_TIMEOUT
            - NORMAL_COMPLETION
            - SCHEDULER_CANCELLED
            - SCHEDULER_DEADLINE
            - SCHEDULER_OUT_OF_MEMORY
            - SCHEDULER_STOPPED
            - SCHEDULER_TIMEOUT
            - SCHEDULER_TERMINATED
        remoteStarted:
          type: string
          format: date-time
        ended:
          type: string
          format: date-time
        tenant:
          type: string
        execSystemId:
          type: string
        archiveSystemId:
          type: string
        appVersion:
          type: string
        lastUpdated:
          type: string
          format: date-time
    RespGetJobList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/JobListDTO'
    FileInfo:
      type: object
      properties:
        mimeType:
          type: string
        type:
          type: string
          enum:
            - file
            - dir
            - symbolic_link
            - other
            - unknown
        owner:
          type: string
        group:
          type: string
        nativePermissions:
          type: string
        url:
          type: string
        lastModified:
          type: string
          format: date-time
        name:
          type: string
        path:
          type: string
        size:
          type: integer
          format: int64
    RespGetJobOutputList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
    RespJobSearchAllAttributes:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    JobUnShareDisplay:
      type: object
      properties:
        message:
          type: string
    RespUnShareJob:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/JobUnShareDisplay'
    JobShareListDTO:
      type: object
      properties:
        tenant:
          type: string
        createdby:
          type: string
        jobUuid:
          type: string
        grantee:
          type: string
        jobResource:
          type: string
        jobPermission:
          type: string
        created:
          type: string
          format: date-time
    RespGetJobShareList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/JobShareListDTO'
    JobShareDisplay:
      type: object
      properties:
        message:
          type: string
    RespShareJob:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/JobShareDisplay'
    ReqShareJob:
      type: object
      properties:
        grantee:
          type: string
        jobResource:
          type: array
          items:
            type: string
            enum:
              - JOB_HISTORY
              - JOB_RESUBMIT_REQUEST
              - JOB_OUTPUT
              - JOB_INPUT
        jobPermission:
          type: string
          enum:
            - READ
    JobStatusDisplay:
      type: object
      properties:
        status:
          type: string
        condition:
          type: string
    RespGetJobStatus:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/JobStatusDisplay'
    IncludeExcludeFilter:
      type: object
      properties:
        includes:
          type: array
          items:
            type: string
        excludes:
          type: array
          items:
            type: string
        includeLaunchFiles:
          type: boolean
    JobArgSpec:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        include:
          type: boolean
        arg:
          type: string
        notes:
          type: object
    JobFileInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        envKey:
          type: string
        autoMountLocal:
          type: boolean
        sourceUrl:
          type: string
        targetPath:
          type: string
        notes:
          type: object
    JobFileInputArray:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        envKey:
          type: string
        sourceUrls:
          type: array
          items:
            type: string
        targetDir:
          type: string
        notes:
          type: object
    JobParameterSet:
      type: object
      properties:
        appArgs:
          type: array
          items:
            $ref: '#/components/schemas/JobArgSpec'
        containerArgs:
          type: array
          items:
            $ref: '#/components/schemas/JobArgSpec'
        schedulerOptions:
          type: array
          items:
            $ref: '#/components/schemas/JobArgSpec'
        envVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        archiveFilter:
          $ref: '#/components/schemas/IncludeExcludeFilter'
        logConfig:
          $ref: '#/components/schemas/LogConfig'
    KeyValuePair:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        description:
          type: string
        include:
          type: boolean
        notes:
          type: object
    LogConfig:
      type: object
      properties:
        stdoutFilename:
          type: string
        stderrFilename:
          type: string
    NotifDeliveryTarget:
      type: object
      properties:
        deliveryMethod:
          type: string
          enum:
            - WEBHOOK
            - EMAIL
            - QUEUE
            - ACTOR
        deliveryAddress:
          type: string
    ReqSubmitJob:
      required:
        - appId
        - appVersion
        - name
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        tenant:
          type: string
        description:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        jobType:
          type: string
        archiveOnAppError:
          type: boolean
        dynamicExecSystem:
          type: boolean
        execSystemId:
          type: string
        execSystemExecDir:
          type: string
        execSystemInputDir:
          type: string
        execSystemOutputDir:
          type: string
        execSystemLogicalQueue:
          type: string
        archiveSystemId:
          type: string
        archiveSystemDir:
          type: string
        dtnSystemInputDir:
          type: string
        dtnSystemOutputDir:
          type: string
        nodeCount:
          type: integer
          format: int32
        coresPerNode:
          type: integer
          format: int32
        memoryMB:
          type: integer
          format: int32
        maxMinutes:
          type: integer
          format: int32
        fileInputs:
          type: array
          items:
            $ref: '#/components/schemas/JobFileInput'
        fileInputArrays:
          type: array
          items:
            $ref: '#/components/schemas/JobFileInputArray'
        parameterSet:
          $ref: '#/components/schemas/JobParameterSet'
        execSystemConstraints:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/ReqSubscribe'
        isMpi:
          type: boolean
        mpiCmd:
          type: string
        cmdPrefix:
          type: string
        notes:
          type: object
    ReqSubscribe:
      type: object
      properties:
        description:
          type: string
        enabled:
          type: boolean
        eventCategoryFilter:
          type: string
          enum:
            - JOB_NEW_STATUS
            - JOB_INPUT_TRANSACTION_ID
            - JOB_ARCHIVE_TRANSACTION_ID
            - JOB_SUBSCRIPTION
            - JOB_SHARE_EVENT
            - JOB_ERROR_MESSAGE
            - JOB_USER_EVENT
            - ALL
        deliveryTargets:
          type: array
          items:
            $ref: '#/components/schemas/NotifDeliveryTarget'
        ttlminutes:
          type: integer
          format: int32
    RespGetResubmit:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ReqSubmitJob'
    RespSubmitJob:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/Job'
    ReqUserEvent:
      required:
        - eventData
      type: object
      properties:
        eventData:
          type: string
        eventDetail:
          type: string
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    DeliveryTarget:
      type: object
      properties:
        deliveryMethod:
          type: string
          enum:
            - WEBHOOK
            - EMAIL
        deliveryAddress:
          type: string
    RespGetSubscriptions:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSubscription'
    TapisSubscription:
      type: object
      properties:
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        enabled:
          type: boolean
        typeFilter:
          type: string
        subjectFilter:
          type: string
        deliveryTargets:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryTarget'
        ttlMinutes:
          type: integer
          format: int32
        uuid:
          type: string
        expiry:
          type: string
        created:
          type: string
        updated:
          type: string
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
openapi: 3.0.1   # updated 08.13.2020-14:57
info:
  title: Tapis Meta V3 API
  description: >-
    The Tapis Meta API provides access to a MongoDB database. A standalone service which connects to a MongoDB
    database and immediately exposes all of MongoDB’s capabilities through a complete REST API, which allows the user to read
    and write JSON messages and binary data via HTTP.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: "0.1"
externalDocs:
  description: Tapis Home
  url: https://tacc-cloud.readthedocs.io/projects/agave
servers:
  - url: http://localhost:8080/v3
    description: Local test environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: root
    description: Server root that hosts databases.
  - name: db
    description: The databases listed in host.
  - name: collection
    description: The collections hosted in a database.
  - name: document
    description: The documents hosted in a collection.
  - name: index
    description: The indexes for a collection
  - name: aggregation
    description: The aggregations available in the database.
  - name: general
    description: informational endpoints

paths:
  /meta/healthcheck:
    get:
      tags:
        - general
      description: Health check for liveness. No authorization required.
      operationId: healthcheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
  /meta/:
    get:
      tags:
        - root
      summary: listDBNames
      description: List the names of all Dbs available. This operation is limited to Service admins.
      operationId: listDBNames
      responses:
        '200':
          description: List of DB names returned as a json array.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Not authorized.
  /meta/{db}:
    get:
      tags:
        - db
      summary: listCollectionNames
      description: List the names of all collections in the database.
      operationId: listCollectionNames
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of collection names returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    put:
      tags:
        - db
      summary: createDB
      description: Create the database named in the path. This operation is limited to Service admins.
      operationId: createDB
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: List of collecton names returned.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:  # todo in ResouceBucket
      tags:
        - db
      summary: deleteDB
      description: Delete a database. This operation is limited to Service admins.
      operationId: deleteDB
      parameters:
        - name: If-Match
          in: header
          required: true
          schema:
            type: string
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted DB.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '409':
          description: Conflict The database's ETag must be provided using the 'If-Match' header.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/_meta:
    get:
      tags:
        - db
      summary: getDBMetadata
      description: Get the Metadata for the database.
      operationId: getDBMetadata
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The metadata kept for this database in a json document.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}:
    put:
      tags:
        - collection
      summary: createCollection
      description: Create a new collection in the database.
      operationId: createCollection
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Collection created. An Etag header value is returned for collection identification.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    get:
      tags:
        - collection
      summary: listDocuments
      description: |-
        List of documents in the collection.

        If no query parameters are submitted a default number of documents <pagesize> is returned in default sort order (sort)
         as the first page <page> of a document result set. The default sort order is based on the "_id" of the document.

        A (filter) query parameter value is represented by a valid MongoDb query document. This will allow retrieving
        documents that meet a desired criteria. When coupled with the (keys) query parameter a projection will limit the
        fields to return for all matching documents.

      operationId: listDocuments
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pagesize
          in: query
          schema:
            type: integer
            default: 10
        - name: filter
          in: query
          schema:
            type: object
            default: {}
        - name: sort
          in: query
          schema:
            type: object
            default: {}
        - name: keys
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: List of documents returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    post:
      tags:
        - document
      summary: createDocument
      description: |-

        Create a new document in collection.

        A document request body with out the field <_id> gets an auto generated id

        A document request body with out the field <_id> writes a document with that id unless a duplicate is encountered.

        A batch of document creations is possible by submitting an array of documents in the request body. All those documents
         will be added to to the collection in bulk.

        The addition of the (basic) query parameter set to true will return a response for a single document creation as a
          Tapis basic response with the newly created <_id> for later reference.

      operationId: createDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: basic
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: "the json document being added to the collection or array of documents added in bulk operation"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Document created.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - collection
      summary: deleteCollection
      description: |-

        Delete a collection in the database.
        This operation is limit by default to tenant administrators.

        An (If-Match) header parameter with the value of the collections etag must be supplied in order for
        this operations to succeed.

      operationId: deleteCollection
      parameters:
        - name: If-Match
          in: header
          required: true
          schema:
            type: string
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Delete named collection from the database.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_filter:
    post:
      tags:
        - collection
      summary: submitLargeQuery
      description: |-

        This is a POST version of filter on a collection with a filter value to large to submit in a query parameter.
        If the filter parameter is to large, it may exceed the HTTP header character limit. The HTTP server will throw
        a query header to large error.

      operationId: submitLargeQuery
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pagesize
          in: query
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          schema:
            type: object
            default: {}
        - name: keys
          in: query
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: "the json document as a MongoDB query document"
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Document list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_size:
    get:
      tags:
        - collection
      summary: getCollectionSize
      description: |-
        Get the size of the collection.

        The response will contain the number of documents found in the collection.

      operationId: getCollectionSize
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Number of documents in collection.
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_meta:
    get:
      tags:
        - collection
      summary: getCollectionMetadata
      description: Get the Metadata for the collection.
      operationId: getCollectionMetadata
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection metadata returned.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/{docId}:
    get:
      tags:
        - document
      summary: getDocument
      description: Get a document form the collection by its _id.
      operationId: getDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document returned.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    put:
      tags:
        - document
      summary: replaceDocument
      description: |-
        Replace a document in the collection with the _id.

        Replaces the document with the json document submitted in the request body.

      operationId: replaceDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "the json document being replaced in the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Document upserted.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    patch:
      tags:
        - document
      summary: modifyDocument
      description:

        Modify a document in the collection with _id. The fields submitted in the json of the request body
          will replace the same named fields in the current document.

      operationId: modifyDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
        - name: np
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        description: "the json document being added to the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Document modified.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - document
      summary: deleteDocument
      description: Delete a document in the collection by id.
      operationId: deleteDocument
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Document returned.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_indexes:
    get:
      tags:
        - index
      summary: listIndexes
      description: List all indexes in the collection.
      operationId: listIndexes
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of indexes returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_indexes/{indexName}:
    put:
      tags:
        - index
      summary: createIndex
      description: |-
        Create an index on collection in the database.

        The request body should hold a json document that defines the index

            { "keys":  <keys>, "ops": <options> }

          Example - create an unique, sparse index on property ‘q

            {"keys": {"qty": 1},"ops": {"unique": true, "sparse": true }}

      operationId: createIndex
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: indexName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "the index being added to the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: Empty response.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - index
      summary: deleteIndex
      description: Delete an index on the collection.
      operationId: deleteIndex
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: indexName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted index from the collection.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
  /meta/{db}/{collection}/_aggr/{aggregation}:
    put:
      tags:
        - aggregation
      summary: addAggregation
      description: Create an aggregation that can be executed by users.
      operationId: addAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: "the aggregation being defined for the collection"
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: empty response body on created.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    get:
      tags:
        - aggregation
      summary: useAggregation
      description: Use an aggregation defined for a collection.
      operationId: useAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: an array of results.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    post:
      tags:
        - aggregation
      summary: submitLargeAggregation
      description: |-

        This is a POST version of useAggregation on a collection with a avars value to large to submit in a query parameter.
        If the avars parameter is to large, it may exceed the HTTP header character limit. The HTTP server will throw
        a query header to large error.

      operationId: submitLargeAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pagesize
          in: query
          schema:
            type: integer
            default: 10
        - name: keys   # todo verify this field
          in: query
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: "the json document for avars query parameter substitution"
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Document list.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
    delete:
      tags:
        - aggregation
      summary: deleteAggregation
      description: Delete an aggregation defined for a collection.
      operationId: deleteAggregation
      parameters:
        - name: db
          in: path
          required: true
          schema:
            type: string
        - name: collection
          in: path
          required: true
          schema:
            type: string
        - name: aggregation
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: empty response body on delete.
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
      deprecated: false
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
openapi: 3.0.3
info:
  title: Tapis Notifications API
  description: The Tapis Notifications API provides for management of subscriptions and event publication
  version: '1.8.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Notifications API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
tags:
  - name: General
    description: General service health and readiness
  - name: Subscriptions
    description: Manage notification subscriptions. Create, retrieve, update, etc.
  - name: Events
    description: Event publication
  - name: Test
    description: Support for managing a sequence of test notifications.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /notifications -----------------------------------------------------
  '/v3/notifications/healthcheck':
    get:
      tags:
        - General
      description: Health check. Lightweight non-authenticated check that service is alive.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/notifications/readycheck':
    get:
      tags:
        - General
      description: Ready check. Non-authenticated check that service is ready to do work.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service not ready.

  # --- Paths for /notifications/subscriptions ------------------------------------------------
  '/v3/notifications/subscriptions':
    get:
      tags:
        - Subscriptions
      description: | 
        Retrieve list of subscriptions owned by the requesting user. Use search and select query parameters to limit results.
        
        Query parameter *ownedBy* may be used to retrieve subscriptions owned by a user other than the requesting user.
        Ignored if *anyOwner* is set to true. Only services or tenant administrators may set *ownedBy*.
        
        Query parameter *anyOwner* may be used to retrieve all subscriptions owned by any user.
        Query parameter *anyOwner* takes precedence over parameter *ownedBy*. Only services may set *anyOwner*. 
      operationId: getSubscriptions
      security:
        - TapisJWT: []
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query parameter. For example search=(name.like.MySubscr*)~(enabled.eq.false)
          schema:
            type: string
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=name(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=name(asc)&startAfter=my.sub1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=owner,name,typeFilter.
          schema:
            type: string
            default: 'summaryAttributes'
        - name: ownedBy
          in: query
          description: Retrieve subscriptions owned by a user other than the requesting user. Ignored if *anyOwner* is true. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: anyOwner
          in: query
          description: Include subscriptions owned by any user. If set to true then *ownedBy* is ignored. Default is false. Requester must be a service.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Subscriptions
      description: |
        Create a subscription using a request body. Only services may perform this operation.

        For each owner the *name* must be unique and can be composed of alphanumeric characters and the following
        special characters [-._~]. If attribute *name* is not provided then the service will generate one.
        The attributes *typeFilter*, *subjectFilter* and *deliveryTargets* are required.
        
        Subscription attributes:
          - name: Optional short descriptive name. *owner+name* must be unique. If one is not provided the service will create one.
          - description: Optional more verbose description. Maximum length of 2048 characters.
          - owner: A specific user set at create time. Default is *${apiUserId}*.
          - enabled: Indicates if subscription is active. By default enabled is true.
          - typeFilter: Filter to use when matching events. Filter for event type. Has three dot separated parts: *service*, *category* and *detail*. Each field may be a specific type or the wildcard character. Examples are *jobs.job.complete*, *jobs.new_status.\**.
          - subjectFilter: Filter to use when matching events. Filter for subject. This may be a specific subject such as a job Id or the wildcard character *.
          - deliveryTargets: List of delivery targets to be used when delivering a matching event. Must have at least one. Each target includes delivery method (EMAIL or WEBHOOK) and delivery address.
          - ttlMinutes: Time to live in minutes specified when subscription is created or TTL is updated. Service will compute expiry based on TTL. Default is one week from creation. Value of 0 indicates no expiration.
      operationId: postSubscription
      security:
        - TapisJWT: []
      requestBody:
        required: true
        description: A JSON object specifying information for the subscription to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSubscription'
      responses:
        '201':
          description: Subscription created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Subscription already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/search':
    get:
      tags:
        - Subscriptions
      description: |
        Retrieve details for subscriptions owned by the requesting user.
        Use query parameters to specify search conditions. For example name.eq=MySubscription.
        Query parameter *ownedBy* may be used to retrieve subscriptions owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: searchSubscriptionsQueryParameters
      security:
        - TapisJWT: []
      parameters:
        - name: freeFormParameterName
          in: query
          description: Free form query parameters.
          explode: true
          allowEmptyValue: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=name(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=name(asc)&startAfter=my.sub2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=owner,name,typeFilter
          schema:
            type: string
            default: 'summaryAttributes'
        - name: ownedBy
          in: query
          description: Retrieve subscriptions owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Subscriptions
      description: |
        Retrieve details for subscriptions owned by the requesting user.
        Use request body to specify SQL-like search conditions.
        Query parameter *ownedBy* may be used to retrieve subscriptions owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: searchSubscriptionsRequestBody
      security:
        - TapisJWT: []
      parameters:
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=name(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=name(asc)&startAfter=my.sub1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=owner,name,typeFilter
          schema:
            type: string
            default: 'summaryAttributes'
        - name: ownedBy
          in: query
          description: Retrieve subscriptions owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSubscriptions'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscriptions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/byName/{name}':
    get:
      tags:
        - Subscriptions
      description: |
        Retrieve a subscription owned by the requesting user and whose name matches the provided value.
        Query parameter *ownedBy* may be used to retrieve a subscription owned by another user.
        Only services or tenant administrators may set the *ownedBy* query parameter.

        Summary of subscription attributes. For details please see *postSubscription*:
          - owner: Tapis user who owns the subscription.
          - name: Short descriptive name.
          - description: Optional more verbose description.
          - enabled: Indicates if subscription is currently active. 
          - typeFilter: Filter to use when matching events. Format is *service.category.detail*. Each field may be a specific type or the wildcard character *.
          - subjectFilter: Filter to use when matching events. Filter for subject. May be wildcard character *.
          - deliveryTargets: List of delivery targets to be used when delivering a matching event.
          - ttlMinutes: Time to live in minutes. 0 indicates no expiration.
          - uuid: A UUID generated by the service.
          - expiry: Time at which the subscription expires and will be deleted. Maintained by the service.
          - created: When created. Maintained by the service.
          - updated: When last updated. Maintained by the service.
      operationId: getSubscriptionByName
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=owner,name,typeFilter
          schema:
            type: string
            default: 'allAttributes'
        - name: ownedBy
          in: query
          description: Retrieve subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscription'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Subscriptions
      description: |
        Update selected attributes of a subscription. Only services may perform this operation.
        
        Request body may only contain updatable attributes. Subscription must exist.
        Query parameter *ownedBy* may be used to patch a subscription owned by another user.
        Only services or tenant administrators may set *ownedBy*.

        Attributes that may not be updated via PATCH are

          - name
          - owner
          - enabled
          - ttlMinutes

        Note that the attributes *enabled* and *ttlMinutes* may be modified using other endpoints.
      operationId: patchSubscriptionByName
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ownedBy
          in: query
          description: Patch a subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchSubscription'
      responses:
        '200':
          description: Subscription updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Subscriptions
      description: |
        Delete a subscription. Only services may perform this operation.
        
        Events will stop being delivered. Subscription must be re-created to resume event delivery.
        Query parameter *ownedBy* may be used to delete a subscription owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: deleteSubscriptionByName
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ownedBy
          in: query
          description: Delete a subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/byUuid/{uuid}':
    get:
      tags:
        - Subscriptions
      description: |
        Retrieve a subscription whose UUID matches the provided value.

        Summary of subscription attributes. For details please see *postSubscription*:
          - owner: Tapis user who owns the subscription.
          - name: Short descriptive name.
          - description: Optional more verbose description.
          - enabled: Indicates if subscription is currently active. 
          - typeFilter: Filter to use when matching events. Format is *service.category.detail*. Each field may be a specific type or the wildcard character *.
          - subjectFilter: Filter to use when matching events. Filter for subject. May be wildcard character *.
          - deliveryTargets: List of delivery targets to be used when delivering a matching event.
          - ttlMinutes: Time to live in minutes. 0 indicates no expiration.
          - uuid: A UUID generated by the service.
          - expiry: Time at which the subscription expires and will be deleted. Maintained by the service.
          - created: When created. Maintained by the service.
          - updated: When last updated. Maintained by the service.
      operationId: getSubscriptionByUuid
      security:
        - TapisJWT: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=owner,name,typeFilter
          schema:
            type: string
            default: 'allAttributes'
      responses:
        '200':
          description: Subscription found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscription'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Subscriptions
      description: |
        Delete a subscription whose UUID matches the provided value. Only services may perform this operation.
      operationId: deleteSubscriptionByUuid
      security:
        - TapisJWT: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subscription deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/bySubject/{subject}':
    delete:
      tags:
        - Subscriptions
      description: |
        Delete all subscriptions whose *subjectFilter* exactly matches the specific *subject* provided.
        Only services may perform this operation.

        Query parameter *ownedBy* may be used to delete subscriptions owned by a user other than the requesting user.
        Ignored if *anyOwner* is set to true. Only services or tenant administrators may set *ownedBy*.
        
        Query parameter *anyOwner* may be used to delete subscriptions owned by any user.
        Query parameter *anyOwner* takes precedence over parameter *ownedBy*.
        Only services may set *anyOwner*.
      operationId: deleteSubscriptionsBySubject
      security:
        - TapisJWT: []
      parameters:
        - name: subject
          in: path
          required: true
          schema:
            type: string
        - name: ownedBy
          in: query
          description: Delete subscriptions owned by a user other than the requesting user. Ignored if *anyOwner* is true. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: anyOwner
          in: query
          description: Delete subscriptions owned by any user. If set to true then *ownedBy* is ignored. Default is false. Requester must be a service.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Subscriptions deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/isEnabled':
    get:
      tags:
        - Subscriptions
      description: |
        Check if a subscription owned by the requesting user is currently active.
        Query parameter *ownedBy* may be used to check a subscription owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: isEnabled
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ownedBy
          in: query
          description: Check a subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/enable':
    post:
      tags:
        - Subscriptions
      description: |
        Update a subscription to be active. Only services may perform this operation.
        
        Matching events will start being delivered.
        Query parameter *ownedBy* may be used to enable a subscription owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: enableSubscription
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ownedBy
          in: query
          description: Update a subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/disable':
    post:
      tags:
        - Subscriptions
      description: |
        Update a subscription to be inactive. Only services may perform this operation.
        
        Matching events will stop being delivered.
        Query parameter *ownedBy* may be used to disable a subscription owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: disableSubscription
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ownedBy
          in: query
          description: Update a subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/subscriptions/{name}/updateTTL/{ttlMinutes}':
    post:
      tags:
        - Subscriptions
      description: |
        Update Time-To-Live (TTL) for a subscription. Only services may perform this operation.
        
        TTL provided as number of minutes. Use 0 to indicate subscription should never expire.
        Query parameter *ownedBy* may be used to update a subscription owned by another user.
        Only services or tenant administrators may set *ownedBy*.
      operationId: updateTTL
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
        - name: ttlMinutes
          in: path
          required: true
          schema:
            type: integer
        - name: ownedBy
          in: query
          description: Update a subscription owned by a user other than the requesting user. Requester must be a service or tenant administrator.
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Subscription TTL updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for notifications/events ------------------------------------------------
  '/v3/notifications/events/publish':
    post:
      tags:
        - Events
      description: |
        Publish an event to be distributed to all subscribers. Only services may publish events.
        
        The attributes *source*, *type* and *timestamp* are required. Note that certain attributes, marked in
        *italics* in the list below, are allowed but ignored. These attributes are maintained by Tapis. They are
        present when the event is part of a delivered notification.
        
        A published event may include a value for the attribute *seriesId*. Each series is intended to sequentially
        track events of various types coming from a given tenant, source and subject. So for each tenant, source and
        subject the seriesId is considered unique. For example, the Jobs service (the source) sends out events with
        the jobUuid as the subject and sets the seriesId to the jobUuid. That way, a subscription can be created to
        follow (in order) all events of various types related to the job. Examples of event types defined in the Jobs
        service are JOB_NEW_STATUS, JOB_ERROR_MESSAGE, JOB_USER_EVENT.
        
        Tracking data for a series is created automatically when the first event in a series is received. Note that
        the subject is required. If an event is received without a subject then it will not be part of a series even
        if the attribute *seriesId* is set. An event publisher may indicate that this is the last event in a series
        by publishing an event with the attribute *endSeries* to true or by calling the endpoint
        *notifications/events/endSeries*. When a series is ended, tracking data for that series is deleted.
        This effectively resets the seriesSeqCount. A subsequent event published with the same seriesId will create a
        new series with a seriesSeqCount starting at 1.

        Event attributes:
          - source: Context in which event happened: Examples: *Jobs*, *Systems*.
          - type: Type of event. Used for routing notifications. A series of 3 fields separated by the dot character. Pattern is *service.category.detail*. Examples: *jobs.new_status.complete*, *systems.system.create*, *files.object.delete*
          - subject: Subject of event in the context of the service. Examples: job Id, system Id, file path, role name, etc.
          - timestamp: When the event happened.
          - data: Optional additional information associated with the event. Data specific to the service associated with the event.
          - deleteSubscriptionsMatchingSubject: Boolean indicating that all subscriptions whose *subjectFilter* exactly matches the *subject* of the event should be deleted once all notifications are delivered. This will also end the series if seriesId is set.
          - seriesId: Optional Id that may be used to group events from the same tenant, source and subject. In a series, event order is preserved when sending out notifications.
          - endSeries: Boolean indicating that this is the last event in a series. Series tracking data will be deleted.
          - *tenant*: Tapis tenant associated with the event.
          - *uuid*: Tapis generated unique identifier.
          - *user*: Tapis user associated with the event.
          - *received*: Tapis generated timestamp for when the event was received by Tapis.
          - *seriesSeqCount*: Tapis generated counter for seriesId. Can be used by notification receivers to track expected order. Notifications for events will be sent in order but may not be received in order.
        
        Note that events are not persisted by the front end api service. When received they are simply sent to a
        message broker. The back end dispatch service will persist events temporarily in order to support recovery.
        
        An event is delivered to the delivery target in a Notification object. Notification attributes:
          - uuid: Unique identifier for the notification.
          - subscriptionName: Name of subscription associated with the event.
          - event: All information contained in the event.
          - eventUuid: Unique identifier for the event.
          - tenant: tenant associated with the event.
          - deliveryTarget: the delivery target
          - created: When the notification was created.
        
        For details on the schema for a Notification object, please see the request body specification included under
        the endpoint for *recordTestNotification*, at path */v3/notifications/test/callback/{name}*

        Note that certain attributes in the request body (such as tenant) are allowed but ignored. These attributes
        are maintained by Tapis. They are present when the event is part of a delivered notification.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - user
          - received
          - seriesSeqCount
      operationId: publishEvent
      security:
        - TapisJWT: []
      parameters:
        - name: tenant
          in: query
          description: Highly restricted. Tenant associated with the event. Only services may set the tenant. By default, oboTenant from the JWT is used.
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying the event details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/events':
    post:
      tags:
        - Events
      description: |
        (**DEPRECATED** Please use endpoint *notifications/events/publishEvent*)
        
        Post an event to be distributed to all subscribers. Only services may post events.
        
        The attributes *source*, *type* and *timestamp* are required. Note that certain attributes, marked as
        *attribute* in the list below, are allowed but ignored. These attributes are maintained by Tapis. They are
        present when the event is part of a delivered notification.

        Event attributes:
          - source: Context in which event happened: Examples: *Jobs*, *Systems*.
          - type: Type of event. Used for routing notifications. A series of 3 fields separated by the dot character. Pattern is *service.category.detail*. Examples: *jobs.new_status.complete*, *systems.system.create*, *files.object.delete*
          - subject: Subject of event in the context of the service. Examples: job Id, system Id, file path, role name, etc.
          - timestamp: When the event happened.
          - data: Optional additional information associated with the event. Data specific to the service associated with the event.
          - deleteSubscriptionsMatchingSubject: Boolean indicating that all subscriptions whose *subjectFilter* matches the *subject* of the event should be deleted once all notifications are delivered.
          - seriesId: Optional Id that may be used to group events from the same tenant, source and subject. In a series, event order is preserved when sending out notifications.
          - *tenant*: Tapis tenant associated with the event.
          - *uuid*: Tapis generated unique identifier.
          - *user*: Tapis user associated with the event.
        
        Note that events are not persisted by the front end api service. When received they are simply sent to a
        message broker. The back end dispatch service will persist events temporarily in order to support recovery.
        
        An event is delivered to the delivery target in a Notification object. Notification attributes:
          - uuid: Unique identifier for the notification.
          - subscriptionName: Name of subscription associated with the event.
          - event: All information contained in the event.
          - eventUuid: Unique identifier for the event.
          - tenant: tenant associated with the event.
          - deliveryTarget: the delivery target
          - created: When the notification was created.
        
        For details on the schema for a Notification object, please see the request body specification included under
        the endpoint for *recordTestNotification*, at path */v3/notifications/test/callback/{name}*

        Note that certain attributes in the request body (such as tenant) are allowed but ignored. These attributes
        are maintained by Tapis. They are present when the event is part of a delivered notification.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - user
      operationId: postEvent
      security:
        - TapisJWT: []
      deprecated: true
      parameters:
        - name: tenant
          in: query
          description: Highly restricted. Tenant associated with the event. Only services may set the tenant. By default, oboTenant from the JWT is used.
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying the event details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event posted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/events/endSeries':
    post:
      tags:
        - Events
      description: |
        End an event series. Series tracking data will be deleted. A subsequent new event published with the same
        tenant, source, subject and seriesId will create a new series with the *seriesSeqCount* starting at 1.
        Associated event source, subject and seriesId must be provided in the request body.
        
        To specify a tenant other than the oboTenant, please use the query parameter *tenant*.
      operationId: endEventSeries
      security:
        - TapisJWT: []
      parameters:
        - name: tenant
          in: query
          description: Highly restricted. Tenant associated with the event. Only services may set the tenant. By default, oboTenant from the JWT is used.
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying the event series to be ended.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSeries'
      responses:
        '200':
          description: Event series ended.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for notifications/test ------------------------------------------------
  '/v3/notifications/test/begin':
    post:
      tags:
        - Test
      description: |
        Start a test sequence by creating a subscription and publishing one or more events matching the subscription.
        If more than one event requested then events will be published at the rate of 1 every 3 seconds.
        Only services may perform this operation.
        
        The subscription will have the following properties:
          - owner: *api_user*
          - name: *subscription_uuid*
          - typeFilter: notifications.test.*
          - subjectFilter: *subscription_uuid*
          - deliveryTarget:
            - deliveryMethod: WEBHOOK
            - deliveryAddress: *tenant_base_url*/v3/notifications/test/callback/*subscription_uuid*
          - ttlMinutes: 60

        The default TTL of 1 hour may be overridden using the query parameter *subscriptionTTL*.

        The initial event will have the following properties:
          - source: *tenant_base_url*/v3/notifications/test
          - type: notifications.test.begin
          - subject: *subscription_uuid*
          - seriesId: *subscription_uuid*

        The requested number of events will be published to the main queue and the subscription will be returned to the caller.
        The sequence of test events may be continued by publishing events that match the test subscription. 
        Results will be recorded when notifications associated with the test are received via the callback.
        The first notification should be recorded shortly after the initial event is published.
        If query parameter *endSeries* is set to true (the default), when the final event of the test sequence is
        sent it will have the event attribute *endSeries* set to true. This will result in removal of series tracking data.
      operationId: beginTestSequence
      security:
        - TapisJWT: []
      parameters:
        - name: subscriptionTTL
          in: query
          description: Subscription TTL in minutes. Default is 60 minutes. A TTL of 0 or less indicates no expiration.
          schema:
            type: integer
            default: 60
        - name: numberOfEvents
          in: query
          description: Number of events to publish when starting the series. Default is 1.
          schema:
            type: integer
            default: 1
        - name: endSeries
          in: query
          description: Flag indicating if tracking data for series should be removed when final event in the test sequence is sent. Default is true.
          schema:
            type: boolean
            default: true
      requestBody:
        required: false
        description: A json request body. Not used but required to correctly generate the client.
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Test subscription created and test event published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSubscription'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/test/{name}':
    get:
      tags:
        - Test
      description: |
        Retrieve status and result history for a test sequence created using the endpoint *test/begin*.
      operationId: getTestSequence
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Results found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTestSequence'
        '400':
          description: Subscription is not associated with a test sequence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Subscription not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Test
      description: |
        Delete all test sequence artifacts including the subscription, results and event series tracking data.
        Only services may perform this operation.
      operationId: deleteTestSequence
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      responses:
        '200':
          description: Test sequence deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Subscription is not associated with a test sequence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Test sequence not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/notifications/test/callback/{name}':
    post:
      tags:
        - Test
      description: |
        Callback endpoint for receiving a notification associated with a test sequence.
        Results will be recorded when notifications associated with the test are received via the callback.
      operationId: recordTestNotification
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/NameString'
      requestBody:
        required: true
        description: A JSON object with event details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: Test event received and recorded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Subscription is not associated with a test sequence.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Test sequence not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------

    # --- TapisSubscription --------------------------------------------------------
    TapisSubscription:
      type: object
      properties:
        tenant:
          type: string
        name:
          $ref: '#/components/schemas/NameString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        typeFilter:
          $ref: '#/components/schemas/TypeFilterString'
        subjectFilter:
          $ref: '#/components/schemas/SubjectFilterString'
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
        ttlMinutes:
          type: integer
        uuid:
          type: string
        expiry:
          type: string
        created:
          type: string
        updated:
          type: string
   # --- DeliveryTargets --------------------------------------------------------
    DeliveryTargets:
      type: array
      items:
        $ref: '#/components/schemas/DeliveryTarget'
    # --- DeliveryTarget ------------------------------------------------------------
    DeliveryTarget:
      type: object
      required:
        - deliveryMethod
        - deliveryAddress
      properties:
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        deliveryAddress:
          type: string
    # --- Event ------------------------------------------------------------
    Event:
      type: object
      required:
        - source
        - type
        - timestamp
      properties:
        source:
          type: string
        type:
          type: string
        subject:
          type: string
        data:
          type: string
        seriesId:
          type: string
        endSeries:
          type: boolean
          default: false
        timestamp:
          type: string
        deleteSubscriptionsMatchingSubject:
          type: boolean
          default: false
        tenant:
          type: string
        user:
          type: string
        uuid:
          type: string
        received:
          type: string
        seriesSeqCount:
          type: integer
    # --- EventSeries -----------------------------------------------------
    EventSeries:
      type: object
      required:
        - source
        - subject
        - seriesId
      properties:
        source:
          type: string
          minLength: 1
        subject:
          type: string
          minLength: 1
        seriesId:
          type: string
          minLength: 1
    # --- Notification ------------------------------------------------------------
    Notification:
      type: object
      properties:
        uuid:
          type: string
        tenant:
          type: string
        subscriptionName:
          type: string
        deliveryTarget:
          $ref: '#/components/schemas/DeliveryTarget'
        eventUuid:
          type: string
        event:
          $ref: '#/components/schemas/Event'
        created:
          type: string
    # --- String types with constraints ------------------------------------
    NameString:
      type: string
      minLength: 1
      maxLength: 188
    DescriptionString:
      type: string
      maxLength: 2048
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    TypeFilterString:
      type: string
      minLength: 5
      maxLength: 128
    SubjectFilterString:
      type: string
      minLength: 1
      maxLength: 150
    # --- TestSequence --------------------------------------------------------
    TestSequence:
      type: object
      properties:
        tenant:
          type: string
        subscription:
          $ref: '#/components/schemas/TapisSubscription'
        receivedEvents:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostSubscription:
      type: object
      required:
        - typeFilter
        - subjectFilter
        - deliveryTargets
      properties:
        name:
          $ref: '#/components/schemas/NameString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        enabled:
          type: boolean
          default: true
        typeFilter:
          $ref: '#/components/schemas/TypeFilterString'
        subjectFilter:
          $ref: '#/components/schemas/SubjectFilterString'
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
        ttlMinutes:
          type: integer
    ReqPatchSubscription:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        typeFilter:
          $ref: '#/components/schemas/TypeFilterString'
        subjectFilter:
          $ref: '#/components/schemas/SubjectFilterString'
        deliveryTargets:
          $ref: '#/components/schemas/DeliveryTargets'
    ReqSearchSubscriptions:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespSubscription:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/TapisSubscription'
        metadata:
          type: object
    RespSubscriptions:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSubscription'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespTestSequence:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/TestSequence'
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    DeliveryMethod:
      type: string
      enum:
        - WEBHOOK
        - EMAIL
openapi: 3.0.1
info:
  title: Tapis PgREST API
  description: The Tapis PgREST API provides a RESTful interface to a managed SQL-db-as-a-service.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
  version: '1.0.0'
externalDocs:
  description: Tapis on readthedocs.io
  url: 'https://tapis.readthedocs.io/en/latest/technical/pgrest.html'
servers:
- url: http://localhost:5000
  description: Local Development
- url: https://dev.develop.tapis.io
  description: Develop Instance
#security:
#  - TapisJWT: []
tags:
  - name: Tables
    description: Data API that allows users to get tables and add/update/delete rows in those tables. Users require role of PGREST_READ and above. This tag manages `/v3/pgrest/data` endpoints.
  - name: Views
    description: View API that allows users to get views that they satisfy the permission_rules for. Users require role of PGREST_USER and above. This tag manages `/v3/pgrest/views` endpoints.
  - name: Manage Tables
    description: Manage API that allows admins to create tables and configure their columns. Also allows for table deletion. Users require role of PGREST_ADMIN. This tag manages `/v3/pgrest/manage/tables` endpoints.
  - name: Manage Views
    description: Manage API that allows admins create PG views with specified permission rules and content. Also allows for view deletion. Users require role of PGREST_ADMIN. This tag manages `/v3/pgrest/manage/views` endpoints.
  - name: Manage Roles
    description: Manage API that allows admins to create SK roles and grant or revoke said roles to users. This allows admins to specify which users get to see which views. Users require role of PGREST_ROLE_ADMIN and above. This tag manages `/v3/pgrest/manage/roles` endpoints.
paths:
  #=== TABLES ===#
  /v3/pgrest/manage/tables:
    get:
      tags:
        - Manage Tables
      summary: list_tables
      description: List tables in the tenant's schema.
      operationId: list_tables
      x-swagger-router-controller: connexContr
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfTables'
    post:
      tags:
        - Manage Tables
      summary: create_table
      description: Create a table.
      operationId: create_table
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTable'
            examples:
              widgets:
                summary: An example of defining a simple table that holds "widgets".
                value: {"table_name": "widgets", "root_url": "widgets", "columns": {"name": {"data_type": "varchar", "char_len": 255, "unique": true, "null": false }, "widget_type": {"data_type": "varchar", "char_len": 100, "default": "sprocket", "null": true, }, "count": {"data_type": "integer", "null": true}, "is_private": {"data_type": "boolean", "null": "true", "default": "true"}}}
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Table'

  /v3/pgrest/manage/tables/{table_id}:
    get:
      tags:
        - Manage Tables
      summary: get_table
      description: Get details about a specific table.
      operationId: get_table
      x-swagger-router-controller: connexContr
      parameters:
      - name: table_id
        in: path
        description: The id of the table.
        required: true
        schema:
          type: string
      - name: details
        in: query
        description: Get additional details about the table
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Table'
    put:
      tags:
        - Manage Tables
      summary: update_table
      description: Update a table definition with specific table operations.
      operationId: update_table
      x-swagger-router-controller: connexContr
      parameters:
      - name: table_id
        in: path
        description: The id of the table.
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTable'
            examples:
              table_name:
                summary: An example of updating a table's name.
                value: {"table_name": "new_table_name"}
              root_url:
                summary: An example of updating a table's root_url.
                value: {"root_url": "new_root_url"}
              add_column:
                summary: An example of adding a column to a table.
                value: {"add_column": {"new_col_name": {"data_type": "varchar", "char_len": 255}}}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Table'

    delete:
      tags:
        - Manage Tables
      summary: delete_table
      description: Delete a specific table and all associted data. WARNING -- this action cannot be undone.
      operationId: delete_table
      x-swagger-router-controller: connexContr
      parameters:
      - name: table_id
        in: path
        description: The id of the table to delete.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'


  /v3/pgrest/data/{root_url}:
    get:
      tags:
        - Tables
      summary: get_table_rows
      description: List objects in the table with specified root_url {root_url}.
      operationId: get_table_rows
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TableRows'
    post:
      tags:
        - Tables
      summary: add_table_row
      description: Create a new object in the table with specified root_url {root_url}.
      operationId: add_table_row
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTableRow'
            examples:
              table_name:
                summary: An example of adding a row to a table.
                value: {"col1": "val1", "col2": "val2", "col3": "val3"}
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TableRow'
    put:
      tags:
        - Tables
      summary: update_table_rows
      description: Update multiple rows in a table atomically based on filter, if no filter, update all.
      operationId: update_table_rows
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMultipleTableRows'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'


  /v3/pgrest/data//{root_url}:
    post:
      tags:
        - Tables
      summary: add_table_rows
      description: Create new objects in the table with specified root_url {root_url}.
      operationId: add_table_rows
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTableRows'
            examples:
              table_name:
                summary: An example of adding rows to a table.
                value: [{"col1": "val1", "col2": "val2", "col3": "val3"}, {"col1": "val111", "col2": "val222", "col3": "val333"}]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TableRows'


  /v3/pgrest/data/{root_url}/{item}:
    get:
      tags:
        - Tables
      summary: get_table_row
      description: Get details about the specific object with id {item} on the table with root_url {root_url}.
      operationId: get_table_row
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      - name: item
        in: path
        description: The id of an item (i.e., a row) on the table whose root_url is given by {root_url}.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TableRow'
    put:
      tags:
        - Tables
      summary: update_table_row
      description: Update a specific object with id {item} from the table with root_url {root_url}.
      operationId: update_table_row
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      - name: item
        in: path
        description: The id of an item (i.e., a row) on the table whose root_url is given by {root_url}.
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableRow'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TableRow'
    delete:
      tags:
        - Tables
      summary: delete_table_row
      description: Delete a specific object with id {item} from the table with root_url {root_url}.
      operationId: delete_table_row
      parameters:
      - name: root_url
        in: path
        description: The root_url parameter of the table.
        required: true
        schema:
          type: string
      - name: item
        in: path
        description: The id of an item (i.e., a row) on the table whose root_url is given by {root_url}.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'


  #=== VIEWS ===#
  /v3/pgrest/manage/views:
    get:
      tags:
        - Manage Views
      summary: list_views
      description: List views in the tenant's schema.
      operationId: list_views
      x-swagger-router-controller: connexContr
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfViews'
    post:
      tags:
        - Manage Views
      summary: create_view
      description: Create a view.
      operationId: create_view
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewView'
            examples:
              widgets:
                summary: An example of defining a simple view that shows initial_table table.
                value: {"view_name": "HELLO_View", "select_query": "*", "from_table": "initial_table", "permission_rules": ["hello_team_admin", "hello_team_member", "citizen_of_hello_world"]}
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/View'

  /v3/pgrest/manage/views/{view_name}:
    get:
      tags:
        - Manage Views
      summary: get_manage_view
      description: Get details of a specific view.
      operationId: get_manage_view
      x-swagger-router-controller: connexContr
      parameters:
      - name: view_name
        in: path
        description: The id of the view.
        required: true
        schema:
          type: string
      - name: details
        in: query
        description: Get additional details about the view
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/View'
    delete:
      tags:
        - Manage Views
      summary: delete_view
      description: Delete a specific view. WARNING -- this action cannot be undone.
      operationId: delete_view
      x-swagger-router-controller: connexContr
      parameters:
      - name: view_name
        in: path
        description: The name of the view to delete.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'

  /v3/pgrest/manage/views/{view_name}/refresh:
    get:
      tags:
        - Manage Views
      summary: refresh_materialized_view
      description: Refresh materialized view (views created with the materialized_view_raw_sql attribute).
      operationId: refresh_materialized_view
      x-swagger-router-controller: connexContr
      parameters:
      - name: view_name
        in: path
        description: The id of the view.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'

  /v3/pgrest/views/{view_name}:
    get:
      tags:
        - Views
      summary: get_view
      description: List objects in the view with root_url {view_name}.
      operationId: get_view
      parameters:
      - name: view_name
        in: path
        description: The root_url parameter of the view.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/TableRows'


  #=== ROLES ===#
  /v3/pgrest/manage/roles:
    get:
      tags:
        - Manage Roles
      summary: list_roles
      description: List all roles for the tenant.
      operationId: list_roles
      x-swagger-router-controller: connexContr
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      type: string
                    description: Roles in tenant
    post:
      tags:
        - Manage Roles
      summary: create_role
      description: Create a role.
      operationId: create_role
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRole'
            examples:
              create_role:
                summary: Create role named PGREST_My_New_Role
                value: {"role_name": "PGREST_My_New_Role", "description": "This is my new example role made for this example!"}
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string

  /v3/pgrest/manage/roles/{role_name}:
    get:
      tags:
        - Manage Roles
      summary: get_role
      description: Get role info and users in the role
      operationId: get_role
      x-swagger-router-controller: connexContr
      parameters:
      - name: role_name
        in: path
        description: The name of the role.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Role'
    post:
      tags:
        - Manage Roles
      summary: manage_role
      description: Either grant or revoke role for users.
      operationId: manage_role
      x-swagger-router-controller: connexContr
      parameters:
      - name: role_name
        in: path
        description: The name of the role.
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageRole'
            examples:
              grant_role:
                summary: Granting a role to userTest
                value: {"username": "userTest", "method": "grant"}
              revoke_role:
                summary: Revoking a role from userTest
                value: {"username": "userTest", "method": "revoke"}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string


components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, error]


    #=== TABLES ===#
    Table:
      type: object
      properties:
        table_name:
          type: string
          description: The name of the table.
        root_url:
          type: string
          description: The url path used for the root_url associated with the records in the table.

    arrayOfTables:
      type: array
      items:
        $ref: '#/components/schemas/Table'

    NewTable:
      type: object
      properties:
        table_name:
          type: string
          description: The name to be used for the table.
        root_url:
          type: string
          description: The url path to use for the root_url associated with the records in the table.
        columns:
          $ref: '#/components/schemas/TableColumns'
        comments:
          type: string
          description: Text area to describe table. Returned when calling manage endpoints.
        constraints:
          $ref: '#/components/schemas/TableConstraints'
        enums:
          $ref: '#/components/schemas/TableEnums'
        create:
          type: boolean
          description: Whether the "created" endpoint (HTTP verb "POST") for creating new rows is available.
          default: True
        delete:
          type: boolean
          description: Whether the "delete" endpoint (HTTP verb "delete") for deleting a specific row is available.
          default: True
        list_all:
          type: boolean
          description: Whether the "list all" endpoint (HTTP verb "GET") for listing all rows in the table is available.
          default: True
        list_single:
          type: boolean
          description: Whether the "get row" endpoint (HTTP verb "GET") for retrieving a specifc row in the table is available.
          default: True
        update:
          type: boolean
          description: Whether the "update" endpoint (HTTP verb "PUT") for updating a specific row is available.
          default: True
      required: [table_name, root_url, columns]

    TableEnums:
      type: object
      description: Definition for enum to create. {enum_name":" [enum_val_1, ...]}

    TableConstraints:
      type: object
      description: A description of the table constraints. Unique constraint is the only current constraint.
      properties:
        unique:
          type: object
          description: Object of constraint_name as key and list of columns to keep unique as value.

    TableColumns:
      type: object
      description: A description of the columns of the table, in key/value pair format. Each key corresponds to a single collumn; the name of the key is the name of the column, and the value of the key decribes the type of the column and any additional validation information.
      properties:
        "null":
          type: boolean
          description: Whether the column can contain null values.
        data_type:
          type: string
          description: The Postgres type of the column, such as "integer", "varchar", etc.
        char_len:
          type: integer
          description: For columns of type "varchar", the max length of the column.
        comments:
          type: string
          description: Text area to describe column. Shown in manage endpoints.
        unique:
          type: boolean
          description: Whether the column can contain null values.
        default:
          type: boolean
          description: Whether the column can contain null values.
        primary_key:
          type: string
          description: Allows user to specify which column to act as a primary_key rather than defaulting to {table_name}_id.
        foreign_key:
          type: boolean
          description: Whether this column should reference a foreign key in another table.
        reference_table:
          type: string
          description: Only if foreign_key, sets which table to reference.
        reference_column:
          type: string
          description: Only if foreign_key, sets when table column to reference.
        on_event:
          type: string
          description: Only if foreign_key, sets whether to use ON DELETE or ON UPDATE postgres definition.
          enum: [ON DELETE, ON UPDATE]
        event_action:
          type: string
          description: Only if foreign_key, sets which event action to call when on_event event occurs.
          enum: [CASCADE, SET NULL, SET DEFAULT, RESTRICT, NO ACTION]
        serial_start:
          type: integer
          description: Only if data_type is serial. Delegates what number the data_type will start at.
        serial_increment:
          type: integer
          description: Only if data_type is serial. Delegates what the serial increment between rows will be.
      additionalProperties:
        type: object
      required: [data_type]

    UpdateTable:
      type: object
      properties:
        table_name:
          type: string
          description: Operation to change the table_name currently associated with the table.
        root_url:
          type: string
          description: Operation to change the root_url currently associated with the table.
        comments:
          type: string
          description: Operation to change the comments currently associated with the table (Overwrites existing).
        endpoints:
          type: array
          items:
            type: string
          description: Operation to change the endpoints a table currently has available.
        column_type:
          type: string
          description: Operation to change the column_type of a particular column in table ("col_name, new_type" format).
        add_column:
          $ref: '#/components/schemas/TableColumns'
          description: Operation to add a column to a table.
        drop_column:
          type: string
          description: Operation to drop a column in a table (Not reversible).
        set_default:
          type: string
          description: Operation to set a new default on a column in a table ("col_name, new_default" format).
        drop_default:
          type: string
          description: Operation to drop a default currently set on a column in a table.


    #=== TABLE ROWS ===#
    TableRow:
      type: object
      description: The values row.

    TableRows:
      type: array
      items:
        $ref: '#/components/schemas/TableRow'

    NewTableRow:
      type: object
      properties:
        data:
          type: object
          description: The values of the row to add.

    NewTableRows:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            description: The values of the row to add.

    UpdateTableRow:
      type: object
      description: A JSON object of key/value pairs describing the updates to be made to the item. Each key should be the name of a column and each corresponding value should be the new value to update the column to.

    UpdateMultipleTableRows:
      type: object
      description: Update multiple rows in the same way atomically, where the set of rows to be updated is described with a "where" clause and the update to be performed is defined by a JSON object of column names and column values (the new values to apply to all records).
      properties:
        where:
          type: object
          description: A JSON object describing a where clause of records to update; each record on the table matching the where clause will be updates.
          properties:
            sub_value:
              type: object
              properties:
                operator:
                  type: string
                  description: The operator to use in the where clause when comparing rows to be updated.
                value:
                  description: The value to use in the where clause when comparing rows to be updated.
                  oneOf:
                    - type: integer
                    - type: string
                    - type: boolean
      additionalProperties:
        type: object
      required: [where]


    #=== VIEWS ===#
    View:
      type: object
      properties:
        view_name:
          type: string
          description: The name of the view.
        root_url:
          type: string
          description: The url path used for the root root_url associated with the view.
        endpoints:
          type: string
          description: Which endpoints are available for the view. (This doesn't work/doesn't mean anything)
        manage_view_id:
          type: string
          description: View ID to manage the view with. Serial IDs allocated per tenant.
        tenant_id:
          type: string
          description: The name of the tenant this view is created in.
        comments:
          type: string
          description: Text area to describe view. Returned when calling manage endpoints.

    arrayOfViews:
      type: array
      items:
        $ref: '#/components/schemas/View'

    NewView:
      type: object
      properties:
        view_name:
          type: string
          description: The name of the view to create.
        select_query:
          type: string
          description: Query to run on 'from_table' to create a view from.
        from_table:
          type: string
          description: Table to run select query on and create view from.
        comments:
          type: string
          description: Text area to describe view. Returned when calling manage endpoints.
        permission_rules:
          type: array
          items:
            type: string
          description: Roles users who access this view must have in security kernel to have permission to see this view.
        raw_sql:
          type: string
          description: Admin only. Full support of SQL when creating complex views.
        materialized_view_raw_sql:
          type: string
          description: Admin only. Full support of SQL when creating complex materialized views.

      required: [view_name]


    #=== ROLES ===#
    Role:
      type: object
      properties:
        id:
          type: integer
          description: The id of the role.
        tenant:
          type: string
          description: Tenant the role is in.
        description:
          type: string
          description: Description of the role defined at role creation.
        owner:
          type: string
          description: The owner of the role.
        ownerTenant:
          type: string
          description: The tenant of the owner of the role.
        created:
          type: string
          description: When the role was created.
        createdby:
          type: string
          description: Who created the role.
        createdbyTenant:
          type: string
          description: The tenant of the creator of the role.
        updated:
          type: string
          description: When the role was last updated.
        updatedby:
          type: string
          description: Who last updated the role.
        updatedbyTenant:
          type: string
          description: The tenant of the user who last updated the role.
        usersInRole:
          type: array
          items:
            type: string
          description: Users who currently have this role granted to them.

    NewRole:
      type: object
      properties:
        role_name:
          type: string
          description: The name of the role to create.
        description:
          type: string
          description: A description of the role.
      required: [role_name, description]

    ManageRole:
      type: object
      properties:
        username:
          type: string
          description: The username to manage role for.
        method:
          type: string
          description: Whether to revoke or grant role
          enum: [grant, revoke]
      required: [method, username]

openapi: 3.1.0
info:
  title: Tapis Pods Service
  description: "\nThe Pods Service is a web service and distributed computing platform\
    \ providing pods-as-a-service (PaaS). The service \nimplements a message broker\
    \ and processor model that requests pods, alongside a health module to poll for\
    \ pod\ndata, including logs, status, and health. The primary use of this service\
    \ is to have quick to deploy long-lived\nservices based on Docker images that\
    \ are exposed via HTTP or TCP endpoints listed by the API.\n\n**The Pods service\
    \ provides functionality for two types of pod solutions:**\n * **Templated Pods**\
    \ for run-as-is popular images. Neo4J is one example, the template manages TCP\
    \ ports, user creation, and permissions.\n * **Custom Pods** for arbitrary docker\
    \ images with less functionality. In this case we will expose port 5000 and do\
    \ nothing else.\n\n The live-docs act as the most up-to-date API reference. Visit\
    \ the [documentation for more information](https://tapis.readthedocs.io/en/latest/technical/pods.html).\n"
  contact:
    name: CIC Support
    url: https://tapis-project.org
    email: cicsupport@tacc.utexas.edu
  license:
    name: BSD 3.0
    url: https://github.com/tapis-project/pods_service
  version: 1.6.0
paths:
  /traefik-config:
    get:
      tags:
      - Misc
      summary: traefik_config
      description: "Supplies traefik-config to service. Returns json traefik-config\
        \ object for\ntraefik to use with the http provider. Dynamic configs don't\
        \ work well in \nKubernetes."
      operationId: traefik_config
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /healthcheck:
    get:
      tags:
      - Misc
      summary: healthcheck
      description: 'Health check for service. Returns healthy when api is running.

        Should add database health check, should add kubernetes health check'
      operationId: healthcheck
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /error-handler/{status}:
    get:
      tags:
      - Misc
      summary: error_handler
      description: Handles all error codes from Traefik.
      operationId: error_handler
      parameters:
      - required: true
        schema:
          title: Status
        name: status
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates:
    get:
      tags:
      - Templates
      summary: list_templates
      description: 'Get all templates allowed globally + in respective tenant + for
        specific user.

        Returns a list of templates.'
      operationId: list_templates
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplatesResponse'
    post:
      tags:
      - Templates
      summary: add_template
      description: 'Add a template with inputted information.


        Returns new template object.'
      operationId: add_template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTemplate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates/tags:
    get:
      tags:
      - Templates
      summary: list_templates_and_tags
      description: 'Get all templates and their tags for the user.

        Returns a dictionary with templates and their tags.'
      operationId: list_templates_and_tags
      parameters:
      - description: Returns tag pod_definition with tag when full=true
        required: false
        schema:
          type: boolean
          title: Full
          description: Returns tag pod_definition with tag when full=true
          default: true
        name: full
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                title: Response List Templates And Tags
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates/{template_id}:
    get:
      tags:
      - Templates
      summary: get_template
      description: 'Get a templates.


        Returns retrieved templates object.'
      operationId: get_template
      parameters:
      - required: true
        schema:
          title: Template Id
        name: template_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
      - Templates
      summary: update_template
      description: 'Update a template.


        Note:

        - Fields that change template id cannot be modified. Please recreate your
        template in that case.


        Returns updated template object.'
      operationId: update_template
      parameters:
      - required: true
        schema:
          title: Template Id
        name: template_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Templates
      summary: delete_template
      description: 'Delete a template.


        Returns "".'
      operationId: delete_template
      parameters:
      - required: true
        schema:
          title: Template Id
        name: template_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates/{template_id}/tags:
    get:
      tags:
      - Templates
      summary: list_template_tags
      description: 'List tag entries the template has


        Returns the ledger of template tags'
      operationId: list_template_tags
      parameters:
      - required: true
        schema:
          type: string
          title: Template Id
        name: template_id
        in: path
      - description: Return pod_definition in tag when full=true
        required: false
        schema:
          type: boolean
          title: Full
          description: Return pod_definition in tag when full=true
          default: true
        name: full
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTagsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Templates
      summary: add_template_tag
      operationId: add_template_tag
      parameters:
      - required: true
        schema:
          type: string
          title: Template Id
        name: template_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTemplateTag'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTagResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates/{template_id}/tags/{tag_id}:
    get:
      tags:
      - Templates
      summary: get_template_tag
      description: 'Get a specific tag entry the template has


        Returns the tag entry'
      operationId: get_template_tag
      parameters:
      - required: true
        schema:
          type: string
          title: Template Id
        name: template_id
        in: path
      - required: true
        schema:
          type: string
          title: Tag Id
        name: tag_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTagsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates/{template_id}/permissions:
    get:
      tags:
      - Permissions
      summary: get_template_permissions
      description: 'Get a templates permissions.


        Note:

        - There are 3 levels of permissions, READ, USER, and ADMIN.

        - Permissions are granted/revoked to individual TACC usernames.

        - Permissions can be set for TENANT or SITE keys for tenant-level or site-level
        sharing.


        Returns all template permissions.'
      operationId: get_template_permissions
      parameters:
      - required: true
        schema:
          title: Template Id
        name: template_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplatePermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Permissions
      summary: set_template_permission
      description: 'Set a permission for a template.


        Returns updated template permissions.'
      operationId: set_template_permission
      parameters:
      - required: true
        schema:
          title: Template Id
        name: template_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPermission'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplatePermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/templates/{template_id}/permissions/{user}:
    delete:
      tags:
      - Permissions
      summary: delete_template_permission
      description: 'Delete a permission from a template.


        Returns updated template permissions.'
      operationId: delete_template_permission
      parameters:
      - required: true
        schema:
          title: Template Id
        name: template_id
        in: path
      - required: true
        schema:
          title: User
        name: user
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplatePermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/images:
    get:
      tags:
      - Images
      summary: get_images
      description: 'Get all images allowed globally + in respective tenant.


        Returns a list of images.'
      operationId: get_images
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
    post:
      tags:
      - Images
      summary: add_image
      description: 'Add a image with inputted information.


        Returns new image object.'
      operationId: add_image
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewImage'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/images/bulk:
    post:
      tags:
      - Images
      summary: add_images
      description: 'Add multiple images with inputted information.


        Returns new image objects.'
      operationId: add_images
      parameters:
      - description: Whether to skip duplicates or fail on duplicates.
        required: false
        schema:
          type: boolean
          title: Skip Duplicates
          description: Whether to skip duplicates or fail on duplicates.
          default: false
        name: skip_duplicates
        in: query
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/NewImage'
              type: array
              title: New Images
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/images/{image_id}:
    get:
      tags:
      - Images
      summary: get_image
      description: 'Get an image.


        Returns retrieved image object.'
      operationId: get_image
      parameters:
      - required: true
        schema:
          title: Image Id
        name: image_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Images
      summary: delete_image
      description: 'Delete an image.


        Returns "".'
      operationId: delete_image
      parameters:
      - required: true
        schema:
          title: Image Id
        name: image_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/snapshots:
    get:
      tags:
      - Snapshots
      summary: list_snapshots
      description: 'Get all snapshots in your respective tenant and site that you
        have READ or higher access to.


        Returns a list of snapshots.'
      operationId: list_snapshots
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotsResponse'
    post:
      tags:
      - Snapshots
      summary: create_snapshot
      description: 'Create a snapshot with inputted information.


        Notes:

        - Author will be given ADMIN level permissions to the snapshot.


        Returns new snapshot object.'
      operationId: create_snapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSnapshot'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/snapshots/{snapshot_id}:
    get:
      tags:
      - Snapshots
      summary: get_snapshot
      description: 'Get a snapshot.


        Returns retrieved snapshot object.'
      operationId: get_snapshot
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
      - Snapshots
      summary: update_snapshot
      description: 'Update a snapshot.


        Note:

        - Fields that change snapshot source or sink are not modifiable. Please recreate
        your snapshot in that case.


        Returns updated snapshot object.'
      operationId: update_snapshot
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSnapshot'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Snapshots
      summary: delete_snapshot
      description: 'Delete a snapshot.


        Returns "".'
      operationId: delete_snapshot
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSnapshotResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/snapshots/{snapshot_id}/list:
    get:
      tags:
      - Snapshots
      summary: list_snapshot_files
      description: List files in snapshot.
      operationId: list_snapshot_files
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesListResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/snapshots/{snapshot_id}/contents/{path}:
    get:
      tags:
      - Snapshots
      summary: get_snapshot_contents
      description: 'Get file or directory contents as a stream of data from a Tapis
        Snapshot.


        Use the **zip** query parameter to request directories as a zip archive. This
        is not allowed if path would result in all files in the snapshot being included.
        Please download individual directories, files or objects.'
      operationId: get_snapshot_contents
      parameters:
      - description: Unique identifier for the snapshot.
        required: true
        schema:
          type: string
          title: Snapshot Id
          description: Unique identifier for the snapshot.
        name: snapshot_id
        in: path
      - description: Path relative to the snapshot's root directory. Cannot be empty
          or /.
        required: true
        schema:
          type: string
          title: Path
          description: Path relative to the snapshot's root directory. Cannot be empty
            or /.
        name: path
        in: path
      - description: If true, directory contents are compressed using ZIP format.
        required: false
        schema:
          type: boolean
          title: Zip
          description: If true, directory contents are compressed using ZIP format.
          default: false
        name: zip
        in: query
      responses:
        '200':
          description: A streamed response of the file contents.
          content:
            application/json:
              schema: {}
            application/octet-stream: {}
            application/zip: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/snapshots/{snapshot_id}/permissions:
    get:
      tags:
      - Permissions
      summary: get_snapshot_permissions
      description: 'Get a snapshots permissions.


        Note:

        - There are 3 levels of permissions, READ, USER, and ADMIN.

        - Permissions are granted/revoked to individual TACC usernames.


        Returns all volue permissions.'
      operationId: get_snapshot_permissions
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotPermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Permissions
      summary: set_snapshot_permission
      description: 'Set a permission for a snapshot.


        Returns updated snapshot permissions.'
      operationId: set_snapshot_permission
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPermission'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotPermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/snapshots/{snapshot_id}/permissions/{user}:
    delete:
      tags:
      - Permissions
      summary: delete_snapshot_permission
      description: 'Delete a permission from a snapshot.


        Returns updated snapshot permissions.'
      operationId: delete_snapshot_permission
      parameters:
      - required: true
        schema:
          title: Snapshot Id
        name: snapshot_id
        in: path
      - required: true
        schema:
          title: User
        name: user
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnapshotPermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes:
    get:
      tags:
      - Volumes
      summary: list_volumes
      description: 'Get all volumes in your respective tenant and site that you have
        READ or higher access to.


        Returns a list of volumes.'
      operationId: list_volumes
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumesResponse'
    post:
      tags:
      - Volumes
      summary: create_volume
      description: 'Create a volume with inputted information.


        Notes:

        - Author will be given ADMIN level permissions to the volume.

        - status_requested defaults to "ON". So volume will immediately begin creation.


        Returns new volume object.'
      operationId: create_volume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVolume'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes/{volume_id}:
    get:
      tags:
      - Volumes
      summary: get_volume
      description: 'Get a volume.


        Returns retrieved volume object.'
      operationId: get_volume
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
      - Volumes
      summary: update_volume
      description: 'Update a volume.


        Note:

        - Fields that change volume source or sink are not modifiable. Please recreate
        your volume in that case.


        Returns updated volume object.'
      operationId: update_volume
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVolume'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Volumes
      summary: delete_volume
      description: 'Delete a volume.


        Returns "".'
      operationId: delete_volume
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVolumeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes/{volume_id}/list:
    get:
      tags:
      - Volumes
      summary: list_volume_files
      description: List files in volume.
      operationId: list_volume_files
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesListResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes/{volume_id}/contents/{path}:
    get:
      tags:
      - Volumes
      summary: get_volume_contents
      description: 'Get file or directory contents as a stream of data from a Tapis
        Volume.


        Use the **zip** query parameter to request directories as a zip archive. This
        is not allowed if path would result in all files in the volume being included.
        Please download individual directories, files or objects.'
      operationId: get_volume_contents
      parameters:
      - description: Unique identifier for the volume.
        required: true
        schema:
          type: string
          title: Volume Id
          description: Unique identifier for the volume.
        name: volume_id
        in: path
      - description: Path relative to the volume's root directory. Cannot be empty
          or /.
        required: true
        schema:
          type: string
          title: Path
          description: Path relative to the volume's root directory. Cannot be empty
            or /.
        name: path
        in: path
      - description: If true, directory contents are compressed using ZIP format.
        required: false
        schema:
          type: boolean
          title: Zip
          description: If true, directory contents are compressed using ZIP format.
          default: false
        name: zip
        in: query
      responses:
        '200':
          description: A streamed response of the file contents.
          content:
            application/json:
              schema: {}
            application/octet-stream: {}
            application/zip: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes/{volume_id}/upload/{path}:
    post:
      tags:
      - Volumes
      summary: upload_to_volume
      description: Upload to volume.
      operationId: upload_to_volume
      parameters:
      - description: Unique identifier for the volume.
        required: true
        schema:
          type: string
          title: Volume Id
          description: Unique identifier for the volume.
        name: volume_id
        in: path
      - description: Path within the volume where the file will be uploaded. Cannot
          be empty or /.
        required: true
        schema:
          type: string
          title: Path
          description: Path within the volume where the file will be uploaded. Cannot
            be empty or /.
        name: path
        in: path
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_to_volume'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilesUploadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes/{volume_id}/permissions:
    get:
      tags:
      - Permissions
      summary: get_volume_permissions
      description: 'Get a volumes permissions.


        Note:

        - There are 3 levels of permissions, READ, USER, and ADMIN.

        - Permissions are granted/revoked to individual TACC usernames.


        Returns all volue permissions.'
      operationId: get_volume_permissions
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumePermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Permissions
      summary: set_volume_permission
      description: 'Set a permission for a volume.


        Returns updated volume permissions.'
      operationId: set_volume_permission
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPermission'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumePermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/volumes/{volume_id}/permissions/{user}:
    delete:
      tags:
      - Permissions
      summary: delete_volume_permission
      description: 'Delete a permission from a volume.


        Returns updated volume permissions.'
      operationId: delete_volume_permission
      parameters:
      - required: true
        schema:
          title: Volume Id
        name: volume_id
        in: path
      - required: true
        schema:
          title: User
        name: user
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumePermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods:
    get:
      tags:
      - Pods
      summary: list_pods
      description: 'Get all pods in your respective tenant and site that you have
        READ or higher access to.


        Returns a list of pods.'
      operationId: list_pods
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodsResponse'
    post:
      tags:
      - Pods
      summary: create_pod
      description: 'Create a pod with inputted information.


        Notes:

        - Author will be given ADMIN level permissions to the pod.

        - status_requested defaults to "ON". So pod will immediately begin creation.


        Returns new pod object.'
      operationId: create_pod
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPod'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}:
    get:
      tags:
      - Pods
      summary: get_pod
      description: 'Get a pod.


        Returns retrieved pod object.'
      operationId: get_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
      - Pods
      summary: update_pod
      description: 'Update a pod.


        Note:

        - Pod will not be restarted, you must restart the pod for any pod-related
        changes to proliferate.


        Returns updated pod object.'
      operationId: update_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePod'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
      - Pods
      summary: delete_pod
      description: 'Delete a pod.


        Returns "".'
      operationId: delete_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/derived:
    get:
      tags:
      - Pods
      summary: get_derived_pod
      description: 'Derive a pod''s final definition if templates are used.


        Returns final pod definition to be used for pod creation.'
      operationId: get_derived_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/credentials:
    get:
      tags:
      - Pods
      summary: get_pod_credentials
      description: 'Get the credentials created for a pod.


        Note:

        - These credentials are used in the case of templated pods, but for custom
        pods they''re not.


        Returns user accessible credentials.'
      operationId: get_pod_credentials
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodCredentialsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/logs:
    get:
      tags:
      - Pods
      summary: get_pod_logs
      description: 'Get a pods stdout logs and action_logs.


        Note:

        - Pod logs are only retrieved while pod is running.

        - If a pod is restarted or turned off and then on, the logs will be reset.

        - Action logs are detailed logs of actions taken on the pod.


        Returns pod stdout logs and action logs.'
      operationId: get_pod_logs
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodLogsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/permissions:
    get:
      tags:
      - Permissions
      summary: get_pod_permissions
      description: 'Get a pods permissions.


        Note:

        - There are 3 levels of permissions, READ, USER, and ADMIN.

        - Permissions are granted/revoked to individual TACC usernames.


        Returns all pod permissions.'
      operationId: get_pod_permissions
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodPermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
      - Permissions
      summary: set_pod_permission
      description: 'Set a permission for a pod.


        Returns updated pod permissions.'
      operationId: set_pod_permission
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPermission'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodPermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/exec:
    post:
      tags:
      - Pods
      summary: exec_pod_commands
      description: 'Execute one or more commands in a pod.


        Accepts either:

        - Single command: ["sleep", "5"]

        - Multiple commands: [["sleep", "5"], ["echo", "hello"]]


        Executes commands synchronously in the pod:

        - Each command runs sequentially

        - Total request time = sum of all command execution times

        - Request remains open until all commands complete

        - Returns consolidated results for all commands


        Response includes:

        - Individual command outputs

        - Success/failure status

        - Execution duration'
      operationId: exec_pod_commands
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutePodCommands'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/permissions/{user}:
    delete:
      tags:
      - Permissions
      summary: delete_pod_permission
      description: 'Delete a permission from a pod.


        Returns updated pod permissions.'
      operationId: delete_pod_permission
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      - required: true
        schema:
          title: User
        name: user
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodPermissionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/stop:
    get:
      tags:
      - Pods
      summary: stop_pod
      description: 'Stop a pod.


        Note:

        - Sets status_requested to OFF. Pod will attempt to get to STOPPED status
        unless start_pod is ran.


        Returns updated pod object.'
      operationId: stop_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/start:
    get:
      tags:
      - Pods
      summary: start_pod
      description: 'Start a pod.


        Note:

        - Sets status_requested to ON. Pod will attempt to deploy.


        Returns updated pod object.'
      operationId: start_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id}/restart:
    get:
      tags:
      - Pods
      summary: restart_pod
      description: 'Restart a pod.


        Note:

        - Sets status_requested to RESTART. If pod status gets to STOPPED, status_requested
        will be flipped to ON. Health should then create new pod.

        - If grab_latest_template_tag is True, attempts to grab the latest version
        of the template tag if the pod has a template.


        Returns updated pod object.'
      operationId: restart_pod
      parameters:
      - required: true
        schema:
          title: Pod Id
        name: pod_id
        in: path
      - required: false
        schema:
          type: boolean
          title: Grab Latest Template Tag
          default: false
        name: grab_latest_template_tag
        in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id_net}/save_pod_as_template_tag:
    post:
      tags:
      - Pods
      summary: save_pod_as_template_tag
      description: 'Endpoint takes pod_id and derives a pod_definition to create a
        template tag from it.

        Allows users to save the configuration of a particular pod as a template tag.


        POST data contains location to save the tag and tag creation data


        Return the template tag object.'
      operationId: save_pod_as_template_tag
      parameters:
      - required: true
        schema:
          title: Pod Id Net
        name: pod_id_net
        in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTemplateTagFromPod'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTagResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id_net}/auth:
    get:
      tags:
      - Pods
      summary: pod_auth
      description: "Auth endpoint for each pod. When a networking object defines tapis_auth=True,\
        \ this endpoint manages auth.\n\nTraefik has a forwardAuth middleware for\
        \ http routes. This redirects users, auth happens, if traefik gets 200 then\
        \ traefik allows user to endpoint.\nAuth flow for a user getting to \"fastapi\
        \ hello world\" pod at https://fastapi.pods.tacc.tapis.io.\n  1) User navigates\
        \ to https://fastapi.pods.tacc.tapis.io\n  2) Traefik redirects user to https://tacc.tapis.io/v3/pods/fastapi/auth\n\
        \  3) Check if logged in via cookies, if logged in, respond 200 + set user\
        \ defined headers. Otherwise...\n  4) Pods service creates client in correct\
        \ tenant for user or updates client if it already exists. (we expect only\
        \ one client in use at a time)\n  5) With client the /auth endpoint redirects\
        \ users to https://tacc.tapis.io/v3/oauth2/authorize?client_id={client_id}&redirect_uri={callback_url}&response_type=code\n\
        \  6) User logs in via browser, authorizes client, redirects to callback_url\
        \ at https://tacc.tapis.io/v3/pods/fastapi/auth/callback?code=CodeHere\n \
        \ 7) Callback url exchanges code for token, gets username from token, sets\
        \ X-Tapis-Token and X-Tapis-Username cookies\n  8) User gets redirected back\
        \ to https://fastapi.pods.tacc.tapis.io, Traefik starts forwardAuth, user\
        \ at this point should be authenticated\n  9) Auth endpoint responds with\
        \ 200, sets headers specified by networking stanza, and users gets to fastapi\
        \ hello world response.\n\nusers can specify:\n - tapis_auth=True/False -\
        \ Turns on auth\n - tapis_auth_response_headers - dict[str] - headers to set\
        \ on response and their values\n - tapis_auth_allowed_users - list[str] -\
        \ list of tapis users allowed to access pod\n - tapis_auth_return_path - str\
        \ - uri to return to after auth, default is \"passthrough\", which we save\
        \ in cookies(?) and return to. x-forwarded-host?\n\n - response headers need\
        \ to be slightly modifiable to allow for different application requirements\n\
        \ - for example we have to pass username, but many apps require @email.bit,\
        \ so user must be able to append to user.\n - tapis_auth_response_headers:\
        \ {\"X-Tapis-Username\": \"<<tapisusername>>@tapis.io\", \"X-Tapis-Token\"\
        : \"<<token>>\", \"OAUTH2_USERNAME_KEY\": \"username\"}\n\n - tapis_auth_allowed_users,\
        \ checks username against .lower() of username list to make sure it's in list.\
        \ otherwise deny"
      operationId: pod_auth
      parameters:
      - required: true
        schema:
          title: Pod Id Net
        name: pod_id_net
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /pods/{pod_id_net}/auth/callback:
    get:
      tags:
      - Pods
      summary: pod_auth_callback
      operationId: pod_auth_callback
      parameters:
      - required: true
        schema:
          title: Pod Id Net
        name: pod_id_net
        in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Body_upload_to_volume:
      properties:
        file:
          type: string
          format: binary
          title: File
          description: The file to upload.
      type: object
      required:
      - file
      title: Body_upload_to_volume
    CredentialsModel:
      properties:
        user_username:
          type: string
          title: User Username
        user_password:
          type: string
          title: User Password
      additionalProperties: false
      type: object
      required:
      - user_username
      - user_password
      title: CredentialsModel
    DeleteSnapshotResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          type: string
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: DeleteSnapshotResponse
    DeleteVolumeResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          type: string
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: DeleteVolumeResponse
    ExecutePodCommands:
      properties:
        commands:
          anyOf:
          - items:
              type: string
            type: array
          - items:
              items:
                type: string
              type: array
            type: array
          title: Commands
          description: List of commands to run in pod. ex. `['sleep 5000', 'ls -l']`
            or `[['sleep', '5000'], ['ls', '-l']]
        total_timeout:
          type: integer
          title: Total Timeout
          description: Total time (sec) to wait for all commands to finish. Default
            300 seconds.
          default: 300
        command_timeout:
          type: integer
          title: Command Timeout
          description: Time (sec) to wait for each command to finish. Default 60 seconds.
          default: 60
        fail_on_non_success:
          type: boolean
          title: Fail On Non Success
          description: If True, will fail if any command does not return 0. Default
            True.
          default: true
      type: object
      required:
      - commands
      title: ExecutePodCommands
    FileModel:
      properties:
        path:
          type: string
          title: Path
          description: Path of object.
        name:
          type: string
          title: Name
          description: Name of object.
        type:
          type: string
          title: Type
          description: Type of object.
        size:
          type: integer
          title: Size
          description: Size of object in bytes.
        lastModified:
          type: string
          title: Lastmodified
          description: Last modified date of object.
        nativePermissions:
          type: string
          title: Nativepermissions
          description: Native permissions of object.
      additionalProperties: false
      type: object
      required:
      - path
      - name
      - type
      - size
      - lastModified
      - nativePermissions
      title: FileModel
    FilesListResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/FileModel'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: FilesListResponse
    FilesUploadResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          type: string
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: FilesUploadResponse
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    ImageDeleteResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          type: string
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: ImageDeleteResponse
    ImageResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/ImageResponseModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: ImageResponse
    ImageResponseModel:
      properties:
        image:
          type: string
          title: Image
          description: Name of image to allow.
        tenants:
          items:
            type: string
          type: array
          title: Tenants
          description: Tenants that can use this image.
          default: []
        description:
          type: string
          title: Description
          description: Description of image.
          default: ''
        creation_ts:
          type: string
          format: date-time
          title: Creation Ts
          description: Time (UTC) that this image was created.
        added_by:
          type: string
          title: Added By
          description: User who added image to allow list.
          default: ''
      additionalProperties: false
      type: object
      required:
      - image
      title: ImageResponseModel
      description: Response object for Image class.
    ImagesResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/ImageResponseModel'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: ImagesResponse
    LogsModel:
      properties:
        logs:
          type: string
          title: Logs
          description: Logs from kubernetes pods, useful for debugging and reading
            results.
          default: ''
        action_logs:
          items:
            type: string
          type: array
          title: Action Logs
          description: Log of actions taken on this pod.
          default: []
      additionalProperties: false
      type: object
      title: LogsModel
    NewImage:
      properties:
        image:
          type: string
          title: Image
          description: Name of image to allow.
        tenants:
          items:
            type: string
          type: array
          title: Tenants
          description: Tenants that can use this image.
          default: []
        description:
          type: string
          title: Description
          description: Description of image.
          default: ''
      additionalProperties: false
      type: object
      required:
      - image
      title: NewImage
      description: Object with fields that users are allowed to specify for the Image
        class.
    NewPod:
      properties:
        pod_id:
          type: string
          title: Pod Id
          description: Name of this pod.
        image:
          type: string
          title: Image
          description: Which docker image to use, must be on allowlist, check /pods/images
            for list.
          default: ''
        template:
          type: string
          title: Template
          description: Which pod template to use as base of pod fields. User set attributes
            will overwrite template fields.
          default: ''
        description:
          type: string
          title: Description
          description: Description of this pod.
          default: ''
        command:
          items:
            type: string
          type: array
          title: Command
          description: Command to run in pod. ex. `["sleep", "5000"]` or `["/bin/bash",
            "-c", "(exec myscript.sh)"]`
        arguments:
          items:
            type: string
          type: array
          title: Arguments
          description: Arguments for the Pod's command.
        environment_variables:
          type: object
          title: Environment Variables
          description: Environment variables to inject into k8 pod; Only for custom
            pods.
          default: {}
        status_requested:
          type: string
          title: Status Requested
          description: Status requested by user, `ON`, `OFF`, or `RESTART`.
          default: 'ON'
        volume_mounts:
          additionalProperties:
            $ref: '#/components/schemas/models_pods__VolumeMount'
          type: object
          title: Volume Mounts
          description: 'Key: Volume name. Value: List of strs specifying volume folders/files
            to mount in pod'
          default: {}
        time_to_stop_default:
          type: integer
          title: Time To Stop Default
          description: Default time (sec) for pod to run from instance start. -1 for
            unlimited. 12 hour default.
          default: 43200
        time_to_stop_instance:
          type: integer
          title: Time To Stop Instance
          description: Time (sec) for pod to run from instance start. Reset each time
            instance is started. -1 for unlimited. None uses default.
        networking:
          additionalProperties:
            $ref: '#/components/schemas/models_pods__Networking'
          type: object
          title: Networking
          description: 'Networking information. `{"url_suffix": {"protocol": "http"  "tcp",
            "port": int}}`'
          default:
            default:
              protocol: http
              port: 5000
        resources:
          allOf:
          - $ref: '#/components/schemas/models_pods__Resources'
          title: Resources
          description: 'Pod resource management `{"cpu_limit": 3000, "mem_limit":
            3000, "cpu_request": 500, "mem_limit": 500, "gpus": 0}`'
          default: {}
        compute_queue:
          type: string
          title: Compute Queue
          description: Queue to run pod in. `default` is the default queue.
          default: default
      additionalProperties: false
      type: object
      required:
      - pod_id
      title: NewPod
      description: Object with fields that users are allowed to specify for the Pod
        class.
    NewSnapshot:
      properties:
        snapshot_id:
          type: string
          title: Snapshot Id
          description: Name of this snapshot.
        source_volume_id:
          type: string
          title: Source Volume Id
          description: The volume_id to use as source of snapshot.
        source_volume_path:
          type: string
          title: Source Volume Path
          description: Path in source volume_id to make snapshot of
        destination_path:
          type: string
          title: Destination Path
          description: Path to copy to. Snapshots of singular files require destination_path.
          default: ''
        description:
          type: string
          title: Description
          description: Description of this snapshot.
          default: ''
        size_limit:
          type: integer
          title: Size Limit
          description: Size in MB to limit snapshot to. We'll start warning if you've
            gone past the limit.
          default: 1024
        cron:
          type: string
          title: Cron
          description: cron bits
          default: ''
        retention_policy:
          type: string
          title: Retention Policy
          description: retention_policy bits
          default: ''
      additionalProperties: false
      type: object
      required:
      - snapshot_id
      - source_volume_id
      - source_volume_path
      title: NewSnapshot
      description: Object with fields that users are allowed to specify for the Snapshot
        class.
    NewTemplate:
      properties:
        template_id:
          type: string
          title: Template Id
          description: Name of template.
        description:
          type: string
          title: Description
          description: Description of template.
          default: ''
        metatags:
          items:
            type: string
          type: array
          title: Metatags
          description: Metadata tags for additional search/listing functionality for
            the template.
          default: []
        archive_message:
          type: string
          title: Archive Message
          description: If set, metadata message to give users of this template.
          default: ''
      additionalProperties: false
      type: object
      required:
      - template_id
      title: NewTemplate
    NewTemplateTag:
      properties:
        pod_definition:
          allOf:
          - $ref: '#/components/schemas/TemplateTagPodDefinition'
          title: Pod Definition
          description: Pod definition for this template tag.
        commit_message:
          type: string
          title: Commit Message
          description: Commit message for this template tag.
        tag:
          type: string
          title: Tag
          description: Tag for this template. Default is 'latest'.
          default: latest
      additionalProperties: false
      type: object
      required:
      - pod_definition
      - commit_message
      title: NewTemplateTag
      description: Object with fields that users are allowed to specify for the Template
        class.
    NewTemplateTagFromPod:
      properties:
        commit_message:
          type: string
          title: Commit Message
          description: Commit message for this template tag.
        tag:
          type: string
          title: Tag
          description: Tag for this template. Default is 'latest'.
          default: latest
        template_id:
          type: string
          title: Template Id
          description: template_id this tag is linked to
      additionalProperties: false
      type: object
      required:
      - commit_message
      - template_id
      title: NewTemplateTagFromPod
      description: Object with fields that users are allowed to specify for the Template
        class when creating a new template tag from a pod.
    NewVolume:
      properties:
        volume_id:
          type: string
          title: Volume Id
          description: Name of this volume.
        description:
          type: string
          title: Description
          description: Description of this volume.
          default: ''
        size_limit:
          type: integer
          title: Size Limit
          description: Size in MB to limit volume to. We'll start warning if you've
            gone past the limit.
          default: 1024
      additionalProperties: false
      type: object
      required:
      - volume_id
      title: NewVolume
      description: Object with fields that users are allowed to specify for the Volume
        class.
    PermissionsModel:
      properties:
        permissions:
          items:
            type: string
          type: array
          title: Permissions
          description: Pod permissions for each user.
          default: []
      additionalProperties: false
      type: object
      title: PermissionsModel
    PodCredentialsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/CredentialsModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: PodCredentialsResponse
    PodDeleteResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          type: string
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: PodDeleteResponse
    PodLogsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/LogsModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: PodLogsResponse
    PodPermissionsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/PermissionsModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: PodPermissionsResponse
    PodResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/PodResponseModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: PodResponse
    PodResponseModel:
      properties:
        pod_id:
          type: string
          title: Pod Id
          description: Name of this pod.
        image:
          type: string
          title: Image
          description: Which docker image to use, must be on allowlist, check /pods/images
            for list.
          default: ''
        template:
          type: string
          title: Template
          description: Which pod template to use as base of pod fields. User set attributes
            will overwrite template fields.
          default: ''
        description:
          type: string
          title: Description
          description: Description of this pod.
          default: ''
        command:
          items:
            type: string
          type: array
          title: Command
          description: Command to run in pod. ex. `["sleep", "5000"]` or `["/bin/bash",
            "-c", "(exec myscript.sh)"]`
        arguments:
          items:
            type: string
          type: array
          title: Arguments
          description: Arguments for the Pod's command.
        environment_variables:
          type: object
          title: Environment Variables
          description: Environment variables to inject into k8 pod; Only for custom
            pods.
          default: {}
        status_requested:
          type: string
          title: Status Requested
          description: Status requested by user, `ON`, `OFF`, or `RESTART`.
          default: 'ON'
        volume_mounts:
          additionalProperties:
            $ref: '#/components/schemas/models_pods__VolumeMount'
          type: object
          title: Volume Mounts
          description: 'Key: Volume name. Value: List of strs specifying volume folders/files
            to mount in pod'
          default: {}
        time_to_stop_default:
          type: integer
          title: Time To Stop Default
          description: Default time (sec) for pod to run from instance start. -1 for
            unlimited. 12 hour default.
          default: 43200
        time_to_stop_instance:
          type: integer
          title: Time To Stop Instance
          description: Time (sec) for pod to run from instance start. Reset each time
            instance is started. -1 for unlimited. None uses default.
        networking:
          additionalProperties:
            $ref: '#/components/schemas/models_pods__Networking'
          type: object
          title: Networking
          description: 'Networking information. `{"url_suffix": {"protocol": "http"  "tcp",
            "port": int}}`'
          default:
            default:
              protocol: http
              port: 5000
        resources:
          allOf:
          - $ref: '#/components/schemas/models_pods__Resources'
          title: Resources
          description: 'Pod resource management `{"cpu_limit": 3000, "mem_limit":
            3000, "cpu_request": 500, "mem_limit": 500, "gpus": 0}`'
          default: {}
        compute_queue:
          type: string
          title: Compute Queue
          description: Queue to run pod in. `default` is the default queue.
          default: default
        time_to_stop_ts:
          type: string
          format: date-time
          title: Time To Stop Ts
          description: Time (UTC) that this pod is scheduled to be stopped. Change
            with time_to_stop_instance.
        status:
          type: string
          title: Status
          description: Current status of pod.
          default: STOPPED
        status_container:
          type: object
          title: Status Container
          description: Status of container if exists. Gives phase.
          default: {}
        creation_ts:
          type: string
          format: date-time
          title: Creation Ts
          description: Time (UTC) that this pod was created.
        update_ts:
          type: string
          format: date-time
          title: Update Ts
          description: Time (UTC) that this pod was updated.
        start_instance_ts:
          type: string
          format: date-time
          title: Start Instance Ts
          description: Time (UTC) that this pod instance was started.
      additionalProperties: false
      type: object
      required:
      - pod_id
      title: PodResponseModel
      description: Response object for Pod class.
    PodsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/PodResponseModel'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: PodsResponse
    SetPermission:
      properties:
        user:
          type: string
          title: User
          description: User to modify permissions for.
        level:
          type: string
          title: Level
          description: Permission level to give the user.
      additionalProperties: false
      type: object
      required:
      - user
      - level
      title: SetPermission
      description: Object with fields that users are allowed to specify for the Volume
        class.
    SnapshotPermissionsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/PermissionsModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: SnapshotPermissionsResponse
    SnapshotResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/SnapshotResponseModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: SnapshotResponse
    SnapshotResponseModel:
      properties:
        snapshot_id:
          type: string
          title: Snapshot Id
          description: Name of this snapshot.
        source_volume_id:
          type: string
          title: Source Volume Id
          description: The volume_id to use as source of snapshot.
        source_volume_path:
          type: string
          title: Source Volume Path
          description: Path in source volume_id to make snapshot of
        destination_path:
          type: string
          title: Destination Path
          description: Path to copy to. Snapshots of singular files require destination_path.
          default: ''
        description:
          type: string
          title: Description
          description: Description of this snapshot.
          default: ''
        size_limit:
          type: integer
          title: Size Limit
          description: Size in MB to limit snapshot to. We'll start warning if you've
            gone past the limit.
          default: 1024
        cron:
          type: string
          title: Cron
          description: cron bits
          default: ''
        retention_policy:
          type: string
          title: Retention Policy
          description: retention_policy bits
          default: ''
        size:
          type: integer
          title: Size
          description: Size of snapshot currently in MB
          default: 0
        status:
          type: string
          title: Status
          description: Current status of snapshot.
          default: REQUESTED
        creation_ts:
          type: string
          format: date-time
          title: Creation Ts
          description: Time (UTC) that this snapshot was created.
        update_ts:
          type: string
          format: date-time
          title: Update Ts
          description: Time (UTC) that this snapshot was updated.
      additionalProperties: false
      type: object
      required:
      - snapshot_id
      - source_volume_id
      - source_volume_path
      title: SnapshotResponseModel
      description: Response object for Snapshot class.
    SnapshotsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/SnapshotResponseModel'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: SnapshotsResponse
    TemplateDeleteResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          type: string
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: TemplateDeleteResponse
    TemplatePermissionsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/PermissionsModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: TemplatePermissionsResponse
    TemplateResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/TemplateResponseModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: TemplateResponse
    TemplateResponseModel:
      properties:
        template_id:
          type: string
          title: Template Id
          description: Name of template.
        description:
          type: string
          title: Description
          description: Description of template.
          default: ''
        metatags:
          items:
            type: string
          type: array
          title: Metatags
          description: Metadata tags for additional search/listing functionality for
            the template.
          default: []
        archive_message:
          type: string
          title: Archive Message
          description: If set, metadata message to give users of this template.
          default: ''
        creation_ts:
          type: string
          format: date-time
          title: Creation Ts
          description: Time (UTC) that this template was created.
        update_ts:
          type: string
          format: date-time
          title: Update Ts
          description: Time (UTC) that this template was updated.
      additionalProperties: false
      type: object
      required:
      - template_id
      title: TemplateResponseModel
    TemplateTag:
      properties:
        template_id:
          type: string
          title: Template Id
          description: template_id this tag is linked to
        pod_definition:
          allOf:
          - $ref: '#/components/schemas/TemplateTagPodDefinition'
          title: Pod Definition
          description: Pod definition for this template.
          default: {}
        commit_message:
          type: string
          title: Commit Message
          description: Commit message for this template tag.
          default: ''
        tag:
          type: string
          title: Tag
          description: Tag for this template. Default is 'latest'.
          default: latest
        tag_timestamp:
          type: string
          title: Tag Timestamp
          description: tag@timestamp for this template tag.
          default: ''
        added_by:
          type: string
          title: Added By
          description: User who added this template tag.
          default: ''
        creation_ts:
          type: string
          format: date-time
          title: Creation Ts
          description: Time (UTC) that this template tag was created.
      additionalProperties: false
      type: object
      required:
      - template_id
      title: TemplateTag
    TemplateTagPodDefinition:
      properties:
        image:
          type: string
          title: Image
          description: Which docker image to use, must be on allowlist, check /pods/images
            for list.
        template:
          type: string
          title: Template
          description: Name of template to base this template off of.
        description:
          type: string
          title: Description
          description: Description of this pod.
        command:
          items:
            type: string
          type: array
          title: Command
          description: Command to run in pod. ex. `["sleep", "5000"]` or `["/bin/bash",
            "-c", "(exec myscript.sh)"]`
        arguments:
          items:
            type: string
          type: array
          title: Arguments
          description: Arguments for the Pod's command.
        environment_variables:
          type: object
          title: Environment Variables
          description: Environment variables to inject into k8 pod; Only for custom
            pods.
          default: {}
        volume_mounts:
          additionalProperties:
            $ref: '#/components/schemas/models_templates_tags__VolumeMount'
          type: object
          title: Volume Mounts
          description: 'Key: Volume name. Value: List of strs specifying volume folders/files
            to mount in pod'
          default: {}
        time_to_stop_default:
          type: integer
          title: Time To Stop Default
          description: Default time (sec) for pod to run from instance start. -1 for
            unlimited. 12 hour default.
        time_to_stop_instance:
          type: integer
          title: Time To Stop Instance
          description: Time (sec) for pod to run from instance start. Reset each time
            instance is started. -1 for unlimited. None uses default.
        networking:
          additionalProperties:
            $ref: '#/components/schemas/models_templates_tags__Networking'
          type: object
          title: Networking
          description: 'Networking information. `{"url_suffix": {"protocol": "http"  "tcp",
            "port": int}}`'
          default: {}
        resources:
          allOf:
          - $ref: '#/components/schemas/models_templates_tags__Resources'
          title: Resources
          description: 'Pod resource management `{"cpu_limit": 3000, "mem_limit":
            3000, "cpu_request": 500, "mem_limit": 500, "gpus": 0}`'
          default: {}
        compute_queue:
          type: string
          title: Compute Queue
          description: Queue to run pod in. `default` is the default queue.
          default: default
      additionalProperties: false
      type: object
      title: TemplateTagPodDefinition
    TemplateTagResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/TemplateTag'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: TemplateTagResponse
    TemplateTagsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/TemplateTag'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: TemplateTagsResponse
    TemplatesResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/TemplateResponseModel'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: TemplatesResponse
    UpdatePod:
      properties:
        description:
          type: string
          title: Description
          description: Description of this pod.
          default: ''
        command:
          items:
            type: string
          type: array
          title: Command
          description: Command to run in pod. ex. ["sleep", "5000"] or ["/bin/bash",
            "-c", "(exec myscript.sh)"]
        environment_variables:
          type: object
          title: Environment Variables
          description: Environment variables to inject into k8 pod; Only for custom
            pods.
          default: {}
        status_requested:
          type: string
          title: Status Requested
          description: Status requested by user, `ON`, `OFF`, or `RESTART`.
          default: 'ON'
        volume_mounts:
          additionalProperties:
            $ref: '#/components/schemas/models_pods__VolumeMount'
          type: object
          title: Volume Mounts
          description: 'Key: Volume name. Value: List of strs specifying volume folders/files
            to mount in pod'
          default: {}
        time_to_stop_default:
          type: integer
          title: Time To Stop Default
          description: Default time (sec) for pod to run from instance start. -1 for
            unlimited. 12 hour default.
          default: 43200
        time_to_stop_instance:
          type: integer
          title: Time To Stop Instance
          description: Time (sec) for pod to run from instance start. Reset each time
            instance is started. -1 for unlimited. None uses default.
        networking:
          additionalProperties:
            $ref: '#/components/schemas/models_pods__Networking'
          type: object
          title: Networking
          description: 'Networking information. {"url_suffix": {"protocol": "http"  "tcp",
            "port": int}}'
          default:
            default:
              protocol: http
              port: 5000
        resources:
          allOf:
          - $ref: '#/components/schemas/models_pods__Resources'
          title: Resources
          description: 'Pod resource management {"cpu_limit": 3000, "mem_limit": 3000,
            "cpu_request": 500, "mem_limit": 500, "gpu": 0}'
          default: {}
      additionalProperties: false
      type: object
      title: UpdatePod
      description: Object with fields that users are allowed to specify for the Pod
        class.
    UpdateSnapshot:
      properties:
        description:
          type: string
          title: Description
          description: Description of this snapshot.
          default: ''
        size_limit:
          type: integer
          title: Size Limit
          description: Size in MB to limit snapshot to. We'll start warning if you've
            gone past the limit.
          default: 1024
        cron:
          type: string
          title: Cron
          description: cron bits
          default: ''
        retention_policy:
          type: string
          title: Retention Policy
          description: retention_policy bits
          default: ''
      additionalProperties: false
      type: object
      title: UpdateSnapshot
      description: Object with fields that users are allowed to specify when updating
        the Snapshot class.
    UpdateTemplate:
      properties:
        description:
          type: string
          title: Description
          description: Description of template.
          default: ''
        metatags:
          items:
            type: string
          type: array
          title: Metatags
          description: Metadata tags for additional search/listing functionality for
            the template.
          default: []
        archive_message:
          type: string
          title: Archive Message
          description: If set, metadata message to give users of this template.
          default: ''
      additionalProperties: false
      type: object
      title: UpdateTemplate
      description: Object with fields that users are allowed to specify for the Pod
        class.
    UpdateVolume:
      properties:
        description:
          type: string
          title: Description
          description: Description of this volume.
          default: ''
        size_limit:
          type: integer
          title: Size Limit
          description: Size in MB to limit volume to. We'll start warning if you've
            gone past the limit.
          default: 1024
      additionalProperties: false
      type: object
      title: UpdateVolume
      description: Object with fields that users are allowed to specify when updating
        the Volume class.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
    VolumePermissionsResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/PermissionsModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: VolumePermissionsResponse
    VolumeResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          $ref: '#/components/schemas/VolumeResponseModel'
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: VolumeResponse
    VolumeResponseModel:
      properties:
        volume_id:
          type: string
          title: Volume Id
          description: Name of this volume.
        description:
          type: string
          title: Description
          description: Description of this volume.
          default: ''
        size_limit:
          type: integer
          title: Size Limit
          description: Size in MB to limit volume to. We'll start warning if you've
            gone past the limit.
          default: 1024
        size:
          type: integer
          title: Size
          description: Size of volume currently in MB
          default: 0
        status:
          type: string
          title: Status
          description: Current status of volume.
          default: REQUESTED
        creation_ts:
          type: string
          format: date-time
          title: Creation Ts
          description: Time (UTC) that this volume was created.
        update_ts:
          type: string
          format: date-time
          title: Update Ts
          description: Time (UTC) that this volume was updated.
      additionalProperties: false
      type: object
      required:
      - volume_id
      title: VolumeResponseModel
      description: Response object for Volume class.
    VolumesResponse:
      properties:
        message:
          type: string
          title: Message
        metadata:
          type: object
          title: Metadata
        result:
          items:
            $ref: '#/components/schemas/VolumeResponseModel'
          type: array
          title: Result
        status:
          type: string
          title: Status
        version:
          type: string
          title: Version
      additionalProperties: false
      type: object
      required:
      - message
      - metadata
      - result
      - status
      - version
      title: VolumesResponse
    models_pods__Networking:
      properties:
        protocol:
          type: string
          title: Protocol
          description: Which network protocol to use. `http`, `tcp`, `postgres`, or
            `local_only`. `local_only` is only accessible from within the cluster.
          default: http
        port:
          type: integer
          title: Port
          description: Pod port to expose via networking.url in this networking object.
          default: 5000
        url:
          type: string
          title: Url
          description: URL used to access the port of the pod defined in this networking
            object. Generated by service.
          default: ''
        ip_allow_list:
          items:
            type: string
          type: array
          title: Ip Allow List
          description: List of IPs that are allowed to access this specific pod port.
            If empty, all IPs are allowed. ex. ['127.0.0.1/32', '192.168.1.7']
          default: []
        tapis_auth:
          type: boolean
          title: Tapis Auth
          description: If true, will require Tapis auth to access the pod.
          default: false
        tapis_auth_response_headers:
          additionalProperties:
            type: string
          type: object
          title: Tapis Auth Response Headers
          description: Specification of headers to forward to the pod when using Tapis
            auth.
          default: {}
        tapis_auth_allowed_users:
          items:
            type: string
          type: array
          title: Tapis Auth Allowed Users
          description: List of users allowed to access the pod when using Tapis auth.
            Also accepts basic regex patterns to match against.
          default:
          - '*'
        tapis_auth_return_path:
          type: string
          title: Tapis Auth Return Path
          description: Path to redirect to when accessing the pod via Tapis auth.
          default: /
        tapis_ui_uri:
          type: string
          title: Tapis Ui Uri
          description: Path to redirect to when accessing the pod via Tapis UI.
          default: ''
        tapis_ui_uri_redirect:
          type: boolean
          title: Tapis Ui Uri Redirect
          description: If true, will redirect to the tapis_ui_uri when accessing the
            pod via Tapis UI. Otherwise, just read-only uri.
          default: false
        tapis_ui_uri_description:
          type: string
          title: Tapis Ui Uri Description
          description: Describing where the tapis_ui_uri will redirect to.
          default: ''
      additionalProperties: false
      type: object
      title: Networking
    models_pods__Resources:
      properties:
        cpu_request:
          type: integer
          title: Cpu Request
          description: CPU allocation pod requests at startup. In millicpus (m). 1000
            = 1 cpu.
          default: 250
        cpu_limit:
          type: integer
          title: Cpu Limit
          description: CPU allocation pod is allowed to use. In millicpus (m). 1000
            = 1 cpu.
          default: 2000
        mem_request:
          type: integer
          title: Mem Request
          description: Memory allocation pod requests at startup. In megabytes (Mi)
          default: 256
        mem_limit:
          type: integer
          title: Mem Limit
          description: Memory allocation pod is allowed to use. In megabytes (Mi)
          default: 3072
        gpus:
          type: integer
          title: Gpus
          description: GPU allocation pod is allowed to use. In integers of GPUs.
            (we only have 1 currently ;) )
          default: 0
      additionalProperties: false
      type: object
      title: Resources
    models_pods__VolumeMount:
      properties:
        type:
          type: string
          title: Type
          description: Type of volume to attach.
          default: ''
        mount_path:
          type: string
          title: Mount Path
          description: Path to mount volume to.
          default: /tapis_volume_mount
        sub_path:
          type: string
          title: Sub Path
          description: Path to mount volume to.
          default: ''
      additionalProperties: false
      type: object
      title: VolumeMount
    models_templates_tags__Networking:
      properties:
        protocol:
          type: string
          title: Protocol
          description: Which network protocol to use. `http`, `tcp`, `postgres`, or
            `local_only`. `local_only` is only accessible from within the cluster.
          default: http
        port:
          type: integer
          title: Port
          description: Pod port to expose via networking.url in this networking object.
          default: 5000
        url:
          type: string
          title: Url
          description: URL used to access the port of the pod defined in this networking
            object. Generated by service.
          default: ''
        ip_allow_list:
          items:
            type: string
          type: array
          title: Ip Allow List
          description: List of IPs that are allowed to access this specific pod port.
            If empty, all IPs are allowed. ex. ['127.0.0.1/32', '192.168.1.7']
          default: []
        tapis_auth:
          type: boolean
          title: Tapis Auth
          description: If true, will require Tapis auth to access the pod.
          default: false
        tapis_auth_response_headers:
          additionalProperties:
            type: string
          type: object
          title: Tapis Auth Response Headers
          description: Specification of headers to forward to the pod when using Tapis
            auth.
          default: {}
        tapis_auth_allowed_users:
          items:
            type: string
          type: array
          title: Tapis Auth Allowed Users
          description: List of users allowed to access the pod when using Tapis auth.
          default:
          - '*'
        tapis_auth_return_path:
          type: string
          title: Tapis Auth Return Path
          description: Path to redirect to when accessing the pod via Tapis auth.
          default: /
        tapis_ui_uri:
          type: string
          title: Tapis Ui Uri
          description: Path to redirect to when accessing the pod via Tapis UI.
          default: ''
        tapis_ui_uri_redirect:
          type: boolean
          title: Tapis Ui Uri Redirect
          description: If true, will redirect to the tapis_ui_uri when accessing the
            pod via Tapis UI. Otherwise, just read-only uri.
          default: false
        tapis_ui_uri_description:
          type: string
          title: Tapis Ui Uri Description
          description: Describing where the tapis_ui_uri will redirect to.
          default: ''
      additionalProperties: false
      type: object
      title: Networking
    models_templates_tags__Resources:
      properties:
        cpu_request:
          type: integer
          title: Cpu Request
          description: CPU allocation pod requests at startup. In millicpus (m). 1000
            = 1 cpu.
        cpu_limit:
          type: integer
          title: Cpu Limit
          description: CPU allocation pod is allowed to use. In millicpus (m). 1000
            = 1 cpu.
        mem_request:
          type: integer
          title: Mem Request
          description: Memory allocation pod requests at startup. In megabytes (Mi)
        mem_limit:
          type: integer
          title: Mem Limit
          description: Memory allocation pod is allowed to use. In megabytes (Mi)
        gpus:
          type: integer
          title: Gpus
          description: GPU allocation pod is allowed to use. In integers of GPUs.
            (we only have 1 currently ;) )
      additionalProperties: false
      type: object
      title: Resources
    models_templates_tags__VolumeMount:
      properties:
        type:
          type: string
          title: Type
          description: Type of volume to attach.
          default: ''
        mount_path:
          type: string
          title: Mount Path
          description: Path to mount volume to.
          default: /tapis_volume_mount
        sub_path:
          type: string
          title: Sub Path
          description: Path to mount volume to.
          default: ''
      additionalProperties: false
      type: object
      title: VolumeMount
tags:
- name: Pods
  description: Create and command pods.
- name: Credentials
  description: Manage pod's credentials used.
- name: Logs
  description: Manage pod logs.
- name: Permissions
  description: Manage pod permissions. Grant specific TACC users **READ**, **USER**,
    and **ADMIN** level permissions.
- name: Volumes
  description: Create and manage volumes.
- name: Snapshots
  description: Create and manage snapshots.
openapi: 3.0.1
info:
  title: Tapis Security API
  description: The Tapis Security API provides access to the Tapis Security Kernel authorization and secrets facilities.
  contact:
    name: CICSupport
    email: cicsupport@tacc.utexas.edu
  license:
    name: 3-Clause BSD License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: '0.1'
externalDocs:
  description: Tapis Home
  url: https://tacc-cloud.readthedocs.io/projects/agave/en/latest/
servers:
  - url: http://localhost:8080/v3
    description: Local test environment
    variables: {}
tags:
  - name: role
    description: manage roles and permissions
  - name: user
    description: assign roles and permissions to users
  - name: share
    description: share resources among users
  - name: vault
    description: manage application and user secrets
  - name: general
    description: informational endpoints
paths:
  /security/role/addChild:
    post:
      tags:
        - role
      description: |-
        Add a child role to another role using a request body.  If the child already exists, then the request has no effect and the change count returned is zero. Otherwise, the child is added and the change count is one.

        The user@tenant identity specified in JWT is authorized to make this request only if that user is an administrator or if the user owns both the parent and child roles.
      operationId: addChildRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqAddChildRole'
        required: true
      responses:
        '200':
          description: Child assigned to parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/addPerm:
    post:
      tags:
        - role
      description: |-
        Add a permission to an existing role using a request body.  If the permission already exists, then the request has no effect and the change count returned is zero. Otherwise, the permission is added and the change count is one.

        Permissions are case-sensitive strings that follow the format defined by Apache Shiro (https://shiro.apache.org/permissions.html).  This format defines any number of colon-separated (:) parts, with the possible use of asterisks (*) as wildcards and commas (,) as aggregators.  Here are two example permission strings:

            system:MyTenant:read,write:system1
            system:MyTenant:create,read,write,delete:*

        See the Shiro documentation for further details.  Note that the three reserved characters, [: * ,], cannot appear in the text of any part.  It's the application's responsibility to escape those characters in a manner that is safe in the application's domain.

        ### Extended Permissions
        Tapis extends Shiro permission checking with *path semantics*.  Path semantics allows the last part of pre-configured permissions to be treated as hierarchical path names, such as the paths used in POSIX file systems.  Currently, only permissions that start with *files:* have their last (5th) component configured with path semantics.

        Path semantics treat the extended permission part as the root of the subtree to which the permission is applied recursively.  Grantees assigned the permission will have the permission on the path itself and on all its children.

        As an example, consider a role that's assigned the following permission:

            files:iplantc.org:read:stampede2:/home/bud

        Users granted the role have read permission on the following file system resources on stampede2:

            /home/bud
            /home/bud/
            /home/bud/myfile
            /home/bud/mydir/myfile

        Those users, however, will not have access to /home.

        When an extended permission part ends with a slash, such as /home/bud/, then that part is interpreted as a directory or, more generally, some type of container.  In such cases, the permission applies to the children of the path and to the path as written with a slash.  For instance, for the file permission path /home/bud/, the permission allows access to /home/bud/ and /home/bud/myfile, but not to /home/bud.

        When an extended permission part does not end with a slash, such as /home/bud, then the permission applies to the children of the path and to the path written with or without a trailing slash.  For instance, for the file permission path /home/bud, the permission allows access to /home/bud, /home/bud/ and /home/bud/myfile.

        In the previous examples, we assumed /home/bud was a directory.  If /home/bud is a file (or more generally a leaf), then specifying the permission path /home/bud/ will not work as intended.  Permissions with paths that have trailing slashes should only be used for directories, and they require a trailing slash whenever refering to the root directory.  Permissions that don't have a trailing slash can represent directories or files, and thus are more general.

        Extended permission checking avoids *false capture*.  Whether a path has a trailing slash or not, permission checking will not capture similarly named sibling paths. For example, using the file permission path /home/bud, grantees are allowed access to /home/bud and all its children (if it's a directory), but not to the file /home/buddy.txt nor the directory /home/bud2.

        This request is authorized only if the authenticated user is either the role owner or an administrator.
      operationId: addRolePermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqAddRolePermission'
        required: true
      responses:
        '200':
          description: Permission assigned to role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role:
    get:
      tags:
        - role
      description: |-
        Get the names of all roles in the tenant in alphabetic order.  Future enhancements will include search filtering.

        A valid tenant must be specified as a query parameter.  This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getRoleNames
      parameters:
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of role names returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - role
      description: |-
        Create a role using a request body.  Role names are case sensitive, alpha-numeric strings that can also contain underscores.  Role names must start with an alphbetic character and can be no more than 58 characters in length.  The desciption can be no more than 2048 characters long.  If the role already exists, this request has no effect.

        For the request to be authorized, the requestor must be either an administrator or a service allowed to perform updates in the new role's tenant.
      operationId: createRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateRole'
        required: true
      responses:
        '200':
          description: Role existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '201':
          description: Role created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/{roleName}:
    get:
      tags:
        - role
      description: Get the named role's definition.  A valid tenant must be specified as a query parameter.  This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getRoleByName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Named role returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespRole'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    delete:
      tags:
        - role
      description: |-
        Delete the named role. A valid tenant and user must be specified as query parameters.

        This request is authorized only if the authenticated user is either the role owner or an administrator.
      operationId: deleteRoleByName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Role deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/defaultRole/{user}:
    get:
      tags:
        - role
      description: |+
        Get a user's default role. The default role is implicitly created by the system when needed if it doesn't already exist. No authorization required.

        A user's default role is constructed by prepending '$$' to the user's name.  This implies the maximum length of a user name is 58 since role names are limited to 60 characters.

      operationId: getDefaultUserRole
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The user's default role name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/role/{roleName}/perms:
    get:
      tags:
        - role
      description: |-
        Get the named role's permissions.  By default, all permissions assigned to the role, whether directly and transitively through child roles, are returned.  Set the immediate query parameter to only retrieve permissions directly assigned to the role.  A valid tenant must be specified.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getRolePermissions
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: immediate
          in: query
          schema:
            type: boolean
            default: false
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Named role returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/previewPathPrefix:
    post:
      tags:
        - role
      description: |-
        This read-only endpoint previews the transformations that would take place if the same input was used on a replacePathPrefix POST call. This call is also implemented as a POST so that the same input as used on replacePathPrefix can be used here, but this call changes nothing.

        This endpoint can be used to get an accounting of existing system/path combinations that match the input specification. Such information is useful when trying to duplicate a set of permissions. For example, one may want to copy a file subtree to another location and assign the same permissions to the new subtree as currently exist on the original subtree. One could use  this call to calculate the users that should be granted permission on the new subtree.

        The optional parameters are roleName, oldPrefix and newPrefix. No wildcards are defined for the path prefix parameters.  When roleName is specified then only permissions assigned to that role are considered.

        When the oldPrefix parameter is provided, it's used to filter out permissions whose paths do not begin with the specified string; when not provided, no path prefix filtering occurs.

        When the newPrefix parameter is not provided no new characters are prepended to the new path, effectively just removing the oldPrefix from the new path. When neither oldPrefix nor newPrefix are provided, no path transformation occurs, though system IDs can still be transformed.

        The result object contains an array of transformation objects, each of which contains the unique permission sequence number, the existing permission that matched the search criteria and the new permission if the specified transformations were applied.

        A valid tenant and user must be specified in the request body.  This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: previewPathPrefix
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPreviewPathPrefix'
        required: true
      responses:
        '200':
          description: Path prefixes previewed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPathPrefixes'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removeChild:
    post:
      tags:
        - role
      description: |-
        Remove a child role from a parent role using a request body.  A valid tenant and user must be specified in the request body.

        The user@tenant identity specified in JWT is authorized to make this request only if that user is an administrator or if they own the parent role.
      operationId: removeChildRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemoveChildRole'
        required: true
      responses:
        '200':
          description: Child removed from parent role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removePathPermFromAllRoles:
    post:
      tags:
        - role
      description: |-
        Remove an extended permission from all roles in a tenant using a request body.  The tenant and permission must be specified in the request body.

        Each role in the tenant is searched for the extended permission string and, where found, that permission is removed.  The matching algorithm is string comparison with wildcard semantics on the path component.  This is the same as an exact string match for all parts of the permission specification up to the path part.  A match on the path part, however, occurs when its path is a prefix of a role permission's path.  Consider the following permission specification:

            files:mytenant:read:mysystem:/my/dir

        which will match both of the following role permissions:

            files:mytenant:read:mysystem:/my/dir/subdir/myfile
            files:mytenant:read:mysystem:/my/dir33/yourfile

        Note that a match to the second role permission might be a *false capture* if the intension was to remove all permissions to resources in the /my/dir subtree, but not those in other directories.  To avoid this potential problem, callers can make two calls, one to this endpoint with a permSpec that ends with a slash ("/") and one to the removePermissionFromeAllRoles endpoint with no trailing slash.  The former removes all children from the directory subtree, the latter removes the directory itself.

        Only the Files service is authorized to make this call.
      operationId: removePathPermissionFromAllRoles
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemovePermissionFromAllRoles'
        required: true
      responses:
        '200':
          description: Path permission removed from roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removePermFromAllRoles:
    post:
      tags:
        - role
      description: |-
        Remove a permission from all roles in a tenant using a request body.  The tenant and permission must be specified in the request body.

        Each role in the tenant is searched for the *exact* permission string and, where found, that permission is removed.  The matching algorithm is simple, character by character, string comparison.

        Permissions are not interpreted.  For example, a permission that contains a wildcard (*) will only match a role's permission when the same wildcard is found in the exact same position.  The same rule applies to permission segments with multiple, comma separated components: a match requires the exact same ordering and spacing of components.

        Only services are authorized to make this call.
      operationId: removePermissionFromAllRoles
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemovePermissionFromAllRoles'
        required: true
      responses:
        '200':
          description: Permission removed from roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/removePerm:
    post:
      tags:
        - role
      description: |-
        Remove a permission from a role using a request body.  A valid role, roleTenant and permission must be specified in the request body.

        Only the role owner or administrators are authorized to make this call.
      operationId: removeRolePermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRemoveRolePermission'
        required: true
      responses:
        '200':
          description: Permission removed from role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/replacePathPrefix:
    post:
      tags:
        - role
      description: |-
        Replace the text in a permission specification when its last component defines an *extended path attribute*.  Extended path attributes enhance the standard Shiro matching algorithm with one that treats designated components in a permission specification as a path name, such as a posix file or directory path name.  This request is useful when files or directories have been renamed or moved and their authorizations need to be adjusted.  Consider, for example, permissions that conform to the following specification:

              files:tenantId:op:systemId:path

        By definition, the last component is an extended path attribute whose content can be changed by replacePathPrefix requests.  Specifically, paths that begin with the oldPrefix will have that prefix replaced with the newPrefix value.  Replacement only occurs on permissions that also match the schema and oldSystemId parameter values.  The systemId attribute is required to immediately precede the path attribute, which must be the last attribute.

        Additionally, the oldSystemId is replaced with the newSystemId when a match is found.  If a roleName is provided, then replacement is limited to permissions defined only in that role.  Otherwise, permissions in all roles that meet the other matching criteria will be considered.

        The optional parameters are roleName, oldPrefix and newPrefix. No wildcards are defined for the path prefix parameters.  When roleName is specified then only permissions assigned to that role are considered.

        When the oldPrefix parameter is provided, it's used to filter out permissions whose paths do not begin with the specified string; when not provided, no path prefix filtering occurs.

        When the newPrefix parameter is not provided no new characters are prepended to the new path, effectively just removing the oldPrefix from the new path. When neither oldPrefix nor newPrefix are provided, no path transformation occurs, though system IDs can still be transformed.

        The previewPathPrefix request provides a way to do a dry run using the same input as this request. The preview call calculates the permissions that would change and what their new values would be, but it does not actually change those permissions as replacePathPrefix does.

        The input parameters are passed in the payload of this request.  The response indicates the number of changed permission specifications.

        The path prefix replacement operation is authorized if the user@tenant in the JWT represents a tenant administrator or the Files service.
      operationId: replacePathPrefix
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqReplacePathPrefix'
        required: true
      responses:
        '200':
          description: Path prefixes replaced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/updateDesc/{roleName}:
    post:
      tags:
        - role
      description: |-
        Update an existing role's decription using a request body.  The size limit on a description is 2048 characters.

        This request is authorized if the requestor is the role owner or an administrator.
      operationId: updateRoleDescription
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleDescription'
        required: true
      responses:
        '200':
          description: Role description updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/updateName/{roleName}:
    post:
      tags:
        - role
      description: |-
        Update an existing role's name using a request body.  Role names are case sensitive, alphanumeric strings that can contain underscores but must begin with an alphabetic character.  The limit on role name is 58 characters.

        This request is authorized if the requestor is the role owner or an administrator.
      operationId: updateRoleName
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleName'
        required: true
      responses:
        '200':
          description: Role name updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/role/updateOwner/{roleName}:
    post:
      tags:
        - role
      description: |-
        Update an existing role's owner using a request body. Required parameters in the payload are the *roleTenant*, which is the tenant of named role, and *newOwner*, which is the user to which role ownership is being transferred. The *newTenant* payload parameter is optional and only needed when the new owner resides in a different tenant than that of the current owner.

        This request is authorized if the requestor is the role owner or an administrator. If a new tenant is specified, then the requestor must also be allowed to act in the new tenant.
      operationId: updateRoleOwner
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateRoleOwner'
        required: true
      responses:
        '200':
          description: Role owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/healthcheck:
    get:
      tags:
        - general
      description: Lightwieght health check for liveness. No authorization required.
      operationId: checkHealth
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
  /security/ready:
    get:
      tags:
        - general
      description: Lightwieght readiness check. No authorization required.
      operationId: ready
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
      deprecated: true
  /security/readycheck:
    get:
      tags:
        - general
      description: Lightwieght readiness check. No authorization required.
      operationId: readycheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
        '503':
          description: Service unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespProbe'
  /security/hello:
    get:
      tags:
        - general
      description: Logged connectivity test. No authorization required.
      operationId: sayHello
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
      deprecated: true
  /security/share:
    get:
      tags:
        - share
      description: |-
        Get a filtered list of shared resources. Query parameters are used to restrict the returned shares. The *grantor*, *grantee*, *tenant*, *resourceType*, *resourceId1*, *resourceId2*, *privilege*, *createdBy* and *createdByTenant* parameters are used to match values in shared resource objects. Other query parameters are used to control how matching is performed.  The *tenant* parameter is required.

        If resourceId1 or resourceId2 end with a percent sign (%) wildcard then the search results will include all shares with IDs that begin with the same prefix string.  Percent signs embedded elsewhere in the string are *not* recognized as wildcards.

        Specifying the *id* parameter causes the other filtering parameters to be ignored. The result list will contain at most one entry.

        The *includePublicGrantees* flag, true by default, controls whether resources granted to **~public** and **~public_no_authn** are also considered for inclusion in the result list.

        The *requireNullId2* flag, true by default, applies only when no *resourceId2* value is provided. When set, only shared resources that do not specify a *resourceId2* value are considered for inclusion in the result list. By setting this flag to false the caller indicates a "don't care" designation on the *resourceId2* value, allowing shares with any *resourceId2* value to be considered for inclusion in the result list.

        For the request to be authorized, the requestor must be a Tapis service.
      operationId: getShares
      parameters:
        - name: grantor
          in: query
          schema:
            type: string
            default: ''
        - name: grantee
          in: query
          schema:
            type: string
            default: ''
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: resourceType
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId1
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId2
          in: query
          schema:
            type: string
            default: ''
        - name: privilege
          in: query
          schema:
            type: string
            default: ''
        - name: createdBy
          in: query
          schema:
            type: string
            default: ''
        - name: createdByTenant
          in: query
          schema:
            type: string
            default: ''
        - name: includePublicGrantees
          in: query
          schema:
            type: boolean
            default: true
        - name: requireNullId2
          in: query
          schema:
            type: boolean
            default: true
        - name: id
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of shares returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - share
      description: |-
        Share a Tapis resource using a request body.  Shared resources allow services to indicate that other services should relax their Tapis authorization checking in certain, well-defined contexts.

        Grantees can be given shared access to a resource on an individual basis or by using the public granting mechanism. Grants to the distinguished **~public** and **~public_no_authn** pseudo-grantees allow access to a resource to authenticated users or to any user, respectively.

        The payload for this request includes these values, with all except *resourceId2* required:

           - grantor
           - grantee
           - tenant
           - resourceType
           - resourceId1
           - resourceId2
           - privilege

        If the share already exists, then this call has no effect. For the request to be authorized, the requestor must be a Tapis service.
      operationId: shareResource
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareResource'
        required: true
      responses:
        '200':
          description: Share existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '201':
          description: Share created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    delete:
      tags:
        - share
      description: |-
        Delete a single shared resource by unique attribute selection. The *grantor*, *grantee*, *tenant*, *resourceType*, *resourceId1* and *privilege* parameters are mandatory; *resourceId2* is optional and assumed to be NULL if not provided.

        The shared resource is deleted only if it's in the tenant specified in the required *tenant* query parameter. The calling service must also be the same as the orginal service that granted the share.

        This call is idempotent.  If no share satisfies the above constraints, a success response code is returned and the indicated number of changes is set to zero.  When a share is deleted, the indicated number of changes is one.

        For the request to be authorized, the requestor must be the Tapis service that originally granted the share.
      operationId: deleteShare
      parameters:
        - name: grantor
          in: query
          schema:
            type: string
            default: ''
        - name: grantee
          in: query
          schema:
            type: string
            default: ''
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: resourceType
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId1
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId2
          in: query
          schema:
            type: string
            default: ''
        - name: privilege
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share deleted if it exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/share/{id}:
    get:
      tags:
        - share
      description: |-
        Get a shared resource by ID. The shared resource is deleted only if it's in the tenant specified in the required *tenant* query parameter.

        For the request to be authorized, the requestor must be a Tapis service.
      operationId: getShare
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShare'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    delete:
      tags:
        - share
      description: |-
        Delete a shared resource by ID. The shared resource is deleted only if it's in the tenant specified in the required *tenant* query parameter. The calling service must also be the same as the orginal service that created the share.

        This call is idempotent.  If no share satisfies the above constraints, a success response code is returned and the indicated number of changes is set to zero.  When a share is deleted, the indicated number of changes is one.

        For the request to be authorized, the requestor must be the Tapis service that originally granted the share.
      operationId: deleteShareById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share deleted if it exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/share/hasPrivilege:
    get:
      tags:
        - share
      description: |-
        Determine if a user has been granted a specific privilege on a specific resource. The *grantee*, *tenant*, *resourceType*, *resourceId1* and *privilege* parameters are mandatory; *resourceId2* is optional and assumed to be NULL if not provided. Privilege matching is performed for the grantee and tenant specified in the query parameters.

        True is returned if the user has been granted the privilege, false otherwise.

        By default, both authenticated and unauthenticated public privileges are included in the calculation. For example, if a privilege on a resource has been granted to all authenticated users in a tenant (~public), then true will be returned for all users in the tenant.

        The *excludePublic* and *excludePublicNoAuthn* parameters can be used to change the default handling of public grants. Either or both types of public grants can be excluded.

        For the request to be authorized, the requestor must be a Tapis service.
      operationId: hasPrivilege
      parameters:
        - name: grantee
          in: query
          schema:
            type: string
            default: ''
        - name: tenant
          in: query
          schema:
            type: string
            default: ''
        - name: resourceType
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId1
          in: query
          schema:
            type: string
            default: ''
        - name: resourceId2
          in: query
          schema:
            type: string
            default: ''
        - name: privilege
          in: query
          schema:
            type: string
            default: ''
        - name: excludePublic
          in: query
          schema:
            type: boolean
            default: false
        - name: excludePublicNoAuthn
          in: query
          schema:
            type: boolean
            default: false
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A share returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/admins/{tenant}:
    get:
      tags:
        - user
      description: |-
        Get all users assigned the tenant administrator role ($!tenant_admin).

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getAdmins
      parameters:
        - name: tenant
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of administrator users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/defaultRole/{user}:
    get:
      tags:
        - user
      description: |-
        Get a user's default role. The default role is implicitly created by the system when needed if it doesn't already exist. No authorization required.

        A user's default role is constructed by prepending '$$' to the user's name.  This implies the maximum length of a user name is 58 since role names are limited to 60 characters.
      operationId: getDefaultUserRole_1
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The user's default role name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  /security/user:
    get:
      tags:
        - user
      description: |-
        Get the names of all users in the tenant that have been granted a role or permission.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUserNames
      parameters:
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of user names.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/perms/{user}:
    get:
      tags:
        - user
      description: |-
        Get the permissions assigned to a user in a tenant, including those assigned transively.  The result list can be optionally filtered by the one or both of the query parameters: implies and impliedBy.

        When implies is set, the filter _implies_ each entry in the result set. When impliedBy is set, each entry in the result set is _implied by_ the filter. Below are some examples.

        Consider a user that is assigned these permissions:

            stream:dev:read:project1
            stream:dev:read,write:project1
            stream:dev:read,write,exec:project1

        **Using the *implies* Query Parameter**

        When _implies=stream:dev:*:project1_, this endpoint returns:

            stream:dev:read:project1
            stream:dev:read,write:project1
            stream:dev:read,write,exec:project1

        When _implies=stream:dev:write:project1_, this endpoint returns an empty list.

        **Using the *impliedBy* Query Parameter**

        When _impliedBy=stream:dev:*:project1_, this endpoint returns an empty list.

        When _impliedBy=stream:dev:write:project1_, this endpoint returns:

            stream:dev:read,write:project1
            stream:dev:read,write,exec:project1

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUserPerms
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: implies
          in: query
          schema:
            type: string
            default: ''
        - name: impliedBy
          in: query
          schema:
            type: string
            default: ''
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of permissions assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/roles/{user}:
    get:
      tags:
        - user
      description: |-
        Get the roles assigned to a user in the specified tenant, including those assigned transively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUserRoles
      parameters:
        - name: user
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of roles names assigned to the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/withPermission/{permSpec}:
    get:
      tags:
        - user
      description: |-
        Get all users in a tenant assigned a permission.  The permSpec parameter is a permission specification that uses colons as separators, the asterisk as a wildcard character and commas to define lists.  Here are examples of permission specifications:

            system:mytenant:read:mysystem
            system:mytenant:*:mysystem
            system:mytenant
            files:mytenant:read,write:mysystems
        This method recognizes the percent sign (%) as a string wildcard only in the context of database searching.  If a percent sign (%) appears in the permSpec it is interpreted as a zero or more character wildcard.  For example, the following specification would match the first three of the above example specifications but not the fourth:

            system:mytenant:%

        The wildcard character cannot appear as the first character in the permSpec.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUsersWithPermission
      parameters:
        - name: permSpec
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of users assigned a permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/withRole/{roleName}:
    get:
      tags:
        - user
      description: |-
        Get all users assigned a role.  The role must exist in the tenant.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: getUsersWithRole
      parameters:
        - name: roleName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Sorted list of users assigned a role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantAdminRole:
    post:
      tags:
        - user
      description: Grant a user the tenant administrator role.  A valid tenant and user must be specified in the request body.  The user specified in the JWT must be an administrator in the tenant specified in the request body.
      operationId: grantAdminRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantAdminRole'
        required: true
      responses:
        '200':
          description: Role assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantRole:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified role.  A valid tenant and user must be specified in the request body.

        This request is authorized only if the requestor is the role owner or an administrator.  The user and the role must be in the same tenant.
      operationId: grantRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantUserRole'
        required: true
      responses:
        '200':
          description: Role assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Named role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantRoleWithPerm:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified role containing the specified permission.  This compound request first adds the permission to the role if it is not already a member of the role and then assigns the role to the user.  The change count returned can range from zero to two depending on how many insertions were actually required.

        Only the role owner or an administrator is authorized to make this request.  The user and the role must be in the same tenant.
      operationId: grantRoleWithPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantUserRoleWithPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespName'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/grantUserPermission:
    post:
      tags:
        - user
      description: |-
        Grant a user the specified permission by assigning that permission to to the user's default role.  If the user's default role does not exist,this request will create that role and grant it to the user before assigning the permission to the role.

        A user's default role name is discoverable by calling either of the user/defaultRole or role/defaultRole endpoints.

        The change count returned can range from zero to three depending on how many insertions and updates were actually required

        The caller must be an administrator or service allowed to perform updates in the user's tenant.
      operationId: grantUserPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGrantUserPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/hasRole:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned the specified role, either directly or transitively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: hasRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserHasRole'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/hasRoleAll:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned all of the roles specified in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: hasRoleAll
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/hasRoleAny:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned any of the roles specified in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: hasRoleAny
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserHasRoleMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isAdmin:
    post:
      tags:
        - user
      description: |-
        Check whether a user in a tenant has been assigned the tenant administrator role, either directly or transitively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isAdmin
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsAdmin'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isPermitted:
    post:
      tags:
        - user
      description: |-
        Check whether specified permission matches a permission assigned to the user, either directly or transitively.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isPermitted
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsPermitted'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isPermittedAll:
    post:
      tags:
        - user
      description: |-
        Check whether a user's permissions satisfy all of the permission specifications contained in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isPermittedAll
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/isPermittedAny:
    post:
      tags:
        - user
      description: |-
        Check whether a user's permissions satisfy any of the permission specifications contained in the request body.

        This request is authorized if the requestor is a user that has access to the specified tenant or if the requestor is a service.
      operationId: isPermittedAny
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUserIsPermittedMulti'
        required: true
      responses:
        '200':
          description: Check completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/revokeAdminRole:
    post:
      tags:
        - user
      description: |-
        Revoke the previously granted tenant administrator role from a user. No action is taken if the user is not currently assigned the role (the request is idempotent).  The request will not be honored if revoking the role would leave the tenant with no administrator.

        The user specified in the JWT must themselves be an administrator and a valid tenant and user must be specified in the request body.
      operationId: revokeAdminRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRevokeAdminRole'
        required: true
      responses:
        '200':
          description: Role removed from user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/revokeUserPermission:
    post:
      tags:
        - user
      description: |-
        Revoke the specified permission from the user's default role. A user's default role is constructed by prepending '$$' to the user's name. Default roles are created on demand. If the role does not exist when this method is called no error is reported and no changes occur.

        The change count returned can be zero or one depending on how many permissions were revoked.

        A valid tenant and user must be specified in the request body.  The caller must be an administrator, a service or the user themselves.
      operationId: revokeUserPermission
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRevokeUserPermission'
        required: true
      responses:
        '200':
          description: Permission assigned to user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/user/revokeUserRole:
    post:
      tags:
        - user
      description: |-
        Revoke a previously granted role from a user. No action is taken if the user is not currently assigned the role. This request is idempotent.

        This request is authorized only if the requestor is the role owner or an administrator.
      operationId: revokeUserRole
      parameters:
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRevokeUserRole'
        required: true
      responses:
        '200':
          description: Role removed from user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/delete/{secretType}/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Soft delete one or more versions of a secret. Each version can be deleted individually or as part of a group specified in the input array. Deletion can be reversed using the *secret/undelete/{secretName}* endpoint, which make this a _soft_ deletion operation.

        The input versions array is interpreted as follows:

           * [-] - empty = delete all versions
           * [0] - zero = delete only the latest version
           * [1, 3, ...] - list = delete the specified versions

        A valid tenant and user must also be specified in the body.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: deleteSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqVersions'
        required: true
      responses:
        '200':
          description: Secret deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespVersions'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Secret not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/destroy/{secretType}/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Destroy one or more versions of a secret. Destroy implements a hard delete which delete that cannot be undone. It does not, however, remove any metadata associated with the secret.

        The input versions array is interpreted as follows:

           * [-] - empty = destroy all versions
           * [0] - zero = destroy only the latest version
           * [1, 3, ...] - list = destroy the specified versions

        A valid tenant and user must be specified in the body.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: destroySecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqVersions'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespVersions'
        '204':
          description: No content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/destroy/meta/{secretType}/{secretName}:
    delete:
      tags:
        - vault
      description: |-
        Erase all traces of a secret: its key, all versions of its value and all its metadata. Specifying a folder erases all secrets in that folder.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: destroySecretMeta
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secret completely removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/list/meta/{secretType}:
    get:
      tags:
        - vault
      description: |-
        List the secret names at the specified path. The path must represent a folder, not an actual secret name. If the path does not have a trailing slash one will be inserted. Secret names should not encode private information.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the secret name.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* path parameter and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: listSecretMeta
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secrets listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretList'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/{secretType}/{secretName}:
    get:
      tags:
        - vault
      description: |-
        Read a versioned secret. By default, the latest version of the secret is read. If the *version* query parameter is specified then that version of the secret is read.  The *version* parameter should be passed as an integer with zero indicating the latest version of the secret. A NOT FOUND status code is returned if the secret version does not exist or if it's deleted or destroyed.

        The response object includes the map of zero or more key/value pairs and metadata that describes the secret. The metadata includes which version of the secret was returned.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: readSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: version
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecret'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
    post:
      tags:
        - vault
      description: |-
        Create or update a secret. The JSON payload contains a required *data* object and an optional *options* object.  It also contains the required tenant and user fields.

        The *data* object is a JSON object that contains one or more key/value pairs in which both the key and value are strings. These are the individual secrets that are saved under the path name. The secrets are automatically versioned, which allows a pre-configured number of past secret values to be accessible even after new values are assigned. See the various GET operations for details on how to access different aspects of secrets.

        NOTE: The *cas* option is currently ignored but documented here for future reference.

        The *options* object can contain a *cas* key and with an integer value that represents a secret version.  CAS stands for check-and-set and will check an existing secret's version before updating.  If cas is not set the write will be always be allowed. If set to 0, a write will only be allowed if the key doesn’t exist. If the index is greater than zero, then the write will only be allowed if the key’s current version matches the version specified in the cas parameter.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service

        ### Generating Secrets
        Passwords and public/private key pairs appropriate for Tapis use can be generated as part of this secret write call.  To direct SK to create a secret, assign the special value `<generate-secret>` to a key.  When SK detects this value, it generates a password or key pair depending on context, and replaces the `<generate-secret>` text with the generated secret.  In the case of a key pair, both the public and private keys are saved.

        Key pairs are always generated for secrets of type JWTSigning, while passwords are generated for all other secret types unless the key is named *privateKey*.

        To generate a key pair, insert the following key/value pair into the payload's data map:

            key="privateKey", value="<generate-secret>"

        When the key pair is generated, the above key/value item is replaced by these two key/value pairs:

            key="privateKey", value=<private key in pem format>
            key="publicKey",  value=<public key in pem format>

        In non-JWTSigning secret types, passwords are generated whenever the following key/value pair is encountered in the payload's data map:

            key=<name other than privateKey>, value="<generate-secret>"

        The generated password simply replaces the item's value and the key name is left unchanged.
      operationId: writeSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqWriteSecret'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretMeta'
        '204':
          description: No content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/read/meta/{secretType}/{secretName}:
    get:
      tags:
        - vault
      description: |-
        List a secret's metadata including its version information. The input parameter must be a secret name, not a folder. The result includes which version of the secret is the latest.

        A valid tenant and user must be specified as query parameters.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: readSecretMeta
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: tenant
          in: query
          schema:
            type: string
        - name: user
          in: query
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Secret read.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretVersionMetadata'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/undelete/{secretType}/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Restore one or more versions of a secret that have previously been deleted. This endpoint undoes soft deletions performed using the *secret/delete/{secretType}/{secretName}* endpoint.

        The input versions array is interpreted as follows:

           * [-] - empty = undelete all versions
           * [0] - zero = undelete only the latest version
           * [1, 3, ...] - list = undelete the specified versions

        A valid tenant and user must be specified in the body.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        A secret is assigned a path name constructed from the *secretType* and *secretName* path parameters and, optionally, from query parameters determined by the *secretType*. Each *secretType* determines a specific transformation from the url path to a path in the vault.  The *secretType* may require certain query parameters to be present on the request in order to construct the vault path.  See the next section for details.

        ### Secret Types
        The list below documents each *secretType* and their applicable query parameters. Highlighted parameter names indicate required parameters. When present, default values are listed first and also highlighted.

          - **system**
            - *sysid*: the unique system id
            - *sysuser*: the accessing user (except when keytype=cert)
            - keytype: *sshkey* | password | accesskey | token | tmskey | cert
          - **dbcred**
            - *dbhost*:  the DBMS hostname, IP address or alias
            - *dbname*:  the database name or alias
            - *dbservice*: service name
          - **jwtsigning** - *no query parameters*
          - **user** - *no query parameters*
          - **service** - *no query parameters*

        ### Authorization
        Requestors are authorized based on the secret type specified in the URL path.  The following authorizations are enforced:

        - system: limited to the systems service
        - dbcred: any service
        - jwtsigning: limited to the tokens service
        - user: any user
        - service: any service
      operationId: undeleteSecret
      parameters:
        - name: secretType
          in: path
          required: true
          schema:
            type: string
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
        - name: sysid
          in: query
          schema:
            type: string
        - name: sysuser
          in: query
          schema:
            type: string
        - name: keytype
          in: query
          schema:
            type: string
            default: sshkey
        - name: dbhost
          in: query
          schema:
            type: string
        - name: dbname
          in: query
          schema:
            type: string
        - name: dbservice
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqVersions'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespVersions'
        '204':
          description: No content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
  /security/vault/secret/validateServicePassword/{secretName}:
    post:
      tags:
        - vault
      description: |-
        Validate a service's password. The JSON payload contains the password that needs to be validated against the password stored in the vault for the service specifiedin the X-Tapis-User header. The secret name is the path under whichthe password was stored.

        A valid tenant and user must also be specified in the payload.

        ### Naming Secrets
        Secrets can be arranged hierarchically by using the "+" characters in the *secretName*.  These characters will be converted to slashes upon receipt, allowing secrets to be arranged in folders.

        Only services can make this request.
      operationId: validateServicePassword
      parameters:
        - name: secretName
          in: path
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqValidateServicePwd'
        required: true
      responses:
        '200':
          description: Secret written.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespAuthorized'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
      security:
        - TapisJWT: []
components:
  schemas:
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    ResultMetadata:
      type: object
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: object
    RespName:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultName'
    ResultName:
      type: object
      properties:
        name:
          type: string
    ReqAddChildRole:
      type: object
      properties:
        roleTenant:
          type: string
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqAddRolePermission:
      type: object
      properties:
        roleTenant:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    ReqCreateRole:
      type: object
      properties:
        roleTenant:
          type: string
        roleName:
          type: string
        description:
          type: string
    RespRole:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkRole'
    SkRole:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        ownerTenant:
          type: string
        created:
          type: string
        createdby:
          type: string
        createdbyTenant:
          type: string
        updated:
          type: string
        updatedby:
          type: string
        updatedbyTenant:
          type: string
        hasChildren:
          type: boolean
          writeOnly: true
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespPathPrefixes:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            $ref: '#/components/schemas/Transformation'
    Transformation:
      type: object
      properties:
        permId:
          type: integer
          format: int32
        oldPerm:
          type: string
        newPerm:
          type: string
    ReqPreviewPathPrefix:
      type: object
      properties:
        tenant:
          type: string
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    ReqRemoveChildRole:
      type: object
      properties:
        roleTenant:
          type: string
        parentRoleName:
          type: string
        childRoleName:
          type: string
    ReqRemovePermissionFromAllRoles:
      type: object
      properties:
        tenant:
          type: string
        permSpec:
          type: string
    ReqRemoveRolePermission:
      type: object
      properties:
        roleTenant:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    ReqReplacePathPrefix:
      type: object
      properties:
        tenant:
          type: string
        schema:
          type: string
        roleName:
          type: string
        oldSystemId:
          type: string
        newSystemId:
          type: string
        oldPrefix:
          type: string
        newPrefix:
          type: string
    ReqUpdateRoleDescription:
      type: object
      properties:
        roleTenant:
          type: string
        newDescription:
          type: string
    ReqUpdateRoleName:
      type: object
      properties:
        roleTenant:
          type: string
        newRoleName:
          type: string
    ReqUpdateRoleOwner:
      type: object
      properties:
        roleTenant:
          type: string
        newOwner:
          type: string
        newTenant:
          type: string
    RespProbe:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkProbe'
    SkProbe:
      type: object
      properties:
        checkNum:
          type: integer
          format: int64
    RespShare:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkShare'
    SkShare:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        grantor:
          type: string
        grantee:
          type: string
        resourceType:
          type: string
        resourceId1:
          type: string
        resourceId2:
          type: string
        privilege:
          type: string
        created:
          type: string
          format: date-time
        createdBy:
          type: string
        createdByTenant:
          type: string
    RespShareList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkShareList'
    SkShareList:
      type: object
      properties:
        shares:
          type: array
          items:
            $ref: '#/components/schemas/SkShare'
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultBoolean'
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    ReqShareResource:
      type: object
      properties:
        grantor:
          type: string
        grantee:
          type: string
        tenant:
          type: string
        resourceType:
          type: string
        resourceId1:
          type: string
        resourceId2:
          type: string
        privilege:
          type: string
    ReqGrantAdminRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
    ReqGrantUserRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
    ReqGrantUserRoleWithPermission:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
        permSpec:
          type: string
    ReqGrantUserPermission:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpec:
          type: string
    RespAuthorized:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/ResultAuthorized'
    ResultAuthorized:
      type: object
      properties:
        isAuthorized:
          type: boolean
    ReqUserHasRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
        orAdmin:
          type: boolean
    ReqUserHasRoleMulti:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleNames:
          type: array
          items:
            type: string
        orAdmin:
          type: boolean
    ReqUserIsAdmin:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
    ReqUserIsPermitted:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpec:
          type: string
        orAdmin:
          type: boolean
    ReqUserIsPermittedMulti:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpecs:
          type: array
          items:
            type: string
        orAdmin:
          type: boolean
    ReqRevokeAdminRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
    ReqRevokeUserPermission:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        permSpec:
          type: string
    ReqRevokeUserRole:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        roleName:
          type: string
    RespVersions:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          type: array
          items:
            type: integer
            format: int32
    ReqVersions:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        versions:
          type: array
          items:
            type: integer
            format: int32
    RespSecretList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecretList'
    SkSecretList:
      type: object
      properties:
        secretPath:
          type: string
        keys:
          type: array
          items:
            type: string
    RespSecret:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecret'
    SkSecret:
      type: object
      properties:
        secretMap:
          type: object
          additionalProperties:
            type: string
        metadata:
          $ref: '#/components/schemas/SkSecretMetadata'
    SkSecretMetadata:
      type: object
      properties:
        created_time:
          type: string
        deletion_time:
          type: string
        destroyed:
          type: boolean
        version:
          type: integer
          format: int32
    RespSecretVersionMetadata:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecretVersionMetadata'
    SkSecretVersion:
      type: object
      properties:
        version:
          type: integer
          format: int32
        created_time:
          type: string
        deletion_time:
          type: string
        destroyed:
          type: boolean
    SkSecretVersionMetadata:
      type: object
      properties:
        created_time:
          type: string
        current_version:
          type: integer
          format: int32
        max_versions:
          type: integer
          format: int32
        oldest_version:
          type: integer
          format: int32
        updated_time:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/SkSecretVersion'
    ReqValidateServicePwd:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        password:
          type: string
    RespSecretMeta:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        metadata:
          $ref: '#/components/schemas/ResultMetadata'
        result:
          $ref: '#/components/schemas/SkSecretMetadata'
    Options:
      type: object
      properties:
        cas:
          type: integer
          format: int32
    ReqWriteSecret:
      type: object
      properties:
        tenant:
          type: string
        user:
          type: string
        options:
          $ref: '#/components/schemas/Options'
        data:
          type: object
          additionalProperties:
            type: string
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
openapi: 3.0.0

info:
  title: "Streams API"
  description: "Manage Tapis Streams API."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Streams API"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/streams-api"

servers:
  - url: http://localhost:5000
    description: Local Development
  - url: https://dev.develop.tapis.io
    description: Develop Instance

paths:
  ### Begin of Hello
  /v3/streams/hello:
    get:
      tags:
        - Hello
      summary: Say Hello
      description: Say Hello
      operationId: hello
      x-swagger-router-controller: connexContr
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: string
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Hello

  ### Begin of Ready
  /v3/streams/ready:
    get:
      tags:
        - Ready
      summary: Check readiness of InfluxDB, Chords and Kapacitor
      description: Readiness check
      operationId: ready
      x-swagger-router-controller: connexContr
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: string
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Ready

  ### Begin of Healthcheck
  /v3/streams/healthcheck:
    get:
      tags:
        - Healthcheck
      summary: Healthcheck
      description: Checks health of meta, kapacitor, influx and chords
      operationId: healthcheck
      x-swagger-router-controller: connexContr
      parameters:
        - name: tenant
          in: query
          description: Tenant id to check healthcheck
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: string
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Healthcheck

  ### Begin of Projects
  /v3/streams/projects:
    get:
      tags:
        - Projects
      summary: List projects.
      description: List projects.
      operationId: list_projects
      x-swagger-router-controller: connexContr
      parameters:
        - name: query
          in: query
          description: a formated query string for sites.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Projects
      summary: Create a project.
      description: Create a project.
      operationId: create_project
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProject"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Project"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/projects/{project_id}:
    get:
      tags:
        - Projects
      summary: Get project details.
      description: Get project details.
      operationId: get_project
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Project"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Projects
      summary: Update a project
      description: Update a project
      operationId: update_project
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProject"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Project"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Projects
      summary: Delete a project
      description: Delete a project
      operationId: delete_project
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Project"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Projects

  ### Begin of Sites
  /v3/streams/projects/{project_id}/sites:
    get:
      tags:
        - Sites
      summary: List sites.
      description: List sites.
      operationId: list_sites
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: a formated query string for sites.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Site"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Sites
      summary: Create a site. (single or bulk)
      description: Create a site. (single or bulk)
      operationId: create_site
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSiteRequest"
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Site"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/projects/{project_id}/sites/{site_id}:
    get:
      tags:
        - Sites
      summary: Get site details.
      description: Get site details.
      operationId: get_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Site"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Sites
      summary: Update a site
      description: Update a site
      operationId: update_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSite"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Site"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Sites
      summary: Delete a site
      description: Delete a site
      operationId: delete_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Site Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Site"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Site not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Sites

  ### Begin of Instruments
  /v3/streams/projects/{project_id}/sites/{site_id}/instruments:
    get:
      tags:
        - Instruments
      summary: List instruments
      description: List instruments
      operationId: list_instruments
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: a formated query string for instruments.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list
          schema:
            type: integer
      responses:
        "200":
          description: A list of instruments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Instrument"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Instruments
      summary: Create instruments (single or bulk)
      description: Create instruments (single or bulk)
      operationId: create_instrument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInstRequest"
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Instrument"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/projects/{project_id}/sites/{site_id}/instruments/{inst_id}:
    get:
      tags:
        - Instruments
      summary: Get instrument details
      description: Get instrument details
      operationId: get_instrument
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Instrument"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Instrument not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Instruments
      summary: Update an instrument
      description: Update an instrument
      operationId: update_instrument
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInst"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Instrument"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Instrument not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Instruments
      summary: Delete an instrument
      description: Delete an instrument
      operationId: delete_instrument
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Instrument"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Instrument not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Instruments

  ### Begin of Variables
  /v3/streams/projects/{project_id}/sites/{site_id}/instruments/{inst_id}/variables:
    get:
      tags:
        - Variables
      summary: List variables.
      description: List variables.
      operationId: list_variables
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: a formated query string for variables.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Variable"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Variables
      summary: Create variable (single or bulk).
      description: Create variable (single or bulk).
      operationId: create_variable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewVarRequest"
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Variable"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/projects/{project_id}/sites/{site_id}/instruments/{inst_id}/variables/{var_id}:
    get:
      tags:
        - Variables
      summary: Get variable details
      description: Get details of a specific variable by its id
      operationId: get_variable
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
        - name: var_id
          in: path
          description: User provided, unique identifier within in the Instrument name space. will be used as the chords shortname
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Variable"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Variable not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Variables
      summary: Update a variable
      description: Update a variable
      operationId: update_variable
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
        - name: var_id
          in: path
          description: User provided, unique identifier within in the Instrument name space. will be used as the chords shortname
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateVariable"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Variable"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Variable not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Variables
      summary: Delete a variable
      description: Delete a variable
      operationId: delete_variable
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: User uniquely defined ID for site.
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: User uniquely defined ID for instrument.
          required: true
          schema:
            type: string
        - name: var_id
          in: path
          description: User provided, unique identifier within in the Instrument name space. will be used as the chords shortname
          required: true
          schema:
            type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Variable"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Variable not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Variables

  ### Begin of Measurements
  /v3/streams/measurements:
    post:
      tags:
        - Measurements
      summary: Create a measurement.
      description: Create a measurement.
      operationId: create_measurement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMeasurement"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Measurements"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/measurements/{inst_id}:
    get:
      tags:
        - Measurements
      summary: List measurements when only inst_id is provided
      description: Download measurements
      operationId: download_measurements
      parameters:
        - name: inst_id
          in: path
          description: Unique id of instruments
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: a formated query string for measurements.
          schema:
            type: string
        - name: var_ids
          in: query
          description: a comma seperated list of variable ids
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
        - name: start_date
          in: query
          description: start date of measurements
          schema:
            type: string
        - name: end_date
          in: query
          description: end date of measurements
          schema:
            type: string
        - name: with_metadata
          in: query
          description: if to include metadata with json format - defaults to false
          schema:
            type: boolean
        - name: format
          in: query
          description: json or csv download format
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Measurements"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/projects/{project_id}/sites/{site_id}/instruments/{inst_id}/measurements:
    get:
      tags:
        - Measurements
      summary: List measurements.
      description: List measurements.
      operationId: list_measurements
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
        - name: site_id
          in: path
          description: Site ID generated by CHORDS
          required: true
          schema:
            type: string
        - name: inst_id
          in: path
          description: Instrument ID generated by CHORDS
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: a formated query string for measurements.
          schema:
            type: string
        - name: var_ids
          in: query
          description: a comma seperated list of variable ids
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
        - name: start_date
          in: query
          description: start date of measurements
          schema:
            type: string
        - name: end_date
          in: query
          description: end date of measurements
          schema:
            type: string
        - name: geojson
          in: query
          description: geojson polygon to spatial search
          schema:
            type: object
        - name: format
          in: query
          description: json or csv download format
          schema:
            type: string
        - name: with_metadata
          in: query
          description: if to include metadata with json format- defaults to false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Measurements"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Measurements

  ### begin of Ontology
  /v3/streams/ontologies:
    get:
      tags:
        - Ontologies
      summary: List ontologies.
      description: List ontologies.
      operationId: list_ontologies
      parameters:
        - name: query
          in: query
          description: a formated query string for ontology label.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ontology"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Ontologies
      summary: Add an ontology .
      description: Add an ontology .
      operationId: add_ontology
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOntology"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Ontology"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/ontologies/{onto_id}:
    get:
      tags:
        - Ontologies
      summary: Get ontology details.
      description: Get ontology details.
      operationId: get_ontology
      parameters:
        - name: onto_id
          in: path
          description: Unique ID of ontology generated by Tapis
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Ontology"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Ontologies
      summary: Update an ontology
      description: Update an ontology
      operationId: update_ontology
      parameters:
        - name: onto_id
          in: path
          description: Unique ID of ontology generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOntology"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Ontology"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Ontologies
      summary: Delete an ontology
      description: Delete an ontology
      operationId: delete_ontology
      parameters:
        - name: onto_id
          in: path
          description: Unique ID of ontology generated by Tapis
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ontology Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Ontology"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Project not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Ontology

  ### Begin of Channels
  /v3/streams/channels:
    get:
      tags:
        - Channels
      summary: List channels.
      description: List channels.
      operationId: list_channels
      x-swagger-router-controller: connexContr
      parameters:
        - name: query
          in: query
          description: a formated query string for channel.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Channel"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Channels
      summary: Create channels.
      description: Create channels.
      operationId: create_channels
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewChannel"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Channel"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/channels/{channel_id}:
    get:
      tags:
        - Channels
      summary: Get channels details
      description: Get details of a specific channel by its id
      operationId: get_channel
      parameters:
        - name: channel_id
          in: path
          description: Unique channel id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Channel"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Channel not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Channels
      summary: Update a channel
      description: Update a channel
      operationId: update_channel
      x-swagger-router-controller: connexContr
      parameters:
        - name: channel_id
          in: path
          description: Unique channel id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannel"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Channel"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Channel not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Channels
      summary: Delete a channel
      description: Delete a channel
      operationId: delete_channel
      x-swagger-router-controller: connexContr
      parameters:
        - name: channel_id
          in: path
          description: Unique channel id
          required: true
          schema:
            type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Channel"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Channel not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Channels
      summary: Update channel status
      description: Update channel status
      operationId: update_status
      x-swagger-router-controller: connexContr
      parameters:
        - name: channel_id
          in: path
          description: Unique channel id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateChannelStatus"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Channel"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Channel not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Channels

  ### Begin of Alerts
  /v3/streams/channels/{channel_id}/alerts:
    get:
      tags:
        - Channels
      summary: List alerts for given channel id
      description: Get details of a specific channel by its id
      operationId: list_alerts
      parameters:
        - name: channel_id
          in: path
          description: Unique channel id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Alert"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Alert not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Alerts

  ### Begin of Templates
  /v3/streams/templates:
    get:
      tags:
        - Templates
      summary: List templates.
      description: List templates.
      operationId: list_templates
      x-swagger-router-controller: connexContr
      parameters:
        - name: query
          in: query
          description: a formated query string for channel.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Templates
      summary: Create template.
      description: Create template.
      operationId: create_template
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTemplate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v3/streams/templates/{template_id}:
    get:
      tags:
        - Templates
      summary: Get templates.
      description: Get template.
      operationId: get_template
      x-swagger-router-controller: connexContr
      parameters:
        - name: template_id
          in: path
          description: Unique template id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Templates
      summary: Update template.
      description: Update template.
      operationId: update_template
      x-swagger-router-controller: connexContr
      parameters:
        - name: template_id
          in: path
          description: Unique template id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTemplate"
      responses:
        "201":
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    $ref: "#/components/schemas/Template"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Templates

  ### Begin of Units
  /units:
    get:
      tags:
        - Units
      summary: List units.
      description: List units.
      operationId: list_units
      x-swagger-router-controller: connexContr
      parameters:
        - name: query
          in: query
          description: a formated query string for units.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Unit"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Unit not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Units

  ### Begin of Measured Properties
  /measured_properties:
    get:
      tags:
        - Measured_Properties
      summary: List measured_properties.
      description: List measured_properties.
      operationId: list_measured_properties
      x-swagger-router-controller: connexContr
      parameters:
        - name: query
          in: query
          description: a formated query string for units.
          schema:
            type: string
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: skip
          in: query
          description: index (skip) to start list.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/MeasuredProperty"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: measured properties not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Measured Properties

  ### Begin of Roles
  /v3/streams/roles:
    get:
      tags:
        - Roles
      summary: List roles for a given user
      description: Get roles for a given user
      operationId: list_roles
      parameters:
        - name: user
          in: query
          description: Check roles for this user
          required: true
          schema:
            type: string
        - name: resource_type
          in: query
          description: Check roles for this user
          required: true
          schema:
            type: string
            enum: [project, channel]
        - name: resource_id
          in: query
          description: Project id or channel id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Roles"
        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Alert not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Roles
      summary: Grant user role.
      description: Grant user role.
      operationId: grant_role
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRole"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Roles"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Roles

  ### Begin of Revoke Role
  /v3/streams/roles/revokeRole:
    post:
      tags:
        - Revoke Roles
      summary: Revoke user role.
      description: Revoke user role.
      operationId: revoke_role
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RevokeRole"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Roles"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Revoke Role

  ### Begin of Archives
  /v3/streams/projects/{project_id}/archives:
    post:
      tags:
        - Archives
      summary: Archive a projects data and metadata
      description: Archive a projects data and metadata
      operationId: archive_project
      x-swagger-router-controller: connexContr
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewArchive"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: object
                    items:
                      $ref: "#/components/schemas/Archive"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags:
        - Archives
      summary: List Archive policies for a project
      description: List Archives policies for a project
      operationId: list_archives
      parameters:
        - name: project_id
          in: path
          description: Unique ID of project generated by Tapis
          required: true
          schema:
            type: string
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Archives"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  ### End of Archives

  ### Begin of Transfer
  /v3/streams/transfer:
    post:
      tags:
        - Transfer Instrument Data
      summary: Transfer an instruments data to a system
      description: Transfer an instruments data to a system
      operationId: transfer_data
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transfer"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transfer"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
### End of Transfer

 ### Begin of Search
  /v3/streams/search/{resource_type}:
    get:
      tags:
        - Search across all streams end points
      summary: Search projects, sites, intruments and variables
               owned by a user
      description: Search endpoint for streams resources
      operationId: search
      x-swagger-router-controller: connexContr
      parameters:
        - name: resource_type
          in: path
          required: true
          schema: 
            enum: [project,site,instrument,variable]
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: skip
          in: query
          schema:
            type: integer
            format: int32
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BasicResponse"
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/SearchResponse"

        "400":
          description: Input error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Resource not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
### End of Transfer

### Begin of Components
components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success]

    ErrorResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [failure]

    BasicResult:
      type: object
      properties:
        resource_name:
          type: string
          description: Name of the resource.
        resource_id:
          type: string
          description: Id of the resource.
        resource_owner:
          type: string
          description: Owner of the resource
        resource_type:
          type: string
          description: Type of the resource

    Project:
      type: object
      properties:
        project_name:
          type: string
          description: Project name
        project_id:
          type: string
          description: The unique identifier for project
        owner:
          type: string
          description: The owner of project
        funding_resource:
          type: string
          description: Funding for the project.
        pi:
          type: string
          description: Principal investigator
        project_url:
          type: string
          description: url of the project
        bucket:
          type: string
          description: id of the infludx storage bucket
        active:
          type: boolean
          description: Current status of the project
        metadata:
          type: object
          description: User defined metadata for the site
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date
  
    SearchProject:
      type: object
      properties:
        project_name:
          type: string
          description: Project name
        project_id:
          type: string
          description: The unique identifier for project
        owner:
          type: string
          description: The owner of project
        funding_resource:
          type: string
          description: Funding for the project.
        pi:
          type: string
          description: Principal investigator
        project_url:
          type: string
          description: url of the project
        bucket:
          type: string
          description: id of the infludx storage bucket
        active:
          type: boolean
          description: Current status of the project
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date

    NewProject:
      type: object
      properties:
        project_name:
          type: string
          description: Project name.
        description:
          type: string
          description: Project description.
        owner:
          type: string
          description: Project owner.
        pi:
          type: string
          description: Principal investigator.
        funding_resource:
          type: string
          description: Funding for the project.
        project_url:
          type: string
          description: url of the project
        active:
          type: boolean
          description: Current status of the project
        metadata:
          type: object
          description: User defined metadata for the site
      required: [project_name, owner, pi]

    Site:
      type: object
      properties:
        site_name:
          type: string
          description: Site name
        site_id:
          type: string
          description: User uniquely defined ID for site.
        owner:
          type: string
          description: The owner for site
        metadata:
          type: object
          description: User defined metadata for the site
        longitude:
          type: number
          description: longitude
        latitude:
          type: number
          description: latitude
        elevation:
          type: number
          description: elevation
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date
    SearchSite:
      type: object
      properties:
        site_name:
          type: string
          description: Site name
        site_id:
          type: string
          description: User uniquely defined ID for site.
        owner:
          type: string
          description: The owner for site
        project_id:
          type: string
          description: Necessary to search site
        longitude:
          type: number
          description: longitude
        latitude:
          type: number
          description: latitude
        elevation:
          type: number
          description: elevation
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date

    NewSiteRequest:
      type: array
      items:
        $ref: "#/components/schemas/NewSite"

    NewSite:
      type: object
      properties:
        site_name:
          type: string
          description: Resource name.
        site_id:
          type: string
          description: User uniquely defined ID for site.
        description:
          type: string
        latitude:
          type: number
          description: Latitude of site.
        longitude:
          type: number
          description: Longitude of site.
        elevation:
          type: number
          description: Elevation of site.
        metadata:
          type: object
          description: User defined metadata for the site
      required:
        [site_name, site_id, latitude, longitude, elevation, description]

    UpdateSite:
      type: object
      properties:
        site_name:
          type: string
          description: Resource name.
        description:
          type: string
        latitude:
          type: number
          description: Latitude of site.
        longitude:
          type: number
          description: Longitude of site.
        elevation:
          type: number
          description: Elevation of site.
        metadata:
          type: object
          description: User defined metadata for the site
      required: [site_name, latitude, longitude, elevation, description]

    Instrument:
      type: object
      properties:
        inst_id:
          type: string
          description: User provided Instrument ID
        inst_name:
          type: string
          description: Instrument name
        inst_description:
          type: string
          description: Instrument description
        chords_id:
          type: string
          description: ID generated by CHORDS
        owner:
          type: string
          description: Owner of the instrument
        site_id:
          type: string
          description: The CHORDS site id to which instrument attached to
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date
        tags:
          type: array
          items:
            type: string
          description: arrays of tags on the instruments
        metadata:
          type: object
          description: User entered metadata for the instruments
    SearchInstrument:
        type: object
        properties:
          inst_id:
            type: string
            description: User provided Instrument ID
          inst_name:
            type: string
            description: Instrument name
          inst_description:
            type: string
            description: Instrument description
          owner:
            type: string
            description: Owner of the instrument
          site_id:
            type: string
            description: The CHORDS site id to which instrument attached to
          project_id:
            type: string
            description: The project id to which instrument attached to
          created_at:
            type: string
            description: ISO8601 datetime string for object creation date
          last_updated:
            type: string
            description: ISO8601 datetime string for object updated date
          tags:
            type: array
            items:
              type: string
            description: arrays of tags on the instruments
         
    NewInstRequest:
      type: array
      items:
        $ref: "#/components/schemas/NewInstrument"

    NewInstrument:
      type: object
      properties:
        inst_name:
          type: string
          description: Instrument name
        inst_id:
          type: string
          description: User uniquely defined ID for instrument.
        inst_description:
          type: string
          description: Instrument description
        topic_category_id:
          type: string
          description: Instrument category
        tags:
          type: array
          description: tags array
          items:
            type: string
        metadata:
          type: object
          description: User enetered metadata on instruments
      required: [inst_name, inst_id, inst_description]

    UpdateInst:
      type: object
      properties:
        inst_name:
          type: string
          description: Instrument name
        inst_description:
          type: string
          description: More information on instrument
        tags:
          type: array
          description: tags array
          items:
            type: string
        metadata:
          type: object
          description: user metadata on instruments
      required: [inst_name]

    NewVarRequest:
      type: array
      items:
        $ref: "#/components/schemas/NewVariable"

    NewVariable:
      type: object
      properties:
        var_id:
          type: string
          description: User provided, unique identifier within in the Instrument name space. will be used as the chords shortname
        var_name:
          type: string
          description: Variable name.
        units:
          type: string
          description: Unit name
        measured_property_id:
          type: number
          description: Id of the Property measured by the variable type
        metadata:
          type: object
          description: User entered metadata for the variable
        shortname:
          type: string
          description: User entered short name
      required: [var_id, var_name]

    UpdateVariable:
      type: object
      properties:
        var_name:
          type: string
          description: Variable name.
        units:
          type: string
          description: Unit name
        measured_property_id:
          type: number
          description: Id of the Property measured by the variable type
        metadata:
          type: object
          description: User entered metadata for the variable
        shortname:
          type: string
          description: User entered short name
      required: [var_name]

    Variable:
      type: object
      properties:
        var_name:
          type: string
          description: The name of variable.
        var_id:
          type: string
          description: The unique identifier for variable.
        owner:
          type: string
          description: The owner for variable.
        inst_id:
          type: string
          description: The instrument id generated by CHORDS.
        shortname:
          type: string
          description: The shortname of variable.
        unit:
          type: string
          description: The unit to measure property of variable.
        unit_abbrev:
          type: string
          description: The unit abbrevation to measure variable.
        measured_property:
          type: string
          description: The property measured by variable.
        metadata:
          type: object
          description: User entered metadata for the variable
        chords_id:
          type: integer
          description: Variable ID in chords
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date
          
    SearchVariable:
      type: object
      properties:
        var_name:
          type: string
          description: The name of variable.
        var_id:
          type: string
          description: The unique identifier for variable.
        owner:
          type: string
          description: The owner for variable.
        inst_id:
          type: string
          description: The instrument id generated by CHORDS.
        shortname:
          type: string
          description: The shortname of variable.
        unit:
          type: string
          description: The unit to measure property of variable.
        unit_abbrev:
          type: string
          description: The unit abbrevation to measure variable.
        measured_property:
          type: string
          description: The property measured by variable.
        metadata:
          type: object
          description: User entered metadata for the variable
        chords_id:
          type: integer
          description: Variable ID in chords
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        last_updated:
          type: string
          description: ISO8601 datetime string for object updated date

    Measurements:
      type: object
      properties:
        instrument:
          type: object
          description: The instrument metadata - if with_metadata is set to True.
          $ref: "#/components/schemas/Instrument"
        site:
          type: object
          description: The site metadata - if with_metadata is set to True.
          $ref: "#/components/schemas/Site"
        measurements_in_file:
          type: integer
          description: The count of measurements records.
      #unexpected typing behavior, still works (assigns to type any rather than generating DatetimeValues type)
      additionalProperties:
        $ref: "#/components/schemas/DatetimeValues"
      example:
        { "2021-05-15T15:23:00+05:00": 7.2, "2021-05-15T25:23:00+05:00": 7.3 }

    DatetimeValues:
      type: object
      additionalProperties:
        type: number
      description: example "ph":{"2021-05-15T15:23:00+05:00":7.2,"2021-05-15T25:23:00+05:00":7.3}

    NewMeasurement:
      type: object
      properties:
        inst_id:
          type: string
        vars:
          type: array
          items:
            $ref: "#/components/schemas/MeasurementValues"
      required: [inst_id, vars]

    MeasurementValues:
      type: object
      description: Measurement objects. Example [{"temp1":"75.0","pc_hmd":"34","datetime":"2021-05-15T15:23:00+05:00"},{"temp1":"77.0","pc_hmd":"36","datetime":"2021-05-15T15:54:00+05:00"}]
      properties:
        datetime:
          type: string
          description: Datetime ISO8601 formated string
      additionalProperties:
        type: number
      required: [datetime]

    NewOntology:
      type: object
      properties:
        label:
          type: string
          description: Standard set of concepts snd their relatiobship defined in a scientific domain
        onto_id:
          type: string
          description: unique identifier for an Ontology
        url:
          type: string
          description: URL for the Ontology
        additionalProperties:
          type: string

    NewOntologyRequest:
      type: array
      items:
        $ref: "#/components/schemas/NewOntology"

    Ontology:
      type: object
      properties:
        label:
          type: string
          description: Standard set of concepts snd their relatiobship defined in a scientific domain
        onto_id:
          type: string
          description: unique identifier for an Ontology
        url:
          type: string
          description: URL for the Ontology
        additionalProperties:
          type: string

    Channel:
      type: object
      properties:
        channel_name:
          type: string
          description: The name of channel.
        channel_id:
          type: string
          description: The id generated by Tapis.
        created_at:
          type: string
          description: The time of channel creation
        status:
          type: string
          description: The status of channel
          enum: [INACTIVE, ACTIVE]
        last_updated:
          type: string
          description: The time of channel update
        task_id:
          type: string
          description: task id from Kapacitor
        triggers_with_actions:
          type: array
          items:
            type: object
            properties:
              action:
                type: object
                properties:
                  actor_base_url:
                    type: string
                    description: base url for tenant
                  actor_id:
                    type: string
                    description: actor id
                  message:
                    type: string
                    description: message posted to the actor
                  method:
                    type: string
                    description: ACTOR
                  nonces:
                    type: string
                    description: Abaco nonces
              condition:
                oneOf:
                  - $ref: "#/components/schemas/Threshold"
                  - $ref: "#/components/schemas/Deadman"
              inst_ids:
                type: array
                items:
                  type: string
        template_id:
          type: string
          description: Template id
        permissions:
          type: object
          properties:
            users:
              type: array
              items:
                type: string

    NewChannel:
      type: object
      properties:
        channel_id:
          type: string
          description: User defined channel id.
        channel_name:
          type: string
          description: User defined channel name.
        template_id:
          type: string
          description: Template id. (public templates include default_threshold or default_deadman)
        type:
          type: string
          enum:
            - threshold
            - deadman
          default: threshold
          description: Type of Checks (threshold or deadman)
        triggers_with_actions:
          type: array
          items:
            type: object
            properties:
              inst_ids:
                type: array
                items:
                  type: string
              condition:
                oneOf:
                  - $ref: "#/components/schemas/Threshold"
                  - $ref: "#/components/schemas/Deadman"
              action:
                type: object
                properties:
                  method:
                    type: string
                  actor_id:
                    type: string
                  message:
                    type: string
      required:
        - channel_id
        - channel_name
        - template_id

    UpdateChannel:
      type: object
      properties:
        channel_name:
          type: string
          description: User defined channel name.
        template_id:
          type: string
          description: Template id. (public templates include default_threshold or default_deadman)
        type:
          type: string
          enum:
            - threshold
            - deadman
          default: threshold
          description: Type of Checks (threshold or deadman)
        triggers_with_actions:
          type: array
          items:
            type: object
            properties:
              inst_ids:
                type: array
                items:
                  type: string
              condition:
                oneOf:
                  - $ref: "#/components/schemas/Threshold"
                  - $ref: "#/components/schemas/Deadman"
              action:
                type: object
                properties:
                  method:
                    type: string
                  actor_id:
                    type: string
                  message:
                    type: string
      required:
        - channel_name
        
    ListTypeEnum:
      type: string
      default: OWNED
      enum:
        - OWNED
        - SHARED_PUBLIC
        - ALL
        
    Threshold:
      type: object
      properties:
        key:
          type: string
        operator:
          type: string
        val:
          type: number
      required: [key, operator, val]

    Deadman:
      type: object
      properties:
        key:
          type: string
        every:
          type: string
          example: "10m"
        offset:
          type: string
          example: "15s"
        report_zero:
          type: boolean
        time_since:
          type: string
          example: "15s"
        stale_time:
          type: string
          example: "10m"
      required: [key, time_since]
    
    Unit:
      type: object
      properties:
        name:
          type: string
          description: The name of unit.
        abbrevation:
          type: string
          description: The abbrevation for the unit
        ontology:
          type: string
          description: Name of the ontology this unit belongs too.
        category:
          type: string
          description: category of unit.

    UpdateChannelStatus:
      type: object
      properties:
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [INACTIVE, ACTIVE]

    UpdateTemplate:
      type: object
      properties:
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [INACTIVE, ACTIVE]

    MeasuredProperty:
      type: object
      properties:
        label:
          type: string
          description: The label of property.
        url:
          type: string
          description: The url for the properties ontology
        ontology:
          type: string
          description: Name of the ontology this unit belongs too.

    Alert:
      type: object
      properties:
        actor_id:
          type: string
          description: Abaco actor id
        alert_id:
          type: string
          description: Alert id
        channel_id:
          type: string
          description: Unique channel id
        channel_name:
          type: string
          description: User defined channel name
        created_at:
          type: string
          description: Time of alert creation
        execution_id:
          type: string
          description: Abaco execution id
        message:
          type: string
          description: alert message

    Template:
      type: object
      properties:
        created_at:
          type: string
          description: Time for template creation
        last_updated:
          type: string
          description: Time for template update
        permissions:
          type: object
          properties:
            users:
              type: array
              items:
                type: string
        script:
          type: string
        template_id:
          type: string
        type:
          type: string

    NewTemplate:
      type: object
      properties:
        template_id:
          type: string
          description: User defined template id
        script:
          type: string
        type:
          type: string

    Roles:
      type: object
      properties:
        roleNames:
          type: array
          items:
            type: string
          description: User role

    NewRole:
      type: object
      properties:
        user:
          type: string
          description: User id whom the role is to be granted
        resource_id:
          type: string
          description: project or channel id/id
        resource_type:
          type: string
          description: Resource type should be either project or channel
          enum: [project, channel, template]
        role_name:
          type: string
          description: role name
          enum: [admin, manager, user]

    RevokeRole:
      type: object
      properties:
        user:
          type: string
          description: User id whom the role is to be revoked
        resource_id:
          type: string
          description: project or channel id/id
        resource_type:
          type: string
          description: Resource type should be either project or channel
          enum: [project, channel, template]
        role_name:
          type: string
          description: role name
          enum: [admin, manager, user]

    NewArchive:
      type: object
      properties:
        archive_type:
          type: string
          description: The type of archive object - system or chords
          enum: [system, chords]
        owner:
          type: string
          description: Owner of this archive
        settings:
          type: object
          properties:
            project_id:
              type: string
              description: ID of Project to archive
            system_id:
              type: string
              description: ID os System ID to send archive too.
            path:
              type: string
              description: The directory path to write archive to on selected System.
            archive_format:
              type: string
              description: The archive file format - zip is currently supported
              enum: [zip] #will be [zip,tar]
            data_format:
              type: string
              description: The data measurement format - csv or JSON is currently supported
              enum: [csv, json]
            frequency:
              type: string
              description: How often should this archive occur - currently supports one-time_now
              enum: [one-time]
            range:
              type: string
              description: The range of data to archive_type - all or custom supported
              enum: [custom, all] #day, week, month, year coming soon
            start_date:
              type: string
              description: A ISO8601 formatted datetime string for the starting time for archival data- only for custom range
            end_date:
              type: string
              description: A ISO8601 formatted datetime string for the end time for archival data - only for custom range
    Archives:
      type: array
      items:
        $ref: "#/components/schemas/Archive"

    Archive:
      type: object
      properties:
        archive_id:
          type: string
          description: the unique id assigned to the archive
        archive_type:
          type: string
          description: The type of archive object - system or chords
          enum: [system, chords]
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        owner:
          type: string
          description: Owner of this archive
        settings:
          type: object
          properties:
            project_id:
              type: string
              description: ID of Project to archive
            system_id:
              type: string
              description: ID os System ID to send archive too.
            path:
              type: string
              description: The directory path to write archive to on selected System.
            archive_format:
              type: string
              description: The archive file format - zip is currently supported
              enum: [zip] #will be [zip,tar]
            data_format:
              type: string
              description: The data measurement format - csv or JSON is currently supported
              enum: [csv, json]
            frequency:
              type: string
              description: How often should this archive occur - currently supports one-time_now
              enum: [one-time]
            range:
              type: string
              description: The range of data to archive_type - all or custom supported
              enum: [custom, all] #day, week, month, year coming soon
            start_date:
              type: string
              description: A ISO8601 formatted datetime string for the starting time for archival data- only for custom range
            end_date:
              type: string
              description: A ISO8601 formatted datetime string for the end time for archival data - only for custom range

    Transfer:
      type: object
      properties:
        filename:
          type: string
          description: The filename to create on the destination
        created_at:
          type: string
          description: ISO8601 datetime string for object creation date
        owner:
          type: string
          description: Owner of this archive
        system_id:
          type: string
          description: ID os System ID to send archive too.
        path:
          type: string
          description: The directory path to write archive to on selected System.
        project_id:
          type: string
          description: The Project the data is within.
        inst_id:
          type: string
          description: The Instrument to pull measurement data from for the start and end dates.
        data_format:
          type: string
          description: The data measurement format - csv or JSON is currently supported
        start_date:
          type: string
          description: A ISO8601 formatted datetime string for the starting time for archival data
        end_date:
          type: string
          description: A ISO8601 formatted datetime string for the ending time for archival data
    
    ResultMetadata:
       type: object
       properties:
        total_count:
          type: integer
          description: count of result set

    SearchObject:
      type: object
      properties:
        name:
          type: string
          description: name of project, site, instrument or variable
        created_at:
          type: string
          description: ISO8601 datetime string for resource creation date
        owner:
          type: string
          description: Owner of this resource
        resource_id:
          type: string
          description: Resource id.

    SearchResponse:
      type: object
      properties:
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
        result_set:
          type: array
          items:
            type: object 
            $ref: '#/components/schemas/SearchObject'
             
    Application:
      type: object
### End of Components
openapi: 3.0.3
info:
  title: Tapis Systems API
  description: The Tapis Systems API provides for management of Tapis Systems including permissions, credentials and Scheduler Profiles.
  version: '1.8.2'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Systems API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
tags:
  - name: General
    description: General service health and readiness
  - name: Systems
    description: Manage Tapis system resources. Create, retrieve, update, etc.
  - name: Credentials
    description: Manage Tapis system user access credentials.
  - name: Permissions
    description: |
      The permissions model allows for fine grained access control of resources. The system owner
      may grant READ and MODIFY permission to specific users. MODIFY implies READ.
      Note that Tapis permissions are independent of native permissions enforced by the underlying
      system host.
  
      Tapis also supports a higher level approach to granting access known as *Sharing*.
  - name: Sharing
    description: |
      In addition to fine grained permissions support, Tapis also supports a higher level approach to granting access.
      This approach is known simply as *sharing*. The sharing API allows you to share a system with a set of users
      as well as share publicly with all users in a tenant. Sharing grants users READ and EXECUTE access to the system.
      When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls
      made through the Files service.
      If system type is ``IRODS`` and the attribute *useProxy* is set to ``true`` then the system is also treated as
      having a dynamic *effectiveUserId* and users will be granted MODIFY access.
      Note that Tapis permissions and sharing are independent of native permissions enforced by the underlying
      system host.
  - name: Child Systems
    description: |
      A system that has *allowChildren* set to *true* allows for the creation of child systems based on it.
      This ability provides a way to easily clone and manage systems based on existing systems.
      Child systems allow a user to set only a few fields, and use all other values from an existing parent system.
      This can reduce the difficulty in managing systems.
      It allows for all child systems to be updated when the parent is updated.
  - name: Scheduler Profiles
    description: |
      The Systems service supports managing Tapis scheduler profiles. An HPC center often has certain conventions
      and restrictions around the use of batch schedulers. A scheduler profile resource can be defined to provide the
      Tapis Jobs service with additional site specific information to be used when executing applications using a
      scheduler. A scheduler profile contains information on options that should be hidden from the scheduler,
      the module load command to use and which modules should be loaded by default when running a job. Anyone in a
      tenant may create a scheduler profile for use by all users in the tenant. The owner of a profile or a
      tenant administrator may modify or delete a profile. A profile may referenced in a system definition using the
      attribute *batchSchedulerProfile*. The profile to be used may also be set in the job submit request using the
      special scheduler option *--tapis-profile*. The value in the job submit request takes precedence over any value
      defined for the execution system.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /systems -----------------------------------------------------
  '/v3/systems/healthcheck':
    get:
      tags:
        - General
      description: Health check. Lightweight non-authenticated check that service is alive.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/systems/readycheck':
    get:
      tags:
        - General
      description: Ready check. Non-authenticated check that service is ready to do work.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service not ready.

  '/v3/systems':
    get:
      tags:
        - Systems
      description: |
        Retrieve list of systems.

        Use *listType*, *search* and *select* query parameters to limit results. Query
        parameter *listType* allows for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.

        Certain Tapis services or a tenant administrator may use the query parameter *impersonationId* to be used in
        place of the requesting Tapis user. Tapis will use this user Id when performing authorization and resolving
        the *effectiveUserId*.
      operationId: getSystems
      security:
        - TapisJWT: []
      parameters:
        - name: search
          in: query
          description: Search conditions as a single query parameter. For example search=(id.like.MySys*)~(enabled.eq.true)
          schema:
            type: string
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
        - name: showDeleted
          in: query
          description: Indicates if Systems marked as deleted should be shown in the results. Default is false.
          schema:
            type: boolean
            default: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain Tapis services or a tenant administrator may impersonate a Tapis user.
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Systems
      description: |
        Create a system using a request body. System name must be unique within a tenant and can be composed of
        alphanumeric characters and the following special characters [-._~].
        Name must begin with an alphanumeric character and can be no more than 80 characters in length.
        Description is optional with a maximum length of 2048 characters.

        The attribute *host* represents a host name, IP address, Globus Endpoint Id or Globus Collection Id.

        The attribute *effectiveUserId* determines the host login user, the user used to access the underlying host.
        The attribute can be set to a static string indicating a specific user (such as a service account) or
        dynamically specified as *${apiUserId}*. For the case of *${apiUserId}*, the service resolves the variable by
        extracting the identity from the request to the service (i.e. the JWT) and applying a mapping to a host login
        user if such a mapping has been provided. If no mapping is provided, then the extracted identity is taken to be
        the host login user.

        If the *effectiveUserId* is static (i.e. not *${apiUserId}*) then credentials may optionally be provided in the
        *authnCredential* attribute of the request body. The Systems service does not store the secrets in its
        database, they are persisted in the Security Kernel.

        By default for LINUX and S3 type systems credentials provided are verified. Use query parameter
        skipCredentialCheck=true to bypass initial verification of credentials.

        The attribute *rootDir* serves as an effective root directory when operating on files through the Tapis
        Files service. All paths are relative to this directory when using Files to list, copy, move, mkdir, etc.
        Required for systems of type LINUX or IRODS. Supports the following variables which are resolved at create
        time: *${apiUserId}*, *${tenant}* and *${owner}*. May not be updated. Contact support to request a change.

        There is also a special macro available for *rootDir* that may be used under certain conditions when a system
        is first created. The macro name is HOST_EVAL.
        The syntax for the macro is HOST_EVAL($var), where *var* is the environment variable to be evaluated
        on the system host when the create request is made.
        Note that the $ character preceding the environment variable name is optional.
        If after resolution the final path does not have the required leading slash (/) to make it an absolute path,
        then one will be prepended.
        The following conditions must be met in order to use the macro
          - System must be of type LINUX
          - Credentials must be provided when system is created.
          - Macro HOST_EVAL() must only appear once and must be the first element of the path. Including a leading slash is optional.
          - The *effectiveUserId* for the system must be static. Note that *effectiveUserId* may be set to *${owner}*.

        Here are some examples

          - HOST_EVAL($SCRATCH)
          - HOST_EVAL($HOME)
          - /HOST_EVAL(MY_ROOT_DIR)/scratch
          - /HOST_EVAL($PROJECT_HOME)/projects/${tenant}/${owner}

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a POST request to create a system.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - deleted
          - created
          - updated
      operationId: createSystem
      security:
        - TapisJWT: []
      parameters:
        - name: skipCredentialCheck
          in: query
          description: Bypass initial credential validation (for LINUX and S3). Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying information for the system to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSystem'
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON or credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/{parentId}/createChildSystem':
    post:
      tags:
        - Child Systems
      description: |
        Create a child system based on a parent system. The child system inherits most attributes from the parent.
        The following fields are filled in when the child system is created:
          - *id*
          - *effectiveUserId*
          - *rootDir*
          - *owner*

        The owner will be the user who is creating the system. The caller must have read permission on the parent system.
      operationId: createChildSystem
      security:
        - TapisJWT: []
      parameters:
        - name: parentId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying the attributes of the child system.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostChildSystem'
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON or credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/search':
    get:
      tags:
        - Systems
      description: |
        Retrieve details for systems. Use query parameters to specify search conditions. For example owner.eq=jdoe&port.gt=1024
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchSystemsQueryParameters
      security:
        - TapisJWT: []
      parameters:
        - name: freeFormParameterName
          in: query
          description: Free form query parameters.
          explode: true
          allowEmptyValue: true
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys2
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Systems
      description: |
        Retrieve details for systems. Use request body to specify SQL-like search conditions.
        Use *listType* and *select* query parameters to limit results. Query parameter *listType* allows
        for filtering results based on authorization. Options for *listType* are

          - *OWNED* Include only items owned by requester (Default)
          - *SHARED_PUBLIC* Include only items shared publicly
          - *ALL* Include all items requester is authorized to view. Includes check for READ or MODIFY permission.
      operationId: searchSystemsRequestBody
      security:
        - TapisJWT: []
      parameters:
        - name: listType
          in: query
          description: Determines additional filtering of results based on ownership, permissions and sharing. Default is to only see items owned by requester.
          schema:
            $ref: '#/components/schemas/ListTypeEnum'
        - name: limit
          in: query
          description: Limit number of items returned. For example limit=10. Use -1 for unlimited. Default is 100.
          schema:
            type: integer
            default: 100
        - name: orderBy
          in: query
          description: Attribute for sorting. Direction may be included. For example orderBy=id(desc). Default direction is (asc).
          schema:
            type: string
        - name: skip
          in: query
          description: Number of items to skip. Use one of skip or startAfter. For example skip=10. Default is 0.
          schema:
            type: integer
        - name: startAfter
          in: query
          description: Where to start when sorting. Use one of skip or startAfter. Must also specify orderBy. For example, limit=10&orderBy=id(asc)&startAfter=my.sys1
          schema:
            type: string
        - name: computeTotal
          in: query
          description: Compute total number of results that would have been returned if unlimited. Default is false.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of each result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'summaryAttributes'
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSystems'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/match/constraints':
    post:
      tags:
        - Systems
      description: |
        *WARNING Capability constraint matching is not yet supported.*
        Retrieve details for systems. Use request body to specify constraint conditions as an SQL-like WHERE clause.
      operationId: matchConstraints
      security:
        - TapisJWT: []
      requestBody:
        required: true
        description: A JSON object specifying SQL-like constraint conditions as an array of strings. Strings are concatenated to form full query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqMatchConstraints'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystems'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}':
    get:
      tags:
        - Systems
      description: |
        Retrieve information for a system given the system Id.

        Use query parameter *authnMethod* to override the default authentication method.

        Certain Tapis services or a tenant administrator may use the query parameter *impersonationId* to be used in
        place of the requesting Tapis user. Tapis will use this user Id when performing authorization and resolving
        the *effectiveUserId*.

        Certain Tapis services may use the query parameter *sharedAppCtx* to indicate that the request is in a shared
        application context.
      operationId: getSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when fetching credentials, default method used if this is null.
          schema:
            type: string
            default: ''
        - name: requireExecPerm
          in: query
          description: Check for EXECUTE permission as well as READ permission.
          schema:
            type: boolean
            default: false
        - name: select
          in: query
          description: List of attributes to be included as part of the result item. Keywords *allAttributes* and *summaryAttributes* are supported. For example select=id,owner,host
          schema:
            type: string
            default: 'allAttributes'
        - name: returnCredentials
          in: query
          description: Restricted. Only certain Tapis services are authorized to get credentials.
          schema:
            type: boolean
            default: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain Tapis services or a tenant administrator may impersonate a Tapis user.
          schema:
            type: string
        - name: sharedAppCtx
          in: query
          description: Restricted. Only certain Tapis services may indicate that the request is in a shared context. Must be set to the grantor who shared the application.
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: resourceTenant
          in: query
          description: Restricted. May be used by Tapis services to set the tenant associated with the requested resource.
          schema:
            type: string
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystem'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - Systems
      description: |
        Update selected attributes of a system. Request body may only contain updatable attributes. System must exist.

        Attributes that may not be updated via PATCH are

          - id
          - systemType
          - owner
          - enabled
          - bucketName
          - rootDir
          - canExec

        Note that the attributes owner and enabled may be modified using other endpoints.
      operationId: patchSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPatchSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    put:
      tags:
        - Systems
      description: |
        Update all updatable attributes of a system using a request body identical to POST. System must exist.

        Note that certain attributes in the request body (such as tenant) are allowed but ignored so that the JSON
        result returned by a GET may be modified and used when making a PUT request to update a system.

        The attributes that are allowed but ignored for both PUT and POST are
          - tenant
          - uuid
          - deleted
          - created
          - updated

        In addition for a PUT operation the following non-updatable attributes are allowed but ignored
          - id
          - systemType
          - owner
          - effectiveUserId
          - authnCredential
          - enabled
          - bucketName
          - rootDir
          - canExec

        Note that the attributes *owner*, *enabled* and *authnCredential* may be modified using other endpoints.
        Attribute *effectiveUserId* may be updated using the endpoint **patchSystem**.
      operationId: putSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: skipCredentialCheck
          in: query
          description: Bypass initial credential validation (for LINUX and S3). Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPutSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/isEnabled':
    get:
      tags:
        - Systems
      description: |
        Check if a system is currently enabled, i.e. available for use.
      operationId: isEnabled
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBoolean'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/enable':
    post:
      tags:
        - Systems
      description: |
        Mark a system available for use.
      operationId: enableSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/disable':
    post:
      tags:
        - Systems
      description: |
        Mark a system unavailable for use.
      operationId: disableSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/delete':
    post:
      tags:
        - Systems
      description: |
        Mark a system as deleted. System will not appear in queries unless explicitly requested.
      operationId: deleteSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/undelete':
    post:
      tags:
        - Systems
      description: |
        Mark a system as not deleted. System will appear in queries.
      operationId: undeleteSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System undeleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/changeOwner/{userName}':
    post:
      tags:
        - Systems
      description: |
        Change owner of a system.
      operationId: changeSystemOwner
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: System owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemId}/history':
    get:
      tags:
        - Systems
      description: |
        Retrieve history of changes for a given systemId.
      operationId: getHistory
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: History successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystemHistory'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{childSystemId}/unlinkFromParent':
    post:
      tags:
        - Child Systems
      description: |
        Make a child system a standalone system. This will break the connection with it's parent. From
        this point on, the child system will not be connected to the parent. **WARNING** This cannot be undone.
      operationId: unlinkFromParent
      security:
        - TapisJWT: []
      parameters:
        - name: childSystemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System separated from parent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/{parentSystemId}/unlinkChildren':
    post:
      tags:
        - Child Systems
      description: |
        Make a child system a standalone system.  This will break the connection with it's parent, and from
        this point on, the child system will not be connected to the parent.  This is similar to unlinkFromParent,
        but permissions are required for the parent system rather than the child system.  Warning, this cannot be undone.
      operationId: unlinkChildren
      security:
        - TapisJWT: []
      parameters:
        - name: parentSystemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: all
          in: query
          description: Unlink all children from the parent. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: false
        description: A JSON object containing information about which systems should be unlinked.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUnlinkChildren'
      responses:
        '200':
          description: System separated from parent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /credentials ------------------------------------------------
  '/v3/systems/credential/{systemId}/user/{userName}':
    get:
      tags:
        - Credentials
      description: |
        Restricted. Only certain Tapis services authorized.

        Retrieve credentials for given system, target *userName* and authentication method.

        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then *{userName}* is
        interpreted as a Tapis user. Note that there may me a mapping of the Tapis user to a host *loginUser*.

        If the *effectiveUserId* for the system is static (i.e. not *${apiUserId}*) then *{userName}* is interpreted
        as the host *loginUser* that is used when accessing the host.

        Desired authentication method may be specified using query parameter *authnMethod*. If desired
        authentication method not specified then credentials for the system's default authentication method are returned.

        The result includes the attribute *authnMethod* indicating the authentication method associated with
        the returned credentials.
      operationId: getUserCredential
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when fetching credentials, default method used if not provided.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespCredential'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Credentials
      description: |
        Create or update credentials in the Security Kernel for given system and target *userName* using a request body.
        Credentials for multiple authentication methods may be provided. Note that there is support for only one set of
        credentials per user per system. Updating credentials overwrites previously registered data.

        The Systems service does not store the secrets in its database, they are persisted in the Security Kernel.

        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then *{userName}* is interpreted
        as a Tapis user and the request body may contain the optional attribute *loginUser* which will be used to map the
        Tapis user to a username to be used when accessing the system. If the login user is not provided then there is
        no mapping and the Tapis user is always used when accessing the system.

        If the *effectiveUserId* for the system is static (i.e. not *${apiUserId}*) then *{userName}* is interpreted
        as the login user to be used when accessing the host.

        Operation is allowed if requester is the system owner or a tenant administrator.
        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then the operation is allowed
        if *{userName}* is the Tapis user making the request.

        Use query parameter *createTmsKeys=true* to have the service call a Trust Manager System (TMS) server to create and
        store an ssh keypair. Default is *false*.
        Please note that the following restrictions apply:
          - Tapis installation for your site must be configured to support the Trust Manager System (TMS).
          - The host for the system must have the sshd configuration set up to use TMS.
          - The *effectiveUserId* must be dynamic.
          - Mapping of user using *loginUser* is not supported.

        By default credentials for LINUX and S3 type systems are verified. Use query parameter
        *skipCredentialCheck=true* to bypass initial credential validation.
      operationId: createUserCredential
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: createTmsKeys
          in: query
          description: Use TMS to generate and store an ssh keypair. Default is false.
          schema:
            type: boolean
            default: false
        - name: skipCredentialCheck
          in: query
          description: Bypass initial credential validation. Default is false.
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        description: A JSON object specifying credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateCredential'
      responses:
        '200':
          description: Credentials updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON or credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Credentials
      description: |
        Remove credentials from the Security Kernel for given system and *target user*. Requester must be owner of the system.

        Operation is allowed if requester is the system owner or a tenant administrator.
        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then the operation is allowed
        if *{userName}* is the Tapis user making the request.
      operationId: removeUserCredential
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Credentials removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/credential/{systemId}/user/{userName}/check':
    post:
      tags:
        - Credentials
      description: |
        Check user credentials by connecting to the system host. Not supported for all system types. Currently supported
        for LINUX and S3 type systems.

        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then *{userName}* is interpreted
        as a Tapis user and a search is made for credentials associated with *{userName}*. Note that the Tapis user
        *{userName}* may have a mapping to a host *loginUser* in which case the *loginUser* will be used when
        verifying the credentials.

        If the *effectiveUserId* for the system is static (i.e. not *${apiUserId}*) then *{userName}* is interpreted
        as the login user to be used when accessing the host. Note that this would typically be the current
        *effectiveUserId* defined for the system, but that is not a requirement. This allows for registering and
        checking credentials for a login user prior to updating the system definition.

        Operation is allowed if requester is the system owner or a tenant administrator.
        If the *effectiveUserId* for the system is dynamic (i.e. equal to *${apiUserId}*) then the operation is allowed
        if *{userName}* is the Tapis user making the request.

        Desired authentication method may be specified using query parameter *authnMethod*. If not specified,
        then credentials for the system's default authentication method are verified.
      operationId: checkUserCredential
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authnMethod
          in: query
          description: Desired authentication method to use when verifying, system default method used if not provided.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Check successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Credential validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/credential/{systemId}/globus/authUrl':
    get:
      tags:
        - Credentials
      summary: Retrieve a Globus URL that can be used to generate an authorization code for an OAuth2 flow.
      description: |
        Retrieve a Globus URL + Session Id that can be used to generate an oauth2 authorization code associated with
        the given system. System must be of type GLOBUS.
        In Globus, the code is referred to as a *Native App Authorization Code*.
        The host property of the system is used as the Globus Endpoint Id or Globus Collection Id.
        Once a user has obtained an authorization code, the corresponding Systems endpoint for generating
        Globus tokens should be called to exchange the code + sessionId for a pair of access and refresh tokens.
        The session Id is a Tapis Id that is used to track the oauth2 flow that is started when this call is made.
        The authorization code, as per Globus documentation, is valid for 10 minutes.
        Please note that the Tapis installation for your site must be configured by the site administrator to
        support systems of type GLOBUS.
      operationId: getGlobusAuthUrl
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGlobusAuthUrl'
        '400':
          description: Input error or system not of type GLOBUS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/credential/{systemId}/user/{userName}/globus/tokens/{authCode}/{sessionId}':
    post:
      tags:
        - Credentials
      summary: Use a Globus authorization code + Tapis session Id to generate tokens
      description: |
        Use a Globus *Native App Authorization Code* and a Tapis session Id to generate a pair of access and refresh tokens.
        System must be of type GLOBUS.
        The Systems service will use the Tapis Security Kernel to store the tokens for the given system and user.
        The session Id is a Tapis Id that is used to track the oauth2 flow that is started when a call to the
        getGlobusAuthUrl endpoint is made.
        The authorization code, as per Globus documentation, is valid for 10 minutes.
        Please note that the Tapis installation for your site must be configured by the site administrator to
        support systems of type GLOBUS.
      operationId: generateGlobusTokens
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: authCode
          in: path
          required: true
          description: Authorization code to be exchanged for tokens.
          schema:
            type: string
        - name: sessionId
          in: path
          required: true
          description: Tapis session Id tracking the OAuth2 flow.
          schema:
            type: string
      responses:
        '200':
          description: Tokens generated and credentials updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error or system not of type GLOBUS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/systems/perms/{systemId}/user/{userName}':
    get:
      tags:
        - Permissions
      description: |
        Retrieve all system related permissions for a given system and user.
      operationId: getUserPerms
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Permissions
      description: |
        Create permissions in the Security Kernel for a user. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE. MODIFY implies READ.
      operationId: grantUserPerms
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemId}/user/{userName}/revoke':
    post:
      tags:
        - Permissions
      description: |
        Remove permissions from the Security Kernel for a user. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerms
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemId}/user/{userName}/{permission}':
    delete:
      tags:
        - Permissions
      description: |
        Remove system user permission from the Security Kernel. Requester must be owner of the system.
        Permissions are READ, MODIFY, EXECUTE.
      operationId: revokeUserPerm
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: userName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserNameString'
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /share and /unshare -------------------------------------------------------
  '/v3/systems/share/{systemId}':
    get:
      tags:
        - Sharing
      summary: Retrieve all sharing information for a system
      description: |
        Retrieve all sharing information for a system. This includes all users with whom the system
        has been shared and whether or not the system has been made publicly available.
      operationId: getShareInfo
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareInfo'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Sharing
      summary: Share a system with one or more users.
      description: |
        Create or update sharing information for a system. The system will be shared with the list of users
        provided in the request body. Sharing allows READ and EXECUTE access. When the system has a dynamic
        *effectiveUserId*, sharing also allows for MODIFY access to all paths for calls made through the
        Files service. Requester must be owner of the system.
      operationId: shareSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/share_public/{systemId}':
    post:
      tags:
        - Sharing
      summary: Share a system publicly with all users in the tenant.
      description: |
        Share a system with all users in the tenant. Sharing allows READ and EXECUTE access.
        When the system has a dynamic *effectiveUserId*, sharing also allows for MODIFY access
        to all paths for calls made through the Files service.
        Requester must be owner of the system.
      operationId: shareSystemPublic
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System shared publicly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/unshare/{systemId}':
    post:
      tags:
        - Sharing
      summary: Unshare a system with one or more users.
      description: |
        Create or update sharing information for a system. The system will be unshared with the list of users
        provided in the request body. Requester must be owner of the system.
      operationId: unShareSystem
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/unshare_public/{systemId}':
    post:
      tags:
        - Sharing
      summary: Remove public access for a system.
      description: |
        Remove public sharing for a system. Requester must be owner of the system.
      operationId: unShareSystemPublic
      security:
        - TapisJWT: []
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: System public access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    
    # --- Paths for /schedulerProfile ------------------------------------------------
  '/v3/systems/schedulerProfile':
    get:
      tags:
        - Scheduler Profiles
      description: Retrieve list of scheduler profiles.
      operationId: getSchedulerProfiles
      security:
        - TapisJWT: []
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSchedulerProfiles'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Scheduler Profiles
      description: |
        Create a scheduler profile using a request body. Name must be unique within a tenant and can be composed of
        alphanumeric characters and the following special characters [-._~].
        Name must begin with an alphabetic character and can be no more than 80 characters in length.
        Description is optional with a maximum length of 2048 characters.

        Note that certain attributes (such as *tenant*) are allowed but ignored so that the JSON result returned by a GET
        may be modified and used when making a POST request to create a profile.
        The attributes that are allowed but ignored are

          - tenant
          - uuid
          - created
          - updated
      operationId: createSchedulerProfile
      security:
        - TapisJWT: []
      requestBody:
        required: true
        description: A JSON object specifying information for the profile to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPostSchedulerProfile'
      responses:
        '201':
          description: Scheduler profile created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: Scheduler profile already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/schedulerProfile/{name}':
    get:
      tags:
        - Scheduler Profiles
      description: |
        Retrieve information for a scheduler profile given the profile name.
      operationId: getSchedulerProfile
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSchedulerProfile'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: Scheduler profile not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - Scheduler Profiles
      description: |
        Remove a scheduler profile given the profile name. Requester must be owner of the profile.
      operationId: deleteSchedulerProfile
      security:
        - TapisJWT: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Scheduler profile deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '403':
          description: Permission denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    # --- TapisSystem ------------------------------------------------------------------
    TapisSystem:
      type: object
      properties:
        tenant:
          type: string
        id:
          $ref: '#/components/schemas/SysId'
        description:
          $ref: '#/components/schemas/DescriptionString'
        systemType:
          $ref: '#/components/schemas/SystemTypeEnum'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        host:
          $ref: '#/components/schemas/SysHost'
        enabled:
          $ref: '#/components/schemas/Enabled'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/Credential'
        bucketName:
          $ref: '#/components/schemas/BucketName'
        rootDir:
          $ref: '#/components/schemas/RootDir'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        isPublic:
          type: boolean
        isDynamicEffectiveUser:
          type: boolean
        canExec:
          type: boolean
          description: Indicates if system can be used to execute jobs.
        canRunBatch:
          type: boolean
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
          default: false
        allowChildren:
          type: boolean
          default: false
          description: Indicates if system allows for the creation of child systems.
        parentId:
          $ref: '#/components/schemas/ParentSysId'
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
          default: 2147483647
        jobMaxJobsPerUser:
          type: integer
          default: 2147483647
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        sharedWithUsers:
          type: array
          items:
            type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
        uuid:
          type: string
          format: uuid
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    # --- SystemHistory ------------------------------------------------------------------
    SystemHistory:
      type: object
      properties:
        jwtTenant:
          type: string
        jwtUser:
          $ref: '#/components/schemas/UserNameString'
        oboTenant:
          type: string
        oboUser:
          $ref: '#/components/schemas/UserNameString'
        operation:
          $ref: '#/components/schemas/OperationTypeEnum'
        description:
          type: string
        created:
          type: string
    # --- JobRuntime ------------------------------------------------------------------
    JobRuntime:
      type: object
      required:
        - runtimeType
      properties:
        runtimeType:
          $ref: '#/components/schemas/RuntimeTypeEnum'
        version:
          type: string
    # --- SchedulerProfile ------------------------------------------------------------------
    SchedulerProfile:
      type: object
      required:
        - name
      properties:
        tenant:
          type: string
        name:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          $ref: '#/components/schemas/UserNameApiDefaultString'
        moduleLoads:
          type: array
          items:
            $ref: '#/components/schemas/ModuleLoadSpec'
        hiddenOptions:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerHiddenOptionEnum'

    # --- ModuleLoadSpec ------------------------------------------------------------------
    ModuleLoadSpec:
      type: object
      required:
        - moduleLoadCommand
      properties:
        moduleLoadCommand:
          type: string
          minLength: 1
        modulesToLoad:
          type: array
          items:
            type: string
            minLength: 1

    # --- LogicalQueue ------------------------------------------------------------------
    LogicalQueue:
      type: object
      required:
        - name
        - hpcQueueName
      properties:
        name:
          $ref: '#/components/schemas/QueueNameString'
        hpcQueueName:
          $ref: '#/components/schemas/QueueNameString'
        maxJobs:
          type: integer
          default: 2147483647
        maxJobsPerUser:
          type: integer
          default: 2147483647
        minNodeCount:
          type: integer
        maxNodeCount:
          type: integer
        minCoresPerNode:
          type: integer
        maxCoresPerNode:
          type: integer
        minMemoryMB:
          type: integer
        maxMemoryMB:
          type: integer
        minMinutes:
          type: integer
        maxMinutes:
          type: integer
    # --- Capability ------------------------------------------------------------------
    Capability:
      type: object
      required:
        - category
        - name
        - datatype
      properties:
        category:
          $ref: '#/components/schemas/CategoryEnum'
        name:
          type: string
        datatype:
          $ref: '#/components/schemas/DatatypeEnum'
        precedence:
          type: integer
        value:
          type: string
    # --- Credential ------------------------------------------------------------------
    Credential:
      type: object
      properties:
        authnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        loginUser:
          $ref: '#/components/schemas/UserNameString'
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        tmsPrivateKey:
          type: string
        tmsPublicKey:
          type: string
        tmsFingerprint:
          type: string
        certificate:
          type: string
    # --- ShareInfo ------------------------------------------------------------------
    ShareInfo:
      type: object
      required:
        - public
        - userList
      properties:
        public:
          type: boolean
        userList:
          type: array
          items:
            $ref: '#/components/schemas/UserNameString'
    # --- KeyValuePair -------------------------------------------------------
    KeyValuePair:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          default: ""
        description:
          $ref: '#/components/schemas/DescriptionString'
        inputMode:
          $ref: '#/components/schemas/KeyValueInputModeEnum'
        notes:
          type: object

    # --- String types with constraints ------------------------------------
    SysHost:
      type: string
      minLength: 1
      maxLength: 256
      description: FQDN, IP address, Globus endpoint ID or Globus collection ID.
    HostString:
      type: string
      minLength: 1
      maxLength: 256
    SysId:
      type: string
      minLength: 1
      maxLength: 80
      description: Short descriptive name for the system that is unique within the tenant.
    DtnSysId:
      type: string
      minLength: 1
      maxLength: 80
      description: An alternate system to use as a Data Transfer Node (DTN) during job execution.
    ParentSysId:
      type: string
      minLength: 1
      maxLength: 80
      description: Parent system associated with this child system.
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    EffectiveUserId:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
      description: Username to use when accessing the system. A specific user (such as a service account) or the dynamic user ``${apiUserId}``.
    Enabled:
      type: boolean
      default: true
      description: Indicates if system is currently considered active and available for use.
    UserNameApiDefaultString:
      type: string
      minLength: 1
      maxLength: 60
      default: "${apiUserId}"
    DescriptionString:
      type: string
      maxLength: 2048
      description: Optional more verbose description.
    BucketName:
      type: string
      description: Name of the bucket for an S3 type system.
    ArgDescriptionString:
      type: string
      maxLength: 8096
    RootDir:
      type: string
      maxLength: 4096
      description: Effective root directory to be used when listing files or moving files to and from the system.
    DirString:
      type: string
      minLength: 1
      maxLength: 4096
    TagString:
      type: string
      minLength: 1
      maxLength: 128
    QueueNameString:
      type: string
      minLength: 1
      maxLength: 128

    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    ReqPostSystem:
      type: object
      required:
        - id
        - systemType
        - host
        - defaultAuthnMethod
        - canExec
      properties:
        id:
          $ref: '#/components/schemas/SysId'
        description:
          $ref: '#/components/schemas/DescriptionString'
        systemType:
          $ref: '#/components/schemas/SystemTypeEnum'
        owner:
          type: string
          description: A specific user set at system creation.
        host:
          $ref: '#/components/schemas/SysHost'
        enabled:
          $ref: '#/components/schemas/Enabled'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        authnCredential:
          $ref: '#/components/schemas/ReqPostPutCredential'
        bucketName:
          type: string
          description: Name of the bucket for an S3 type system.
        rootDir:
          $ref: '#/components/schemas/RootDir'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        canExec:
          type: boolean
          description: Indicates if system can be used to execute jobs.
        canRunBatch:
          type: boolean
          default: false
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
          default: false
          description: Indicates if system allows a job submission request to specify a *cmdPrefix*.
        allowChildren:
          type: boolean
          default: false
          description: Indicates if system allows for the creation of child systems.
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
          description: List of tags as simple strings.
        notes:
          type: object
          description: Metadata in the form of a Json object. Not used by Tapis.
    ReqPostChildSystem:
      type: object
      required:
        - effectiveUserId
        - rootDir
      properties:
        id:
          $ref: '#/components/schemas/SysId'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        rootDir:
          $ref: '#/components/schemas/RootDir'
    ReqPutSystem:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        host:
          $ref: '#/components/schemas/SysHost'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
          default: false
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        canRunBatch:
          type: boolean
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
          default: false
        allowChildren:
          type: boolean
          default: false
          description: Indicates if system allows for the creation of child systems.
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPatchSystem:
      type: object
      properties:
        description:
          $ref: '#/components/schemas/DescriptionString'
        host:
          $ref: '#/components/schemas/SysHost'
        effectiveUserId:
          $ref: '#/components/schemas/EffectiveUserId'
        defaultAuthnMethod:
          $ref: '#/components/schemas/AuthnEnum'
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          $ref: '#/components/schemas/HostString'
        proxyPort:
          type: integer
          format: int32
        dtnSystemId:
          $ref: '#/components/schemas/DtnSysId'
        canRunBatch:
          type: boolean
          description: Indicates if system supports running jobs using a batch scheduler.
        enableCmdPrefix:
          type: boolean
        allowChildren:
          type: boolean
          description: Indicates if system allows for the creation of child systems.
        mpiCmd:
          type: string
          minLength: 1
          maxLength: 126
        jobRuntimes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/JobRuntime'
        jobWorkingDir:
          $ref: '#/components/schemas/DirString'
        jobEnvVariables:
          type: array
          items:
            $ref: '#/components/schemas/KeyValuePair'
        jobMaxJobs:
          type: integer
        jobMaxJobsPerUser:
          type: integer
        batchScheduler:
          $ref: '#/components/schemas/SchedulerTypeEnum'
        batchLogicalQueues:
          type: array
          items:
            $ref: '#/components/schemas/LogicalQueue'
        batchDefaultLogicalQueue:
          $ref: '#/components/schemas/QueueNameString'
        batchSchedulerProfile:
          $ref: '#/components/schemas/IdString'
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagString'
        notes:
          type: object
    ReqPostPutCredential:
      type: object
      properties:
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        certificate:
          type: string
    ReqUpdateCredential:
      type: object
      properties:
        loginUser:
          $ref: '#/components/schemas/UserNameString'
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
        certificate:
          type: string
    ReqPerms:
      type: object
      required:
        - permissions
      properties:
        permissions:
          type: array
          minItems: 1
          items:
            type: string
    ReqSearchSystems:
      type: object
      required:
        - search
      properties:
        search:
          type: array
          minItems: 1
          items:
            type: string
    ReqMatchConstraints:
      type: object
      required:
        - match
      properties:
        match:
          type: array
          minItems: 1
          items:
            type: string
    ReqPostSchedulerProfile:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/IdString'
        description:
          $ref: '#/components/schemas/DescriptionString'
        owner:
          type: string
        moduleLoads:
          type: array
          items:
            $ref: '#/components/schemas/ModuleLoadSpec'
        hiddenOptions:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerHiddenOptionEnum'
    ReqShareUpdate:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          minItems: 1
          items:
            type: string
    ReqUnlinkChildren:
      type: object
      properties:
        childSystemIds:
          type: array
          description: List containing the IDs of the child systems to unlink from the parent system.
          minItems: 1
          items:
            $ref: '#/components/schemas/IdString'
 
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: object
        metadata:
          type: object
    RespBoolean:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultBoolean'
        metadata:
          type: object
    ResultBoolean:
      type: object
      properties:
        aBool:
          type: boolean
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
        metadata:
          type: object
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
        metadata:
          type: object
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
        metadata:
          type: object
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string
    RespSystem:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/TapisSystem'
        metadata:
          type: object
    RespSystems:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TapisSystem'
        metadata:
          type: object
          properties:
            recordCount:
              type: integer
            recordLimit:
              type: integer
            recordsSkipped:
              type: integer
            orderBy:
              type: string
            startAfter:
              type: string
            totalCount:
              type: integer
    RespSystemHistory:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/SystemHistory'
        metadata:
          type: object
    RespCredential:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/Credential'
        metadata:
          type: object
    RespSchedulerProfile:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/SchedulerProfile'
        metadata:
          type: object
    RespSchedulerProfiles:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/SchedulerProfile'
        metadata:
          type: object
    RespGlobusAuthUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ResultGlobusAuthUrl'
        metadata:
          type: object
    ResultGlobusAuthUrl:
      type: object
      properties:
        url:
          type: string
        sessionId:
          type: string
        systemId:
          type: string
    RespShareInfo:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        commit:
          type: string
        build:
          type: string
        result:
          $ref: '#/components/schemas/ShareInfo'
        metadata:
          type: object

    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    SystemTypeEnum:
      type: string
      description: Type of system
      enum:
        - LINUX
        - S3
        - IRODS
        - GLOBUS
    ListTypeEnum:
      type: string
      default: OWNED
      enum:
        - OWNED
        - SHARED_PUBLIC
        - ALL
    AuthnEnum:
      type: string
      enum:
        - PASSWORD
        - PKI_KEYS
        - ACCESS_KEY
        - TOKEN
        - TMS_KEYS
        - CERT
    CategoryEnum:
      type: string
      enum:
        - SCHEDULER
        - OS
        - HARDWARE
        - SOFTWARE
        - JOB
        - CONTAINER
        - MISC
        - CUSTOM
    DatatypeEnum:
      type: string
      enum:
        - STRING
        - INTEGER
        - BOOLEAN
        - NUMBER
        - TIMESTAMP
    RuntimeTypeEnum:
      type: string
      enum:
        - DOCKER
        - SINGULARITY
        - ZIP
    SchedulerTypeEnum:
      type: string
      enum:
        - SLURM
        - CONDOR
        - PBS
        - SGE
        - UGE
        - TORQUE
    SchedulerHiddenOptionEnum:
      type: string
      enum:
        - MEM
        - PARTITION
    OperationTypeEnum:
      type: string
      enum:
        - CREATE
        - READ
        - MODIFY
        - EXECUTE
        - DELETE
        - UNDELETE
        - CHANGE_OWNER
        - ENABLE
        - DISABLE
        - GET_PERMS
        - REVOKE_PERMS
        - SET_CRED
        - REMOVE_CRED
        - GET_CRED
    KeyValueInputModeEnum:
      type: string
      enum:
        - REQUIRED
        - FIXED
        - INCLUDE_ON_DEMAND
        - INCLUDE_BY_DEFAULT
      default: INCLUDE_BY_DEFAULT
openapi: "3.0.2"

info:
  title: "Tenants API"
  description: "Manage Tapis Tenants."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Tenants API"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/tenants-api"

servers:
- url: http://localhost:5000
  description: Local Development
- url: https://dev.develop.tapis.io
  description: Develop Instance

#security:
#  - wso2jwtDevAuth: []
#  - nonce: []

paths:
  /v3/sites:
    get:
      tags:
        - Sites
      summary: List sites.
      description: List sites.
      operationId: list_sites
      x-swagger-router-controller: connexContr
      parameters:
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: offset
          in: query
          description: index (offset) to start list.
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfSites'
    post:
      tags:
        - Sites
      summary: Create a site.
      description: Create a site.
      operationId: create_site
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSite'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Site'

  /v3/sites/{site_id}:
    get:
      tags:
        - Sites
      summary: Get site details
      description: Get details of a specific site by its id.
      operationId: get_site
      parameters:
        - name: site_id
          in: path
          description: Unique ID of the site
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Site'
    delete:
      tags:
        - Sites
      summary: Delete a site
      description: Permenantly delete a site.
      operationId: delete_site
      parameters:
        - name: site_id
          in: path
          description: Unique ID of the site
          required: true
          schema:
            type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


  /v3/tenants:
    get:
      tags:
      - Tenants
      summary: List tenants.
      description: List tenants.
      operationId: list_tenants
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfTenants'
    post:
      tags:
      - Tenants
      summary: Create a tenant.
      description: Create a tenant.
      operationId: create_tenant
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Tenant'

  /v3/tenants/{tenant_id}:
    get:
      tags:
      - Tenants
      summary: Get tenant details
      description: Get details of a specific tenant by its id.
      operationId: get_tenant
      parameters:
      - name: tenant_id
        in: path
        description: Unique ID of the tenant
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Tenant'
    put:
      tags:
      - Tenants
      summary: Update a tenant
      description: Update certain fields on an exsiting tenant.
      operationId: update_tenant
      parameters:
      - name: tenant_id
        in: path
        description: Unique ID of the tenant
        required: true
        schema:
          type: string
      requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/UpdateTenant'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Tenant'

  /v3/tenants/{tenant_id}/history:
    get:
      tags:
      - Tenants
      summary: Get tenant history
      description: Get history log for a specific tenant by its id.
      operationId: get_tenant_history
      parameters:
      - name: tenant_id
        in: path
        description: Unique ID of the tenant
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfTenantHistory'

  /v3/tenants/ldaps:
    get:
      tags:
      - Tenants
      - Ldaps
      summary: List ldaps
      description: List ldaps
      operationId: list_ldaps
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfLDAPs'
    post:
      tags:
      - Tenants
      - Ldaps
      operationId: create_ldap
      summary: Create an ldap
      description: Create an ldap
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLDAP'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/LDAP'

  /v3/tenants/ldaps/{ldap_id}:
    get:
      tags:
      - Tenants
      - Ldaps
      summary: Get ldap details
      description: Get details of a specific ldap by its id.
      operationId: get_ldap
      parameters:
      - name: ldap_id
        in: path
        description: Unique ID of the ldap
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/LDAP'
    delete:
      tags:
      - Tenants
      - Ldaps
      summary: Delete ldap
      description: Permenantly delete an ldap.
      operationId: delete_ldap
      parameters:
      - name: ldap_id
        in: path
        description: Unique ID of the ldap
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]

  /v3/tenants/owners:
    get:
      tags:
      - Tenants
      - Owners
      summary: List owners
      description: List owners
      operationId: list_owners
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfOwners'
    post:
      tags:
      - Tenants
      - Owners
      summary: Create an owner
      description: Create an owner
      operationId: create_owner
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Owner'

  /v3/tenants/owners/{email}:
    get:
      tags:
      - Tenants
      - Owners
      summary: Get owner details
      description: Get details of a specific owner by its email address.
      operationId: get_owner
      parameters:
      - name: email
        in: path
        description: Email address of the owner
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Owner'
    delete:
      tags:
      - Tenants
      - Owners
      summary: Delete owner
      description: Permenantly delete an owner.
      operationId: delete_owner
      parameters:
      - name: email
        in: path
        description: Email addres of the owner
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, error]

    NewLDAP:
      type: object
      properties:
        ldap_id:
          type: string
          description: Unique id for the LDAP object.
        url:
          type: string
          description: url to the LDAP
        port:
          type: integer
          description: port for the LDAP
        use_ssl:
          type: boolean
          description: Whether to use SSL with the LDAP
        user_dn:
          type: string
          description: base DN for users
        bind_dn:
          type: string
          description: DN used for binding to the LDAP.
        bind_credential:
          type: string
          description: Pointed to a Tapis credential for binding to the LDAP.
        account_type:
          type: string
          description: Whether this LDAP is used for service accounts or user accounts.
          enum: [service, user]
      required: [ldap_id, url, port, use_ssl, user_dn, bind_dn, bind_credential, account_type]


    LDAP:
      type: object
      properties:
        ldap_id:
          type: string
          description: Unique id for the LDAP object.
        url:
          type: string
          description: url to the LDAP
        port:
          type: integer
          description: port for the LDAP
        use_ssl:
          type: boolean
          description: Whether to use SSL with the LDAP
        user_dn:
          type: string
          description: base DN for users
        bind_dn:
          type: string
          description: DN used for binding to the LDAP.
        bind_credential:
          type: string
          description: Pointed to a Tapis credential for binding to the LDAP.
        account_type:
          type: string
          description: Whether this LDAP is used for service accounts or user accounts.
          enum: [service, user]
        create_time:
          type: string
          description: The time the client was created.
        last_update_time:
          type: string
          description: The time the client was last updated.

    arrayOfLDAPs:
      type: array
      items:
        $ref: '#/components/schemas/LDAP'

    NewTenant:
      type: object
      properties:
        tenant_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier for the tenant.
        base_url:
          type: string
          description: The base URL for the tenant.
        site_id:
          type: string
          description: The site for which the tenant belongs.
        token_service:
          type: string
          description: The resolvable location of the token service for the tenant.
        security_kernel:
          type: string
          description: The resolvable location of the security kernel for the tenant.
        authenticator:
          type: string
          description: The resolvable location of the authenticator for the tenant.
        owner:
          type: string
          description: The email address of the primary owner and contact for the tenant.
        admin_user:
          type: string
          description: The username of the user that is automatically assigned the tenant_admin role by the Security Kernel.
        token_gen_services:
          type: array
          items:
            type: string
            pattern: "^[a-zA-Z0-9-]*$"
          description: The list of services that are automatically granted the token_generator role for this tenant by the Security Kernel.
        service_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for service accounts in the tenant.
        user_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for user accounts in the tenant.
        status:
          type: string
          enum:
            - draft
            - active
            - inactive
          description: The status of the tenant; Tenants can be created in "draft" status without a public key; Tenants in both "inactive" and "draft" status are by default not returned in the tenants listing.
        public_key:
          type: string
          description: The public key associated with the private key used for signing tokens in this tenant. Note that the public key is optional in that tenants can be created without the public key but only in "draft" status.
        description:
          type: string
          description: A description of the tenant.
      required: [tenant_id, base_url, site_id, token_service, security_kernel, authenticator, owner, admin_user, token_gen_services]

    UpdateTenant:
      type: object
      properties:
        token_service:
          type: string
          description: The resolvable location of the token service for the tenant.
        security_kernel:
          type: string
          description: The resolvable location of the security kernel for the tenant.
        authenticator:
          type: string
          description: The resolvable location of the authenticator for the tenant.
        owner:
          type: string
          description: The email address of the primary owner and contact for the tenant.
        admin_user:
          type: string
          description: The username of the user that is automatically assigned the tenant_admin role by the Security Kernel.
        token_gen_services:
          type: array
          items:
            type: string
            pattern: "^[a-zA-Z0-9-]*$"
          description: The list of services that are automatically granted the token_generator role for this tenant by the Security Kernel.
        service_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for service accounts in the tenant.
        user_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for user accounts in the tenant.
        public_key:
          type: string
          description: The public key that should be used to validate the signatures of JWTs associated with the tenant.
        status:
          type: string
          enum:
            - draft
            - active
            - inactive
          description: The status of the tenant; Tenants can be created in "draft" status without a public key; Tenants in both "inactive" and "draft" status are by default not returned in the tenants listing.
        description:
          type: string
          description: A description of the tenant.


    Tenant:
      type: object
      properties:
        tenant_id:
          type: string
          pattern: (\w)*
          description: The unique identifier for the tenant.
        base_url:
          type: string
          description: The base URL for the tenant.
        site_id:
          type: string
          description: The site for which the tenant belongs.
        token_service:
          type: string
          description: The resolvable location of the token service for the tenant.
        security_kernel:
          type: string
          description: The resolvable location of the security kernel for the tenant.
        authenticator:
          type: string
          description: The resolvable location of the authenticator for the tenant.
        owner:
          type: string
          description: The email address of the primary owner and contact for the tenant.
        admin_user:
          type: string
          description: The username of the user that is automatically assigned the tenant_admin role by the Security Kernel.
        token_gen_services:
          type: array
          items:
            type: string
            pattern: "^[a-zA-Z0-9-]*$"
          description: The list of services that are automatically granted the token_generator role for this tenant by the Security Kernel.
        service_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for service accounts in the tenant.
        user_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for user accounts in the tenant.
        public_key:
          type: string
          description: The public key that should be used to validate the signatures of JWTs associated with the tenant.
        description:
          type: string
          description: A description of the tenant.
        created_by:
          type: string
          description: The API identity who created this tenant.
        last_updated_by:
          type: string
          description: The API identity that last updated this tenant.
        create_time:
          type: string
          description: The time the client was created.
        last_update_time:
          type: string
          description: The time the client was last updated.
      required: [tenant_id, base_url, site_id, token_service, security_kernel, authenticator, owner]

    arrayOfTenants:
      type: array
      items:
        $ref: '#/components/schemas/Tenant'

    TenantHistory:
      type: object
      properties:
        tenant_id:
          type: string
          description: The tenant_id that was updated.
        update_time:
          type: string
          description: The time this update occurred.
        updated_by:
          type: string
          description: The API identity that made the update.
        updates:
          type: object
          description: The set of changes that were made with this update.


    arrayOfTenantHistory:
      type: array
      items:
        $ref: '#/components/schemas/TenantHistory'

    NewSite:
      type: object
      properties:
        site_id:
          type: string
          description: The unique identifier for the site.
        base_url:
          type: string
          description: The base URL for the site.
        primary:
          type: boolean
          description: Whether the site is the primary site.
        services:
          type: array
          items:
            type: string
            pattern: "^[a-zA-Z0-9-]*$"
          description: The list of services for this site.
        tenant_base_url_template:
          type: string
          description: For primary site only; The template string represening the base URL for a tenant.
        site_admin_tenant_id:
          type: string
          description: Tenant ID of this site's tenant.
      required: [site_id, base_url, primary, services, site_admin_tenant_id]

    Site:
      type: object
      properties:
        site_id:
          type: string
          pattern: (\w)*
          description: The unique identifier for the site.
        base_url:
          type: string
          description: The base URL for the site.
        primary:
          type: boolean
          description: Whether the site is the primary site.
        services:
          type: array
          items:
            type: string
            pattern: "^[a-zA-Z0-9-]*$"
          description: The list of services for this site.
        tenant_base_url_template:
          type: string
          description: The tenant base url template.
        site_admin_tenant_id:
          type: string
          description: Tenant ID of this site's tenant.
      required: [site_id, services, site_admin_tenant_id]

    arrayOfSites:
      type: array
      items:
        $ref: '#/components/schemas/Site'


    Owner:
      type: object
      properties:
        name:
          type: string
          description: Full name of the owner.
        email:
          type: string
          description: Email address for the owner.
        institution:
          type: string
          description: The owner's institution.
        create_time:
          type: string
          description: The time the client was created.
        last_update_time:
          type: string
          description: The time the client was last updated.
      required: [name, email, institution]

    arrayOfOwners:
      type: array
      items:
        $ref: '#/components/schemas/Owner'
openapi: "3.0.2"

info:
  title: "Tokens API"
  description: "Manage Tapis Tokens."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Tenants API"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/tokens-api"

servers:
- url: http://localhost:5000
  description: Local Development
- url: http://localhost:5001
  description: Local Development II
- url: http://tokens:5000
  description: Local Development III


paths:

  /v3/tokens/hello:
    get:
      tags:
        - Health Check
      description: Logged connectivity test. No authorization required.
      operationId: hello
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
        '500':
          description: Server error.
  /v3/tokens/ready:
    get:
      tags:
        - Health Check
      description: Logged connectivity test. No authorization required.
      operationId: ready
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicResponse'
        '500':
          description: Server error.
  /v3/tokens:
    post:
      tags:
      - Tokens
      summary: Generate a token.
      description: Generate a token.
      operationId: create_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTokenRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/NewTokenResponse'
    put:
      tags:
      - Tokens
      summary: Generate a new token from a refresh token.
      description: Generate a new token from a refresh token.
      operationId: refresh_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/NewTokenResponse'

  /v3/tokens/revoke:
    post:
      tags:
      - Tokens
      summary: Revoke a token.
      description: Revoke a Tapis JWT. Pass the token to revoke in the body of the request. Once revoked, a token cannot be unrevoked. 
      operationId: revoke_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeTokenRequest'
      responses:
        '200':
          description: Token Revoked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'

  /v3/tokens/keys:
    put:
      tags:
      - Tokens
      - Keys
      summary: Update the signing key pair for a tenant.
      description: Generates a new public/private key pair for token signatures and updates the tenant definition accordingly. Returns the public key.
      operationId: update_keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSigningKeysRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/NewSigningKeysResponse'



components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic

  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, error]

    NewTokenRequest:
      type: object
      properties:
        account_type:
          type: string
          enum: [user, service]
          description: The type of account (user or service) represented by the token.
        token_tenant_id:
          type: string
          description: The tenant associated with the token to be generated.
        token_username:
          type: string
          description: The username associated with the token to be generated.
        target_site_id:
          type: string
          description: The site_id for the site where this token will be used. Only used when account_type is "service". If not provided, the site_id for the token_tenant_id will be used.
        delegation_token:
          type: boolean
          description: Whether the generated token should be a delegation token.
        delegation_sub_tenant_id:
          type: string
          description: The tenant_id associated with the subject who used a delegation authority in creating the delegation token.
        delegation_sub_username:
          type: string
          description: The username associated with the subject who used a delegation authority in creating the delegation token.
        access_token_ttl:
          type: integer
          description: The TTL, in seconds, for the generated token.
        generate_refresh_token:
          type: boolean
          description: Whether to also generate a refresh token.
        refresh_token_ttl:
          type: integer
          description: The TTL, in seconds, for the refresh token (if generated).
        claims:
          type: object
          description: JSON object of additional claims to add to the standard claims issued with the token. Note - standard claims cannot be modified through this parameter.
      required: [account_type, token_tenant_id, token_username]

    NewTokenResponse:
      type: object
      properties:
        access_token:
          $ref: '#/components/schemas/NewAccessTokenResponse'
        refresh_token:
          $ref: '#/components/schemas/NewRefreshTokenResponse'

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: The refresh token being used to get a new access token.

    NewAccessTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: The generated access token.
        expires_at:
          type: string
          description: The date-time string when the generated access token expires.
        expires_in:
          type: integer
          description: The time, in seconds, when the generated access token expires.

    NewRefreshTokenResponse:
      type: object
      properties:
        refresh_token:
          type: string
          description: The generated refresh token.
        expires_at:
          type: string
          description: The date-time string when the generated refresh token expires.
        expires_in:
          type: integer
          description: The time, in seconds, when the generated refresh token expires.

    RevokeTokenRequest:
      type: object
      properties:
        token:
          type: string
          description: The Tapis JWT to revoke.

    NewSigningKeysRequest:
      type: object
      properties:
        tenant_id:
          type: string
          description: The tenant to generate the new signing key pair for.

    NewSigningKeysResponse:
      type: object
      properties:
        public_key:
          type: string
          description: The newly generated public key.
openapi: 3.0.3
info:
  title: Tapis Workflows API
  description: Create and manage pipelines
  version: '1.6.0'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Workflows API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8000/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
  - url: 'https://raw.githubusercontent.com'
security:
  - TapisJWT: []
tags:
  - name: Workflows
    description: Manage Pipeline and Task resources. Create, retrieve, update, etc.
  - name: General
    description: General service health and readiness
  - name: Groups
    description: Manage groups that have access to specific workflow resources. Create, retrieve, update, etc.
  - name: Users
    description: Manage users that belong to groups. Create, update, remove, etc.
  - name: Identities
    description: Manage external identities . Create, retrieve, delete.
  - name: Pipelines
    description: Manage collections of tasks. Create, retrieve and delete.
  - name: PipelineLocks
    description: Create locks help to manage concurrent state mutations between pipeline runs.
  - name: Tasks
    description: Manage tasks to be executed as part of a workflow. Create, retrieve and delete.
  - name: CI/CD
    description: Create CI/CD-specific workflows (Image builds and http requests).
  - name: ETL
    description: Create ETL pipelines within the Tapis ecosystem.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------

# -- Paths for groups ---
paths:
  '/v3/workflows/healthcheck':
    get:
      tags:
        - General
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespObject'
        '500':
          description: Server error.

  # '/v3/workflows/readycheck':
  #   get:
  #     tags:
  #       - General
  #     description: Health check.
  #     operationId: readyCheck
  #     responses:
  #       '200':
  #         description: Message received.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RespObject'
  #       '500':
  #         description: Server error.
          
  '/v3/workflows/groups':
    get:
      tags:
        - Groups
      summary: Retrieve groups
      description: |
        Retrieve all groups to which the user belongs
      operationId: listGroups
      responses:
        '200':
          description: List groups successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupList'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Groups
      summary: Create a group
      description: |
        Create a group that perform CRUD operations on workflow resources.

        The owner of the group will be made an admin by default. If you want to set other users as admins,
        you must use the '' endpoint.
      operationId: createGroup
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGroup'
      responses:
        '201':
          description: Group created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict. Group with provided id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}':
    get:
      tags:
        - Groups
      summary: Retrieve group details
      description: |
        Retrieve details for a given group id
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: getGroup
      responses:
        '200':
          description: Get group successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupDetail'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    delete:
      tags:
        - Groups
      summary: Delete a group
      description: Delete a group and all of the objects that belong to them
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: deleteGroup
      responses:
        '200':
          description: Delete group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/secrets':
    get:
      tags:
        - Secrets
      summary: Retrieve secrets
      description: |
        Retrieve all secrets for a user
      operationId: listSecrets
      responses:
        '200':
          description: List secrets successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecretList'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Secrets
      summary: Create a secret
      description: |
        Create a secret.
      operationId: createSecret
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateSecret'
      responses:
        '201':
          description: Secert created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecret'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict. Secret with provided id already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/secrets/{secret_id}':
    get:
      tags:
        - Secrets
      summary: Retrieve a secret
      description: |
        Retrieve a secret
      parameters:
        - name: secret_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: getSecret
      responses:
        '200':
          description: Get secret successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSecret'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    delete:
      tags:
        - Secrets
      summary: Delete a secret
      description: Delete a secret and all of the objects that belong to them
      parameters:
        - name: secret_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: deleteSecret
      responses:
        '200':
          description: Delete secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove a user to this secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Secret does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/users':
    get:
      tags:
        - Users
      summary: List users
      description: |
        List users.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: listGroupUsers
      responses:
        '200':
          description: List Users successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupUserList'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Users
      summary: Add a user to a group
      description: |
        Add a user to a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: addGroupUser
      requestBody:
        required: true
        description: A JSON object specifying the group user to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGroupUser'
      responses:
        '201':
          description: Users successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot add a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/users/{username}':
    get:
      tags:
        - Users
      summary: Get group user
      description: |
        Get a user from a group
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      operationId: getGroupUser
      responses:
        '200':
          description: Get Group User successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupUser'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    patch:
      tags:
        - Users
      summary: Update group user
      description: |
        Update a user for a specified group. Only group admins can perform this operation.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      requestBody:
        required: true
        description: A JSON object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateGroupUser'
      operationId: updateGroupUser
      responses:
        '200':
          description: User updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupUser'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot update user permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group or user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    delete:
      tags:
        - Users
      summary: Remove user from group
      description: |
        Remove a user from a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      operationId: removeGroupUser
      responses:
        '200':
          description: User removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupUser'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove a user to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/secrets':
    get:
      tags:
        - GroupSecrets
      summary: List group secrets
      description: |
        List group_secrets.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: listGroupSecrets
      responses:
        '200':
          description: List Group Secrets successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupSecretList'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - GroupSecrets
      summary: Add a user's secret to a group
      description: |
        Add a user's secret to a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: addGroupSecret
      requestBody:
        required: true
        description: A JSON object specifying the GroupSecret to add.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqGroupSecret'
      responses:
        '201':
          description: GroupSecret successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupSecret'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot add a secret to this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/secrets/{group_secret_id}':
    get:
      tags:
        - GroupSecrets
      summary: Get group secret
      description: |
        Get a group secret
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: group_secret_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: getGroupSecret
      responses:
        '200':
          description: Get GroupSecret successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespGroupSecret'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    
    delete:
      tags:
        - GroupSecrets
      summary: Remove user from group
      description: |
        Remove a user from a group.
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: group_secret_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: removeGroupSecret
      responses:
        '200':
          description: GroupSecret removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespObject'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove a secret from this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group or GroupSecret does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  # --- Paths for identities ---
  '/v3/workflows/identities':
    post:
      tags:
        - Identities
      summary: Create an identity
      description: |
        Create a mapping between a group user and an external identity.

        Users can only create identities for themselves. i.e., group admins and owners cannot
        create identities for any user but themselves.
      operationId: createIdentity
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqIdentity'
      responses:
        '201':
          description: Identity created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict. An identity already exists for this group and type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    get:
      tags:
        - Identities
      summary: List user identities for a given user
      description: |
        Retrieve identities for the requesting user
      operationId: listIdentities
      responses:
        '200':
          description: List identities successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespIdentityList'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/identities/{identity_uuid}':
    delete:
      tags:
        - Identities
      summary: Delete an identity
      description: |
        Delete an identitiy
      parameters:
        - name: identity_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: deleteIdentity
      responses:
        '200':
          description: Identity removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove identities for users for this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        
    get:
      tags:
        - Identities
      summary: Get identity
      description: |
        Get a specific identity by its UUID
      operationId: getIdentity
      parameters:
        - name: identity_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List identities successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespIdentity'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot access resources for this Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  # --- Paths for ci pipelines -----------------------------------------------------
  '/v3/workflows/groups/{group_id}/ci':
    post:
      tags:
        - CI/CD
      summary: Create a CI/CD pipeline
      description: |
        Create a CI/CD pipeline using a request body. Pipeline id must be unique within a group and can be composed of
        alphanumeric characters and the following special characters [-_.].

        Note: When creating pipelines for the CI/CD use case(primarily building images), use this endpoint. It offers a simplified interface
        for those who want to avoid the complexities of creating a standard workflow. This pipeline's
        tasks may be modified later.
      operationId: createCIPipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCIPipeline'
      responses:
        '201':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  # --- Paths for ETL pipelines -----------------------------------------------------
  '/v3/workflows/beta/groups/{group_id}/etl':
    post:
      tags:
        - ETL
      summary: Create an ETL pipeline
      description: |
        Convenience endpoint for create ETL pipelines in the Tapis ecosystem.
      operationId: createETLPipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateETLPipeline'
      responses:
        '201':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  # --- Paths for archives ------------------------------------------------------
  '/v3/workflows/groups/{group_id}/archives':
    get:
      tags:
        - Archives
      summary: Retrieve archives
      description: Retrieve a list of archives for in group
      operationId: listArchives
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespArchiveList'    
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Archives
      summary: Create an archive
      description: |
        Create an Archive. Archives are used to persist the results of a pipeline run
      operationId: createArchive
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ID"
      requestBody:
        required: true
        description: A JSON object specifying information for the archive to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqArchive'
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot create an archive for this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/archives/{archive_id}':
    get:
      tags:
        - Archives
      summary: Retrieve an archive
      description: Retrieve an archive 
      operationId: getArchive
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: archive_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespArchive'    
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  

  # --- Paths for pipelines -----------------------------------------------------
  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/changeOwner/{username}':
    patch:
      tags:
        - Pipelines
      summary: Change pipeline owner
      description: |
        Change the owner of a pipeline. Requesting user must be the current owner
      operationId: changePipelineOwner
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: username
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Username'
      # requestBody:
      #   required: false
      #   description: Empty JSON object.
      #   content:
      #     application/json:
      #       schema: {}
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespObject'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/archives':
    get:
      tags:
        - Pipeline Archives
      summary: Retrieve pipeline archives
      description: Retrieve a list of archives attached to a pipeline
      operationId: listPipelineArchives
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespArchiveList'    
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/archives/add':
    post:
      tags:
        - Pipelines
      summary: Add an archive to a pipeline
      description: |
        Add an archive to a pipeline.
      operationId: addPipelineArchive
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      # requestBody:
      #   required: false
      #   description: Empty JSON object.
      #   content:
      #     application/json:
      #       schema: {}
      responses:
        '200':
          description: Archive added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespObject'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/archives/remove':
    delete:
      tags:
        - Pipelines
      summary: Remove archive to a pipeline
      description: |
        Remove an archive to a pipeline.
      operationId: removePipelineArchive
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Archive added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespObject'

  '/v3/workflows/groups/{group_id}/pipelines':
    get:
      tags:
        - Pipelines
      summary: Retrieve pipelines
      description: Retrieve a list of pipelines for all groups that the requesting user belongs to.
      operationId: listPipelines
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineList'
                  
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict. Pipeline already exists with provided id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
    post:
      tags:
        - Pipelines
      summary: Create a pipeline
      description: |
        Create a pipeline using a request body. Pipeline id must be unique within a group and can be composed of
        alphanumeric characters and the following special characters [-_.].
      operationId: createPipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPipeline'
      responses:
        '201':
          description: Pipeline created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'
        '400':
          description: Bad request. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot create a pipeline for specified group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '405':
          description: Method not allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '409':
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '415':
          description: Unsupported media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '422':
          description: Unprocessable entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}':
    get:
      tags:
        - Pipelines
      summary: Retrieve pipeline details
      description: |
        Retrieve information for a pipeline given the pipeline id
      operationId: getPipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Pipeline found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipeline'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Pipeline not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

    delete:
      tags:
        - Pipelines
      summary: Delete a pipeline
      description: |
        Delete a pipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: deletePipeline
      responses:
        '200':
          description: Pipeline deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot remove identities for users for this group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks':
    post:
      tags:
        - Tasks
      summary: Create a task
      description: |
        Create a task for a pipeline
      operationId: createTask
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        description: A JSON object specifying information for the task to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqTask"
      responses:
        '201':
          description: Tasks created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'

    get:
      tags:
        - Tasks
      summary: List tasks
      description: |
        Retrieve all tasks for a given pipeline
      operationId: listTasks
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Tasks found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTaskList'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/tasks/{task_id}':
    get:
      tags:
        - Tasks
      summary: Retrieve task details
      description: |
        Retrieve task details for given pipeline id and task id
      operationId: getTask
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: task_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Task found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTask'
    patch:
      tags:
        - Tasks
      summary: Update task details
      description: Update details for a task
      operationId: patchTask
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: task_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        description: Request body for the pathTask operation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTask'

    delete:
      tags:
        - Tasks
      summary: Delete a task
      description: |
        Delete a task
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: task_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      operationId: deleteTask
      responses:
        '200':
          description: Task deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'
        '401':
          description: Not authorized. Invalid or Expired Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '403':
          description: Cannot delete task for this pipeline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
        '404':
          description: Task not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespError'
  
  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/runs':
    get:
      tags:
        - PipelineRuns
      summary: Pipeline Runs
      description: |
        List runs for a pipeline
      operationId: listPipelineRuns
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Pipeline Run updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineRunList'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/locks':
    get:
      tags:
        - PipelineLocks
      summary: PipelineLocks
      description: List all locks for a given pipeline 
      operationId: listPipelineLocks
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      responses:
        '200':
          description: Pipeline Locks listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineLockList'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/locks/{pipeline_lock_uuid}':
    get:
      tags:
        - PipelineLocks
      summary: PipelineLocks
      description: Get a pipeline lock by its UUID 
      operationId: getPipelineLock
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_lock_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Pipeline Lock fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineLock'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/runs/{pipeline_run_uuid}':
    post:
      tags:
        - PipelineRuns
      summary: Terminate a running pipeline
      description: Terminate a running pipeline
      operationId: terminatePipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pipeline terminated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineRun'
    get:
      tags:
        - PipelineRuns
      summary: Pipeline Runs
      description: |
        Get a pipeline run
      operationId: getPipelineRun
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Pipeline Run updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineRun'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/runs/{pipeline_run_uuid}/locks':
    post:
      tags:
        - PipelineRuns
      summary: PipelineRuns
      description: Attempt to acquire a lock on a Pipeline 
      operationId: acquirePipelineLock
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Data about the pipeline run attempting to acquire a lock.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqPipelineLock"
      responses:
        '200':
          description: Pipeline lock acquisition attempted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineLockAcquisition'
    delete:
      tags:
        - PipelineLocks
      summary: PipelineLocks
      description: Release a lock on the Pipeline 
      operationId: releasePipelineLock
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Pipeline lock released.
  
  '/v3/workflows/executor/runs/{pipeline_run_uuid}/{status}':
    patch:
      tags:
        - PipelineRuns
      summary: Pipeline Runs
      description: |
        Endpoints that update pipeline runs are only accessible to the Workflow Executor
      operationId: updatePipelineRunStatus
      parameters:
        - name: X-WORKFLOW-EXECUTOR-TOKEN
          in: header
          description: | 
            an authorization header that contains the token that authroizes the workflow executor to update the pipeline run status
          required: true
          schema:
            type: string
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EnumRunStatus"
      requestBody:
        required: false
        description: Empty JSON object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqPatchPipelineRun"
      responses:
        '200':
          description: Pipeline Run updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'

  '/v3/workflows/executor/executions/{task_execution_uuid}/{status}':
    patch:
      tags:
        - TaskExecutions
      summary: Task Executions
      description: |
        update a task execution status
      operationId: updateTaskExecutionStatus
      parameters:
        - name: X-WORKFLOW-EXECUTOR-TOKEN
          in: header
          description: | 
            an authorization header that contains the token that authroizes the workflow executor to update the pipeline run status
          required: true
          schema:
            type: string
        - name: task_execution_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EnumRunStatus"
      requestBody:
        required: false
        description: Empty JSON object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReqPatchTaskExecution"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespString'

  '/v3/workflows/executor/runs/{pipeline_run_uuid}/executions':
    post:
      tags:
        - TaskExecutions
      summary: Task Executions
      description: |
        Create a task execution
      operationId: createTaskExecution
      parameters:
        - name: X-WORKFLOW-EXECUTOR-TOKEN
          in: header
          description: | 
            an authorization header that contains the token that authroizes the workflow executor to create a task execution
          required: true
          schema:
            type: string
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: A JSON object for the createTaskExecution operation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateTaskExecution'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceURL'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/runs/{pipeline_run_uuid}/executions/{task_execution_uuid}':
    get:
      tags:
        - TaskExecutions
      summary: Task Executions
      description: |
        Get a Task Execution
      operationId: getTaskExecution
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: task_execution_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTaskExecution'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/runs/{pipeline_run_uuid}/executions':
    get:
      tags:
        - TaskExecutions
      summary: Task Executions
      description: |
        List Task Executions for a pipeline run
      operationId: listTaskExecutions
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_run_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespTaskExecutionList'

  '/v3/workflows/groups/{group_id}/pipelines/{pipeline_id}/run':
    post:
      tags:
        - Pipelines
      summary: Trigger a pipeline run
      description: |
        Trigger a pipeline run
      operationId: runPipeline
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
        - name: pipeline_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ID'
      requestBody:
        required: true
        description: A JSON object specifying information for the pipeline to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqRunPipeline'
      responses:
        '200':
          description: Pipeline triggered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespPipelineRun'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-TAPIS-TOKEN
      in: header
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    
    # --- Pipelines ---
    ExecutionProfile:
      type: object
      properties:
        invocation_mode:
          $ref: '#/components/schemas/EnumInvocationMode'
        max_retries:
          type: integer
          default: 0
        max_exec_time:
          type: integer
          default: 3600
        retry_policy:
          $ref: '#/components/schemas/EnumRetryPolicy'

    TaskExecutionProfile:
      allOf:
        - $ref: '#/components/schemas/ExecutionProfile'
        - type: object
          properties:
            flavor:
              $ref: '#/components/schemas/EnumTaskFlavor'

    PipelineExecutionProfile:
      allOf:
        - $ref: '#/components/schemas/ExecutionProfile'
        - type: object
          properties:
            duplicate_submission_policy:
              $ref: '#/components/schemas/EnumDuplicateSubmissionPolicy'

    BaseArchive:
      type: object
      required:
        - type
        - id
        - group
        - tenant_id
        - owner
        - archive_dir
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: "#/components/schemas/EnumArchiveType"
        group:
          type: string
          format: uuid
        tenant_id:
          $ref: '#/components/schemas/ID'
        owner:
          $ref: '#/components/schemas/Username'
        uuid:
          type: string
          format: uuid
        archive_dir:
          type: string

    S3Archive:
      allOf:
        - $ref: '#/components/schemas/BaseArchive'
        - type: object
          required:
            - endpoint
            - bucket
            - region
          properties:
            endpoint:
              type: string
            bucket:
              type: string
            region:
              type: string

    TapisSystemArchive:
      allOf:
        - $ref: '#/components/schemas/BaseArchive'
        - type: object
          required:
            - system_id
          properties:
            system_id:
              $ref: '#/components/schemas/ID'

    Archive:
      oneOf:
        - $ref: '#/components/schemas/TapisSystemArchive'
        - $ref: '#/components/schemas/S3Archive'
      discriminator:
        propertyName: type
        mapping:
          system: '#/components/schemas/TapisSystemArchive'
          s3: '#/components/schemas/S3Archive'

    Pipeline:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        uses:
          $ref: '#/components/schemas/Uses'
        env:
          $ref: "#/components/schemas/Env"
        enabled:
          type: boolean
        params:
          $ref: "#/components/schemas/Params"
        group:
          type: string
          format: uuid
        owner:
          $ref: '#/components/schemas/Username'
        uuid:
          type: string
          format: uuid
        execution_profile:
          $ref: '#/components/schemas/PipelineExecutionProfile'
        current_run:
          type: string
          format: uuid
        last_run:
          type: string
          format: uuid
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'

    PipelineLock:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        pipeline_id:
          $ref: "#/components/schemas/ID"
        pipeline_run_uuid:
          type: string
          format: uuid
        created_at:
          type: string
        acquired_at:
          type: string
        expires_in:
          type: integer

    PipelineRun:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        uuid:
          type: string
          format: uuid
        pipeline:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/EnumRunStatus"
        started_at:
          type: string
        last_modified:
          type: string
        logs:
          type: string
    
    TaskExecution:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        pipeline_run:
          type: string
          format: uuid
        task_id:
          type: string
        status:
          $ref: "#/components/schemas/EnumRunStatus"
        started_at:
          type: string
        last_modified:
          type: string
        last_message:
          type: string
        stderr:
          type: string
        stdout:
          type: string

    # --- Task ---
    ReqPatchTask:
      anyOf:
        - $ref: '#/components/schemas/ImageBuildTask'
        - $ref: '#/components/schemas/RequestTask'
        - $ref: '#/components/schemas/ApplicationTask'
        - $ref: '#/components/schemas/TapisJobTask'
        - $ref: '#/components/schemas/TapisActorTask'
        - $ref: '#/components/schemas/FunctionTask'
        - $ref: '#/components/schemas/TemplateTask'

    Task:
      oneOf:
        - $ref: '#/components/schemas/ImageBuildTask'
        - $ref: '#/components/schemas/RequestTask'
        - $ref: '#/components/schemas/ApplicationTask'
        - $ref: '#/components/schemas/TapisJobTask'
        - $ref: '#/components/schemas/TapisActorTask'
        - $ref: '#/components/schemas/FunctionTask'
        - $ref: '#/components/schemas/TemplateTask'
      discriminator:
        propertyName: type
        mapping:
          image_build: "#/components/schemas/ImageBuildTask"
          request: "#/components/schemas/RequestTask"
          application: "#/components/schemas/ApplicationTask"
          tapis_job: "#/components/schemas/TapisJobTask"
          tapis_actor: "#/components/schemas/TapisActorTask"
          function: "#/components/schemas/FunctionTask"
          template: "#/components/schemas/TemplateTask"
        
    BaseTask:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/EnumTaskType'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/TaskDependency'
        description:
          type: string
        execution_profile:
          $ref: '#/components/schemas/TaskExecutionProfile'
        input:
          $ref: "#/components/schemas/Input"
        output:
          $ref: "#/components/schemas/Output"
        conditions:
          $ref: "#/components/schemas/ConditionalExpressions"

    ####### Conditions ##########
    ConditionalExpressions:
      type: array
      items:
        $ref: "#/components/schemas/ConditionalExpression"

    ConditionalExpression:
      additionalProperties: true

    # ConditionalExpression:
    #   anyOf:
    #     -  $ref: "#/components/schemas/LogicalOperation"
    #     -  $ref: "#/components/schemas/ComparisonOperation"
    #     -  $ref: "#/components/schemas/MembershipOperation"

    # Operand:
    #   anyOf: 
    #     - type: string
    #     - type: integer
    #     - type: number
    #       format: float
    #     - type: boolean
    #     - type: string
    #       format: bytes
    #     - $ref: '#/components/schemas/OperandValueFrom'

    # OperandValueFrom:
    #   oneOf:
    #     - $ref: "#/components/schemas/ValueFromEnv"
    #     - $ref: "#/components/schemas/ValueFromArgs"
    #     - $ref: "#/components/schemas/ValueFromTaskOutput"

    # ComparisonOperand:
    #   type: array
    #   items:
    #     $ref: "#/components/schemas/Operand"
    #   minItems: 2
    #   maxItems: 2

    # NEComparisonOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       ne:
    #         $ref: "#/components/schemas/ComparisonOperand" 

    # EQComparisonOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       eq:
    #         $ref: "#/components/schemas/ComparisonOperand"

    # LTComparisonOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       lt:
    #         $ref: "#/components/schemas/ComparisonOperand"

    # GTComparisonOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       gt:
    #         $ref: "#/components/schemas/ComparisonOperand"

    # LEComparisonOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       le:
    #         $ref: "#/components/schemas/ComparisonOperand"

    # GEComparisonOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       ge:
    #         $ref: "#/components/schemas/ComparisonOperand"

    # ComparisonOperation:
    #   anyOf:
    #     - $ref: "#/components/schemas/EQComparisonOperation"
    #     - $ref: "#/components/schemas/NEComparisonOperation"
    #     - $ref: "#/components/schemas/LTComparisonOperation"
    #     - $ref: "#/components/schemas/GTComparisonOperation"
    #     - $ref: "#/components/schemas/GEComparisonOperation"
    #     - $ref: "#/components/schemas/LEComparisonOperation"

    # MembershipNeedle:
    #   $ref: "#/components/schemas/Operand"

    # MembershipHaystack:
    #   type: array
    #   items:
    #     $ref: "#/components/schemas/Operand"

    # MembershipOperands:
    #   type: array
    #   minItems: 2
    #   maxItems: 2
    #   items:
    #     - type:
    #       $ref: "#/components/schemas/MembershipNeedle"
    #     - type:
    #       $ref: "#/components/schemas/MembershipHaystack"

    # MembershipOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       in:
    #         $ref: "#/components/schemas/MembershipOperands"

    # LogicalOperand:
    #   anyOf:
    #     - $ref: "#/components/schemas/ComparisonOperation"
    #     - $ref: "#/components/schemas/MembershipOperation"

    # LogicalOperands:
    #   type: array
    #   minItems: 2
    #   items:
    #     $ref: "#/components/schemas/LogicalOperand"

    # AndLogicalOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       and:
    #         $ref: "#/components/schemas/LogicalOperand" 

    # OrLogicalOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       or:
    #         $ref: "#/components/schemas/LogicalOperand"

    # XorLogicalOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       xor:
    #         $ref: "#/components/schemas/LogicalOperand"

    # NandLogicalOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       nand:
    #         $ref: "#/components/schemas/LogicalOperand"

    # NorLogicalOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       nor:
    #         $ref: "#/components/schemas/LogicalOperand"

    # XnorLogicalOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       xnor:
    #         $ref: "#/components/schemas/LogicalOperand"

    # LogicalOperation:
    #   anyOf:
    #     - $ref: "#/components/schemas/AndLogicalOperation"
    #     - $ref: "#/components/schemas/OrLogicalOperation"
    #     - $ref: "#/components/schemas/XorLogicalOperation"
    #     - $ref: "#/components/schemas/NandLogicalOperation"
    #     - $ref: "#/components/schemas/NorLogicalOperation"
    #     - $ref: "#/components/schemas/XnorLogicalOperation"

    # NegationOperand:
    #   anyOf:
    #     - $ref: "#/components/schemas/ComparisonOperation"
    #     - $ref: "#/components/schemas/LogicalOperation"
    #     - $ref: "#/components/schemas/MembershipOperation"

    # NegationOperation:
    #   additionalProperties:
    #     type: object
    #     properties:
    #       not:
    #         $ref: "#/components/schemas/NegationOperand"
    # ##############################

    ImageBuildTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            builder:
              $ref: '#/components/schemas/EnumBuilder'
              default: "kaniko"
            cache:
              type: boolean
              default: true
            context:
              $ref: '#/components/schemas/Context'
            destination: 
              $ref: '#/components/schemas/Destination'

    Context:
      type: object
      required:
        - type
      properties:
        branch:
          type: string
        credentials:
          default: null
        build_file_path:
          type: string
        sub_path:
          type: string
        type:
          $ref: "#/components/schemas/EnumContextType"
        url:
          type: string
        visibility:
          $ref: "#/components/schemas/EnumContextVisibility"


    Destination:
      anyOf:
        - $ref: '#/components/schemas/DockerhubDestination'
        - $ref: '#/components/schemas/LocalDestination'
      # discriminator:
      #   propertyName: type
      #   mapping:
      #     dockerhub: "#/components/schemas/DockerhubDestination"
      #     local: "#/components/schemas/LocalDestination"

    BaseDestination:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/EnumDestinationType'

    LocalDestination:
      allOf:
        - $ref: "#/components/schemas/BaseDestination"
        - type: object
          properties:
            filename:
              type: string

    RegistryDestination:
      allOf:
        - $ref: "#/components/schemas/BaseDestination"
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/DockerhubCred'
            tag: 
              type: string
            url:
              type: string

    DockerhubDestination:
      allOf:
        - $ref: '#/components/schemas/BaseDestination'
        - $ref: '#/components/schemas/RegistryDestination'

    DockerhubCred:
      type: object
      properties:
        token:
          type: string
        username:
          type: string

    RequestTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            auth:
              type: object
            data:
              type: object
            headers:
              type: object
            http_method:
              $ref: '#/components/schemas/EnumHTTPMethod'
            query_params:
              type: object
            url:
              type: string

    ApplicationTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            image:
              type: string

    TemplateTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            uses:
              $ref: '#/components/schemas/Uses'

    TapisJobTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            poll:
              type: boolean
              default: true
            tapis_job_def:
              type: object

    TapisActorTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            poll:
              type: boolean
              default: true
            tapis_actor_id:
              type: string
            tapis_actor_message:
              nullable: true
              type: string
                  
    FunctionTask:
      allOf:
        - $ref: '#/components/schemas/BaseTask'
        - type: object
          properties:
            git_repositories:
              type: array
              items:
                $ref: "#/components/schemas/GitCloneDetails"
            runtime:
              $ref: "#/components/schemas/EnumRuntimeEnvironment"
            installer:
              $ref: "#/components/schemas/EnumInstaller"
            command:
              type: string
            entrypoint:
              type: string
            code:
              type: string
              format: byte
            packages:
              type: array
              items:
                type: string

    # --- Task Dependency ---
    TaskDependency:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        can_fail:
          type: boolean
        can_skip:
          type: boolean

    # --- Group and GroupUser ---
    GroupDetail:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        owner:
          $ref: "#/components/schemas/Username"
        tenant_id:
          $ref: "#/components/schemas/ID"
        uuid:
          type: string
          format: uuid
        users:
          type: array
          items:
            $ref: "#/components/schemas/GroupUser"

    Group:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        owner:
          $ref: "#/components/schemas/Username"
        tenant_id:
          $ref: "#/components/schemas/ID"
        uuid:
          type: string
          format: uuid

    GroupUser:
      type: object
      properties:
        group:
          $ref: "#/components/schemas/ID"
        username:
          $ref: "#/components/schemas/Username"
        is_admin:
          type: boolean
        uuid:
          type: string
          format: uuid

    Secret:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        description:
          type: string
        tenant_id:
          type: string
        owner:
          type: string
        sk_secret_name:
          type: string
        uuid:
          type: string
          format: uuid

    GroupSecret:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        group_id:
          $ref: "#/components/schemas/ID"
        uuid:
          type: string
          format: uuid
        secret:
          $ref: "#/components/schemas/Secret"

    Identity:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ID"
        name:
          type: string
        description:
          type: string
        owner:
          $ref: "#/components/schemas/Username"
        tenant_id:
          type: string
        uuid:
          type: string
          format: uuid
        credentials:
          type: string

    Spec:
      type: object
      properties:
        description:
          type: string
        required:
          type: boolean
        type:
          $ref: "#/components/schemas/EnumTaskIOType"

    Params:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Spec"

    Value:
      anyOf:
        - type: string
        - type: number
        - type: boolean

    ValueFromEnv:
      type: object
      properties:
        env:
          type: string

    ValueFromArgs:
      type: object
      properties:
        args:
          type: string

    ValueFromTaskOutput:
      type: object
      properties:
        task_output:
          $ref: "#/components/schemas/TaskOutputRef"

    ValueFromHost:
      type: object
      properties:
        host:
          type: string
    
    ValueFromSecret:
      type: object
      properties:
        secret:
          $ref: "#/components/schemas/SecretRef"

    SecretRef:
      type: object
      properties:
        engine:
          type: string
        pk:
          type: string
        field_selector:
          type: array
          items:
            type: string

    ValueFrom:
      anyOf: # Should be `oneOf` but type generating libraries can't handle discrimination without a property with which to do it
        - $ref: "#/components/schemas/ValueFromArgs"
        - $ref: "#/components/schemas/ValueFromEnv"
        - $ref: "#/components/schemas/ValueFromTaskOutput"
        - $ref: "#/components/schemas/ValueFromHost"
        - $ref: "#/components/schemas/ValueFromSecret"

    ValueFromSecretOrHost:
      anyOf: # Should be `oneOf` but type generating libraries can't handle discrimination without a property with which to do it
        - $ref: "#/components/schemas/ValueFromSecret"
        - $ref: "#/components/schemas/ValueFromHost"

    EnvSpecValueFrom:
      $ref: "#/components/schemas/ValueFromSecretOrHost"

    ArgSpecValueFrom:
      $ref: "#/components/schemas/ValueFromSecretOrHost"

    SpecWithValue:
      allOf:
        - $ref: "#/components/schemas/Spec"
        - type: object
          properties:
            value:
              nullable: true
              $ref: "#/components/schemas/Value"
            value_from:
              nullable: true
              $ref: "#/components/schemas/ValueFrom"

    Input:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/SpecWithValue"

    Output:
      type: object
      additionalProperties:
        type: object
        properties:
          type:
            $ref: "#/components/schemas/EnumTaskIOType"

    EnvSpec:
      allOf: 
        - $ref: "#/components/schemas/SpecWithValue"
        - type: object
          properties:
            value_from:
              $ref: "#/components/schemas/EnvSpecValueFrom"

    Env:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/EnvSpec"

    ArgSpec:
      allOf: 
        - $ref: "#/components/schemas/SpecWithValue"
        - type: object
          properties:
            value_from:
              $ref: "#/components/schemas/ArgSpecValueFrom"

    Args:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/ArgSpec"
    
    TaskOutputRef:
      type: object
      required:
        - task_id
        - output_id
      properties:
        task_id:
          type: string
        output_id:
          type: string

    GitRepository:
      type: object
      properties:
        url:
          type: string
        branch:
          type: string

    GitCloneDetails:
      allOf:
        - $ref: '#/components/schemas/GitRepository'
        - type: object
          required:
            - directory
          properties:
            directory:
              type: string

    Uses:
      type: object
      required:
        - name
        - source
      properties:
        name:
          $ref: '#/components/schemas/ID'
        source:
          $ref: '#/components/schemas/GitRepository'

    # --- String types with constraints ------------------------------------
    ID:
      type: string
      minLength: 1
      maxLength: 128
    Username:
      type: string
      minLength: 1
      maxLength: 64
    UUID:
      type: string
      format: uuid
    DescriptionString:
      type: string
      maxLength: 2048


    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------

    ReqGroup:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        users:
          type: array
          items:
            type: object
            properties:
              username:
                $ref: '#/components/schemas/Username'
              is_admin:
                default: false
                type: boolean

    ReqGroupUser:
      type: object
      required:
        - username
      properties:
        username:
          $ref: '#/components/schemas/Username'
        is_admin:
          type: boolean
          default: false

    ReqCreateSecret:
      type: object
      required:
        - id
        - data
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          type: string
        data:
          type: object

    ReqGroupSecret:
      type: object
      required:
        - secret_id
      properties:
        secret_id:
          $ref: '#/components/schemas/ID'
        id:
          type: string
          description: The unique identifier of the secret in the group. Defaults to the secret_id of no id is provided

    ReqUpdateGroupUser:
      type: object
      required:
        - is_admin
      properties:
        is_admin:
          type: boolean

    ReqArchive:
      oneOf:
        - $ref: '#/components/schemas/ReqTapisSystemArchive'
        - $ref: '#/components/schemas/ReqS3Archive'
      discriminator:
        propertyName: type
        mapping:
          system: '#/components/schemas/ReqTapisSystemArchive'
          s3: '#/components/schemas/ReqS3Archive'

    ReqBaseArchive:
      type: object
      required:
        - id
        - type
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: "#/components/schemas/EnumArchiveType"
        archive_dir:
          type: string

    ReqTapisSystemArchive:
      allOf:
        - $ref: "#/components/schemas/ReqBaseArchive"
        - type: object
          required:
            - system_id
          properties:
            system_id:
              $ref: '#/components/schemas/ID'

    ReqS3Archive:
      allOf:
        - $ref: "#/components/schemas/ReqBaseArchive"
        - type: object
          required:
            - endpoint
            - bucket
            - region
          oneOf:
            - required: [credentials]
            - required: [identity_uuid]
          properties:
            endpoint:
              type: string
            bucket:
              type: string
            region:
              type: string
            credentials:
              $ref: "#/components/schemas/ReqS3Cred"
            identity_uuid:
              type: string
              format: uuid
          

    ReqIdentity:
      oneOf:
        - $ref: "#/components/schemas/ReqDockerhubIdentity"
        - $ref: "#/components/schemas/ReqGithubIdentity"
      discriminator:
        propertyName: type
        mapping:
          dockerhub: "#/components/schemas/ReqDockerhubIdentity"
          github: "#/components/schemas/ReqGithubIdentity"

    ReqBaseIdentity:
      type: object
      required:
        - type
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/EnumIdentityType'

    ReqDockerhubIdentity:
      allOf:
        - $ref: "#/components/schemas/ReqBaseIdentity"
        - type: object
          properties:
            credentials:
              $ref: "#/components/schemas/ReqDockerhubCred"

    ReqGithubIdentity:
      allOf:
        - $ref: "#/components/schemas/ReqBaseIdentity"
        - type: object
          properties:
            credentials:
              $ref: "#/components/schemas/ReqGithubCred"

    ReqPipelineLock:
      type: object
      properties:
        expires_in:
          type: integer
          default: 0

    ReqPipeline:
      type: object
      required:
        - id
        - type
      properties:
        id:
          $ref: '#/components/schemas/ID'
        uses:
          $ref: '#/components/schemas/Uses'
        archive_ids:
          type: array
          items:
            $ref: "#/components/schemas/ID"
        description:
          $ref: '#/components/schemas/DescriptionString'
        env:
          $ref: "#/components/schemas/Env"
        enabled:
          type: boolean
        params:
          $ref: "#/components/schemas/Params"
        type:
          $ref: '#/components/schemas/EnumPipelineType'
        execution_profile:
          $ref: '#/components/schemas/ExecutionProfile'
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/ReqTask"

    ReqBaseTask:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/EnumTaskType'
        depends_on:
          type: array
          items:
            $ref: '#/components/schemas/TaskDependency'
        description:
          type: string
        execution_profile:
          $ref: "#/components/schemas/TaskExecutionProfile"
        input:
          $ref: "#/components/schemas/Input"
        output:
          $ref: "#/components/schemas/Output"
        conditions:
          $ref: "#/components/schemas/ConditionalExpressions"

    ReqImageBuildTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - context
            - destination
            - builder
          properties:
            builder:
              $ref: '#/components/schemas/EnumBuilder'
              default: "kaniko"
            cache:
              type: boolean
              default: true
            context:
              $ref: '#/components/schemas/ReqContext'
            destination: 
              $ref: '#/components/schemas/ReqDestination'

    ReqRequestTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - http_method
            - url
          properties:
            auth:
              type: object
            data:
              type: object
            headers:
              type: object
            http_method:
              $ref: '#/components/schemas/EnumHTTPMethod'
            query_params:
              type: object
            url:
              type: string

    ReqApplicationTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - image
          properties:
            image:
              type: string

    ReqTemplateTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - uses
          properties:
            uses:
              $ref: '#/components/schemas/Uses'

    ReqTapisJobTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - tapis_job_def
          properties:
            poll:
              type: boolean
              default: true
            tapis_job_def:
              $ref: '#/components/schemas/TapisJobDef'

    ReqTapisActorTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - tapis_actor_id
          properties:
            poll:
              type: boolean
              default: true
            tapis_actor_id:
              type: string
            tapis_actor_message:
              nullable: true
              type: string
    
    ReqFunctionTask:
      allOf:
        - $ref: '#/components/schemas/ReqBaseTask'
        - type: object
          required:
            - runtime
            - installer
          properties:
            git_repositories:
              type: array
              items:
                $ref: "#/components/schemas/ReqGitCloneDetails"
            runtime:
              $ref: "#/components/schemas/EnumRuntimeEnvironment"
            installer:
              $ref: "#/components/schemas/EnumInstaller"
            command:
              type: string
            entrypoint:
              type: string
            code:
              type: string
              format: byte
            packages:
              type: array
              items:
                type: string

    ReqGitCloneDetails:
      $ref: '#/components/schemas/GitCloneDetails'

    ReqTask:
      oneOf:
        - $ref: '#/components/schemas/ReqImageBuildTask'
        - $ref: '#/components/schemas/ReqRequestTask'
        - $ref: '#/components/schemas/ReqApplicationTask'
        - $ref: '#/components/schemas/ReqTapisJobTask'
        - $ref: '#/components/schemas/ReqTapisActorTask'
        - $ref: '#/components/schemas/ReqFunctionTask'
        - $ref: '#/components/schemas/ReqTemplateTask'
      discriminator:
        propertyName: type
        mapping:
          image_build: "#/components/schemas/ReqImageBuildTask"
          request: "#/components/schemas/ReqRequestTask"
          application: "#/components/schemas/ReqApplicationTask"
          tapis_job: "#/components/schemas/ReqTapisJobTask"
          tapis_actor: "#/components/schemas/ReqTapisActorTask"
          function: "#/components/schemas/ReqFunctionTask"
          template: "#/components/schemas/ReqTemplateTask"

    ########################### ETL

    ReqCreateETLPipeline:
      allOf:
        - $ref: "#/components/schemas/ReqPipeline"
        - type: object
          required:
            - id
            - remote_outbox
            - local_inbox
            - jobs
            - local_outbox
            - remote_inbox
          properties:
            id:
              $ref: '#/components/schemas/ID'
            description:
              type: string
            before:
              $ref: "#/components/schemas/ETLActionFilter"
            remote_outbox:
              $ref: '#/components/schemas/ETLRemoteOutbox'
            local_inbox:
              $ref: '#/components/schemas/ETLLocalInbox'
            jobs:
              type: array
              items:
                $ref: '#/components/schemas/TapisETLExtendedTapisJobDef'
            local_outbox:
              $ref: '#/components/schemas/ETLLocalOutbox'
            remote_inbox:
              $ref: '#/components/schemas/ETLRemoteInbox'
            after:
              $ref: "#/components/schemas/ETLActionFilter"

    ETLActionFilter:
      type: object
      properties:
        pipeline_ids:
          type: array
          items:
            type: string
          default: []
        run_async:
          type: boolean
          default: true

    TapisETLExtension:
      type: object
      properties:
        env_mappings:
          type: object
          additionalProperties: true
        last_status:
          type: string
          default: PENDING
    
    TapisJobExtensions:
      type: object
      properties:
        tapis_etl:
          $ref: "#/components/schemas/TapisETLExtension"

    ExtendedTapisJob:
      type: object
      properties:
        extensions:
          $ref: "#/components/schemas/TapisJobExtensions"

    TapisETLExtendedTapisJobDef:
      allOf:
        - $ref: "#/components/schemas/TapisJobDef"
        - $ref: "#/components/schemas/ExtendedTapisJob"

    BaseDataIntegrityProfile:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/ETLEnumDataIntegrityType"

    ChecksumDataIntegrityProfile:
      allOf:
        - $ref: "#/components/schemas/BaseDataIntegrityProfile"
        - type: object
          properties:
            type:
              type: string

    DoneFileDataIntegrityProfile:
      allOf:
        - $ref: "#/components/schemas/BaseDataIntegrityProfile"
        - type: object
          required:
            - done_files_path
          properties:
            type:
              type: string
            done_files_path:
              type: string
            include_patterns:
              type: array
              items:
                type: string
            exclude_patterns:
              type: array
              items:
                type: string

    ByteCheckDataIntegrityProfile:
      allOf:
        - $ref: "#/components/schemas/BaseDataIntegrityProfile"
        - type: object
          properties:
            type:
              type: string

    DataIntegrityProfile:
      oneOf:
        - $ref: "#/components/schemas/ChecksumDataIntegrityProfile"
        - $ref: "#/components/schemas/DoneFileDataIntegrityProfile"
        - $ref: "#/components/schemas/ByteCheckDataIntegrityProfile"
      discriminator:
        propertyName: type
        mapping:
          checksum: "#/components/schemas/ChecksumDataIntegrityProfile"
          done_file: "#/components/schemas/DoneFileDataIntegrityProfile"
          byte_check: "#/components/schemas/ByteCheckDataIntegrityProfile"

    ETLSystem:
      type: object
      properties:
        system_id:
          type: string
        path:
          type: string
        include_patterns:
          type: array
          items: 
            type: string
        exclude_patterns:
          type: array
          items: 
            type: string

    ETLManifestsSystem:
      allOf:
        - $ref: "#/components/schemas/ETLSystem"
        - type: object
          properties:
            generation_policy:
              $ref: "#/components/schemas/ETLEnumManifestGenerationPolicy"
            priority:
              $ref: "#/components/schemas/ETLEnumManifestPriority"

    ETLDataSystem:
      allOf:
        - $ref: "#/components/schemas/ETLSystem"
        - type: object
          properties:
            integrity_profile:
              $ref: "#/components/schemas/DataIntegrityProfile"

    ETLControlSystem:
      allOf:
        - $ref: "#/components/schemas/ETLSystem"

    ETLSystemsConfiguration:
      type: object
      required:
        - manifests
        - data
      properties:
        manifests:
          $ref: "#/components/schemas/ETLManifestsSystem"
        data:
          $ref: "#/components/schemas/ETLDataSystem"
    
    ETLRemoteOutbox:
      allOf:
        - $ref: "#/components/schemas/ETLSystemsConfiguration"

    ETLLocalInbox:
      allOf:
        - $ref: "#/components/schemas/ETLSystemsConfiguration"
        - type: object
          properties:
            control:
              $ref: "#/components/schemas/ETLControlSystem"

    ETLLocalOutbox:
      allOf:
        - $ref: "#/components/schemas/ETLSystemsConfiguration"

    ETLRemoteInbox:
      allOf: 
        - $ref: "#/components/schemas/ETLSystemsConfiguration"

    ETLEnumManifestGenerationPolicy:
      type: string
      enum:
        - manual
        - auto_one_per_file
        - auto_one_for_all

    ETLEnumManifestPriority:
      type: string
      enum:
        - oldest
        - newest
        - any

    ETLEnumDataIntegrityType:
      type: string
      enum:
        - checksum
        - byte_check
        - done_file

    ################################# End ETL
        
    ReqCIPipeline:
      type: object
      required:
        - id
        - type
        - context
        - destination
      properties:
        id:
          $ref: '#/components/schemas/ID'
        description:
          $ref: '#/components/schemas/DescriptionString'
        archive_ids:
          type: array
          items:
            $ref: '#/components/schemas/ID'
        builder:
          $ref: '#/components/schemas/EnumBuilder'
        type:
          $ref: '#/components/schemas/EnumPipelineType'
        context:
          $ref: '#/components/schemas/ReqContext'
        destination:
          $ref: '#/components/schemas/ReqDestination'

    # --- Context Request ---
    ReqBaseContext:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/EnumContextType"

    ReqLocalContext:
      allOf:
        - $ref: "#/components/schemas/ReqBaseContext"
        - type: object
          required:
            - filename
          properties:
            filename:
              type: string

    ReqNonLocalContext:
      allOf:
        - $ref: "#/components/schemas/ReqBaseContext"
        - type: object
          required:
            - visibility
            - url
          properties: 
            visibility:
              $ref: "#/components/schemas/EnumContextVisibility"
            url:
              type: string
          oneOf:
            - required: [credentials]
            - required: [identity_uuid]

    ReqRegistryContext:
      allOf:
        - $ref: "#/components/schemas/ReqNonLocalContext"
        - type: object
          properties:
            tag:
              type: string
              default: latest

    ReqRepoContext:
      allOf:
        - $ref: "#/components/schemas/ReqNonLocalContext"
        - type: object
          required:
            - branch
            - build_file_path
          properties:
            branch:
              type: string
            build_file_path:
              type: string
            sub_path:
              type: string

    ReqGithubContext:
      allOf:
        - $ref: "#/components/schemas/ReqBaseContext"
        - $ref: "#/components/schemas/ReqRepoContext"
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/ReqGithubCred'
            identity_uuid:
              type: string
              format: uuid

    ReqGitlabContext:
      allOf:
        - $ref: "#/components/schemas/ReqBaseContext"
        - $ref: "#/components/schemas/ReqRepoContext"
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/ReqGitlabCred'
            identity_uuid:
              type: string
              format: uuid

    ReqDockerhubContext:
      allOf:
        - $ref: "#/components/schemas/ReqBaseContext"
        - $ref: "#/components/schemas/ReqRegistryContext"
        - type: object
          properties:
            credentials:
              $ref: '#/components/schemas/ReqDockerhubCred'
            identity_uuid:
              type: string
              format: uuid

    ReqContext:
      oneOf:
        - $ref: "#/components/schemas/ReqGithubContext"
        - $ref: "#/components/schemas/ReqGitlabContext"
        - $ref: "#/components/schemas/ReqDockerhubContext"
        - $ref: "#/components/schemas/ReqLocalContext"
      discriminator:
        propertyName: type
        mapping:
          github: "#/components/schemas/ReqGithubContext"
          gitlab: "#/components/schemas/ReqGitlabContext"
          dockerhub: "#/components/schemas/ReqDockerhubContext"
          local: "#/components/schemas/ReqLocalContext"

    # --- Credentials ---
    ReqS3Cred:
      type: object
      properties:
        access_key:
          type: string
        access_secret:
          type: string

    ReqDockerhubCred:
      type: object
      properties:
        token:
          type: string
        username:
          type: string

    ReqGitlabCred:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
    
    ReqGithubCred:
      type: object
      properties:
        personal_access_token:
          type: string
        username:
          type: string
      
    # --- Destination ---
    ReqBaseDestination:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/EnumDestinationType'

    ReqLocalDestination:
      allOf:
        - $ref: "#/components/schemas/ReqBaseDestination"
        - type: object
          properties:
            filename:
              type: string

    ReqRegistryDestination:
      allOf:
        - $ref: "#/components/schemas/ReqBaseDestination"
        - type: object
          required:
            - url
          properties:
            credentials:
              $ref: '#/components/schemas/ReqDockerhubCred'
            identity_uuid:
              type: string
              format: uuid
            tag: 
              type: string
            url:
              type: string
          # Mutual exclusion. credentials or identity uuid
          oneOf:
            - required: [credentials]
            - required: [identity_uuid]

    ReqDockerhubDestination:
      allOf:
        - $ref: '#/components/schemas/ReqBaseDestination'
        - $ref: '#/components/schemas/ReqRegistryDestination'

    ReqDestination:
      oneOf:
        - $ref: '#/components/schemas/ReqDockerhubDestination'
        - $ref: '#/components/schemas/ReqLocalDestination'
      discriminator:
        propertyName: type
        mapping:
          dockerhub: "#/components/schemas/ReqDockerhubDestination"
          local: "#/components/schemas/ReqLocalDestination"
        
    TapisJobDef:
      $ref: "https://raw.githubusercontent.com/tapis-project/tapis-client-java/prod/jobs-client/src/main/resources/JobsAPI.yaml#components/schemas/ReqSubmitJob"

    ReqRunPipeline:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        args:
          $ref: "#/components/schemas/Args"
        directives:
          type: array
          items:
            type: string

    ReqCreateTaskExecution:
      type: object
      required:
        - task_id
        - uuid
      properties:
        task_id:
          $ref: "#/components/schemas/ID"
        started_at:
          type: string
        last_modified:
          type: string
        uuid:
          type: string
          format: uuid

    ReqPatchTaskExecution:
      type: object
      properties:
        last_message:
          type: string
        stdout:
          type: string
        stderr:
          type: string

    ReqPatchPipelineRun:
      type: object
      properties:
        logs:
          type: string

    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBase:
      type: object
      required:
        - status
        - message
        - result
        - version
        - metadata
      properties:
        status:
          type: string
          default: success
        message:
          type: string
          default: success
        result:
          type: object
        version:
          type: string
        metadata:
          type: object
          default: {}

    RespResourceURL:
      allOf:
        - $ref: "#/components/schemas/RespBase"
        - type: object
          properties:
            message:
              type: string
              default: 'created'
            result:
              $ref: '#/components/schemas/ResourceURLResult'

    ResourceURLResult:
      type: object
      properties:
        url:
          type: string

    RespString:
      allOf:
        - $ref: "#/components/schemas/RespBase"
        - type: object
          properties:
            result:
              type: string
              

    RespObject:
      $ref: "#/components/schemas/RespBase"

    RespList:
      allOf:
        - $ref: "#/components/schemas/RespBase"
        - type: object
          properties:
            result:
              type: array
              items:
                type: object

    RespError:
      allOf:
        - $ref: "#/components/schemas/RespBase"
        - type: object
          properties:
            status:
              type: string
              default: error
            message:
              type: string
              default: error

    RespGroupDetail:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/GroupDetail'

    RespGroupUser:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/GroupUser'
    
    RespGroupUserList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/GroupUser'

    RespSecret:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Secret'
    
    RespSecretList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Secret'

    RespGroupSecret:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/GroupSecret'
    
    RespGroupSecretList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/GroupSecret'

    RespGroupList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Group'
    
    RespIdentity:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Identity'
    
    RespIdentityList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Identity'

    RespArchive:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Archive'

    RespArchiveList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Archive'

    RespPipelineLock:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: "#/components/schemas/PipelineLock"

    RespPipelineLockList:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: "#/components/schemas/PipelineLock"

    RespPipelineLockAcquisition:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              type: object
              properties:
                pipeline_lock_uuid:
                  type: string
                  format: uuid
                acquired:
                  type: boolean
                message:
                  type: string

    RespPipeline:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Pipeline'
          
    RespPipelineList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Pipeline'

    RespPipelineRun:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/PipelineRun'
          
    RespPipelineRunList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/PipelineRun'

    RespTaskExecution:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/TaskExecution'
          
    RespTaskExecutionList:
      allOf:
        - $ref: '#/components/schemas/RespList'
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/TaskExecution'
    
    RespTask:
      allOf:
        - $ref: '#/components/schemas/RespObject'
        - type: object
          properties:
            result:
              $ref: '#/components/schemas/Task'

    RespTaskList:
      allOf:
        - $ref: '#/components/schemas/RespList' 
        - type: object
          properties:
            result:
              type: array
              items:
                $ref: '#/components/schemas/Task'

    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    EnumArchiveType:
      type: string
      enum:
        - system
        - s3
    
    EnumPipelineType:
      type: string
      enum:
        - workflow
        - ci
        - etl

    EnumRunStatus:
      type: string
      enum:
        - staging
        - submitted
        - active
        - pending
        - backoff
        - completed
        - failed
        - suspended
        - archiving
        - terminated
        - terminating
        - skipped

    EnumInvocationMode:
      type: string
      enum:
        - async
        - sync

    EnumRetryPolicy:
      type: string
      enum:
        - exponential_backoff

    EnumDuplicateSubmissionPolicy:
      type: string
      enum:
        - allow
        - deny
        - terminate
        - defer

    EnumTaskType:
      type: string
      enum:
        - image_build
        - application
        - request
        - tapis_job
        - tapis_actor
        - function
        - template

    EnumTaskFlavor:
      type: string
      enum:
        - c1tiny
        - c1sml
        - c1med
        - c1lrg
        - c1xlrg
        - c1xxlrg
        - g1nvdsml
        - g1nvdmed
        - g1nvdlrg

    EnumBuilder:
      type: string
      enum:
        - kaniko
        - singularity

    EnumContextVisibility:
      type: string
      enum:
        - private
        - public

    EnumContextType:
      type: string
      enum:
        - github
        - gitlab
        - dockerhub
        - local

    EnumDestinationType:
      type: string
      enum:
        - dockerhub
        - local
    
    EnumHTTPMethod:
      type: string
      enum:
        - get
        - post
        - put
        - patch
        - delete

    EnumIdentityType:
      type: string
      enum:
        - github
        - dockerhub
    
    EnumInputType:
      type: string
      enum:
        - string
        - int
        - float

    EnumInstaller:
      type: string
      enum:
        - pip

    EnumRuntimeEnvironment:
      type: string
      enum:
        - tapis/workflows-python-singularity:0.1.0
        - "python:latest"
        - "python:slim"
        - "python:3.12"
        - "python:3.12-slim"
        - "python:3.11"
        - "python:3.11-slim"
        - "python:3.10"
        - "python:3.10-slim"
        - "python:3.9"
        - "python:3.9-slim"
        - "python:3.8"
        - "python:3.8-slim"
        - "python:2.7.18"
        - "python:2.7.18-slim"
        - "tensorflow/tensorflow:latest"
        - "tensorflow/tensorflow:latest-gpu"
        - "tensorflow/tensorflow:2.12.0"
        - "tensorflow/tensorflow:2.12.0-gpu"
        - "pytorch/pytorch:latest"
        - "huggingface/transformers-pytorch-gpu:latest"
        - "huggingface/transformers-pytorch-gpu:4.29.2"
        - "ghcr.io/tobiashi26/pygeoflood-container:main"

    EnumTaskIOType:
      type: string
      enum:
        - string
        - number
        - boolean

    EnumLogicalOperator:
      type: string
      enum:
        - and
        - or
        - xor
        - nand
        - nor
        - xnor

    EnumMembershipOperator:
      type: string
      enum:
        - in

    EnumComparisonOperator:
      type: string
      enum: [ "eq", "ne", "gt", "lt", "ge", "le" ]

    EnumNegationOperator:
      type: string
      enum: [ "not" ]
        